{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport Helmet from \"react-helmet\";\nimport Head from \"next/head\";\nimport PropTypes from \"prop-types\";\nimport AppLayout from \"../components/AppLayout\";\nimport withRedux from \"next-redux-wrapper\";\nimport withReduxsaga from \"next-redux-saga\";\nimport { Provider } from \"react-redux\";\nimport { createStore, compose, applyMiddleware } from \"redux\";\nimport reducer from \"../Reducer\";\nimport createSagaMiddleware from \"redux-saga\";\nimport rootSaga from \"../sagas\";\nimport { LOAD_USER_POSTS_REQUEST } from \"../Reducer/post\";\nimport { LOAD_USER_REQUEST } from \"../Reducer/user\";\nimport Axios from \"axios\"; //모든 페이지에 공통적으로 들어가는것들을 여기다모음\n\nvar Nodebird = function Nodebird(_ref) {\n  var Component = _ref.Component,\n      store = _ref.store,\n      pageProps = _ref.pageProps;\n  //Component는 Next.js에서 넣어 주는 멤버 >> 말그대로 컴포넌트 전체를 넣어 주며 isServer router Component 등을 넗어준다\n  return __jsx(Provider, {\n    store: store\n  }, __jsx(Helmet, {\n    title: \"NodeBird\",\n    htmlAttributes: {\n      lang: \"ko\"\n    },\n    meta: [{\n      charset: \"UTF-8\"\n    }, {\n      name: \"viewport\",\n      content: \"width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=yes,viewport-fit=cover\"\n    }, {\n      \"http-equiv\": \"X-UA-Compatible\",\n      content: \"IE=edge\"\n    }, {\n      name: \"description\",\n      content: \"제로초의 NodeBird SNS\"\n    }, {\n      name: \"og:title\",\n      content: \"NodeBird\"\n    }, {\n      name: \"og:description\",\n      content: \"제로초의 NodeBird SNS\"\n    }, {\n      property: \"og:type\",\n      content: \"website\"\n    }],\n    link: [{\n      rel: \"shortcut icon\",\n      href: \"/favicon.ico\"\n    }, {\n      rel: \"stylesheet\",\n      href: \"https://cdnjs.cloudflare.com/ajax/libs/antd/3.16.2/antd.css\"\n    }, {\n      rel: \"stylesheet\",\n      href: \"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick.min.css\"\n    }, {\n      rel: \"stylesheet\",\n      href: \"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick-theme.min.css\"\n    }]\n  }), __jsx(AppLayout, null, __jsx(Component, pageProps)));\n}; //store 만드는 과정 withRedux라는 고위함수를 만들어 주는데 확장자 처럼 사용되며\n//state+reducer가 합쳐진 것을 모으는 곳이 store라고함\n// export default withRedux((initialState,options)=>{\n//     const middlewares = [];\n//     const enhancer =  compose(\n//         applyMiddleware(...middlewares)\n//         ,!options.isServer && window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ?\n//         window.__REDUX_DEVTOOLS_EXTENSION__():(f)=>f);\n//     const store=createStore(reducer,initialState,enhancer);\n// //middlewares는 state,action,reducer와 store사이 기능을 추가 변조 할수있는 역할을 가짐\n//     return store;\n// })(Nodebird);\n\n\nNodebird.getInitialProps = function _callee(context) {\n  var ctx, Component, pageProps, state, cookie;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          ctx = context.ctx, Component = context.Component;\n          pageProps = {};\n          state = ctx.store.getState();\n          cookie = ctx.isServer ? ctx.req.headers.cookie : \"\";\n\n          if (ctx.isServer && cookie) {\n            Axios.defaults.headers.Cookie = cookie;\n          }\n\n          if (!state.user.me) {\n            ctx.store.dispatch({\n              type: LOAD_USER_REQUEST\n            });\n          }\n\n          if (!Component.getInitialProps) {\n            _context.next = 10;\n            break;\n          }\n\n          _context.next = 9;\n          return _regeneratorRuntime.awrap(Component.getInitialProps(ctx));\n\n        case 9:\n          pageProps = _context.sent;\n\n        case 10:\n          return _context.abrupt(\"return\", {\n            pageProps: pageProps\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nvar configureStore = function configureStore(initialState, options) {\n  var sagaMiddleware = createSagaMiddleware();\n  var middlewares = [sagaMiddleware];\n  var enhancer = false ? compose(applyMiddleware.apply(void 0, middlewares)) : compose(applyMiddleware.apply(void 0, middlewares), !options.isServer && typeof window.__REDUX_DEVTOOLS_EXTENSION__ !== \"undefined\" ? window.__REDUX_DEVTOOLS_EXTENSION__() : function (f) {\n    return f;\n  });\n  var store = createStore(reducer, initialState, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nexport default withRedux(configureStore)(withReduxsaga(Nodebird));","map":{"version":3,"sources":["C:/ReactNodeBird/Front/pages/_app.js"],"names":["React","Helmet","Head","PropTypes","AppLayout","withRedux","withReduxsaga","Provider","createStore","compose","applyMiddleware","reducer","createSagaMiddleware","rootSaga","LOAD_USER_POSTS_REQUEST","LOAD_USER_REQUEST","Axios","Nodebird","Component","store","pageProps","lang","charset","name","content","property","rel","href","getInitialProps","context","ctx","state","getState","cookie","isServer","req","headers","defaults","Cookie","user","me","dispatch","type","configureStore","initialState","options","sagaMiddleware","middlewares","enhancer","window","__REDUX_DEVTOOLS_EXTENSION__","f","sagaTask","run"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport Helmet from \"react-helmet\";\r\nimport Head from \"next/head\";\r\nimport PropTypes from \"prop-types\";\r\nimport AppLayout from \"../components/AppLayout\";\r\nimport withRedux from \"next-redux-wrapper\";\r\nimport withReduxsaga from \"next-redux-saga\";\r\nimport { Provider } from \"react-redux\";\r\nimport { createStore, compose, applyMiddleware } from \"redux\";\r\nimport reducer from \"../Reducer\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport rootSaga from \"../sagas\";\r\nimport { LOAD_USER_POSTS_REQUEST } from \"../Reducer/post\";\r\nimport { LOAD_USER_REQUEST } from \"../Reducer/user\";\r\nimport Axios from \"axios\";\r\n\r\n//모든 페이지에 공통적으로 들어가는것들을 여기다모음\r\n\r\nconst Nodebird = ({ Component, store, pageProps }) => {\r\n  //Component는 Next.js에서 넣어 주는 멤버 >> 말그대로 컴포넌트 전체를 넣어 주며 isServer router Component 등을 넗어준다\r\n  return (\r\n    <Provider store={store}>\r\n      <Helmet\r\n        title=\"NodeBird\"\r\n        htmlAttributes={{ lang: \"ko\" }}\r\n        meta={[\r\n          {\r\n            charset: \"UTF-8\"\r\n          },\r\n          {\r\n            name: \"viewport\",\r\n            content:\r\n              \"width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=yes,viewport-fit=cover\"\r\n          },\r\n          {\r\n            \"http-equiv\": \"X-UA-Compatible\",\r\n            content: \"IE=edge\"\r\n          },\r\n          {\r\n            name: \"description\",\r\n            content: \"제로초의 NodeBird SNS\"\r\n          },\r\n          {\r\n            name: \"og:title\",\r\n            content: \"NodeBird\"\r\n          },\r\n          {\r\n            name: \"og:description\",\r\n            content: \"제로초의 NodeBird SNS\"\r\n          },\r\n          {\r\n            property: \"og:type\",\r\n            content: \"website\"\r\n          }\r\n        ]}\r\n        link={[\r\n          {\r\n            rel: \"shortcut icon\",\r\n            href: \"/favicon.ico\"\r\n          },\r\n          {\r\n            rel: \"stylesheet\",\r\n            href: \"https://cdnjs.cloudflare.com/ajax/libs/antd/3.16.2/antd.css\"\r\n          },\r\n          {\r\n            rel: \"stylesheet\",\r\n            href:\r\n              \"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick.min.css\"\r\n          },\r\n          {\r\n            rel: \"stylesheet\",\r\n            href:\r\n              \"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick-theme.min.css\"\r\n          }\r\n        ]}\r\n      />\r\n      <AppLayout>\r\n        <Component {...pageProps} />\r\n      </AppLayout>\r\n    </Provider>\r\n  );\r\n};\r\n//store 만드는 과정 withRedux라는 고위함수를 만들어 주는데 확장자 처럼 사용되며\r\n//state+reducer가 합쳐진 것을 모으는 곳이 store라고함\r\n// export default withRedux((initialState,options)=>{\r\n//     const middlewares = [];\r\n//     const enhancer =  compose(\r\n//         applyMiddleware(...middlewares)\r\n//         ,!options.isServer && window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ?\r\n//         window.__REDUX_DEVTOOLS_EXTENSION__():(f)=>f);\r\n//     const store=createStore(reducer,initialState,enhancer);\r\n// //middlewares는 state,action,reducer와 store사이 기능을 추가 변조 할수있는 역할을 가짐\r\n//     return store;\r\n// })(Nodebird);\r\n\r\nNodebird.getInitialProps = async context => {\r\n  const { ctx, Component } = context;\r\n  let pageProps = {};\r\n  const state = ctx.store.getState();\r\n  const cookie = ctx.isServer ? ctx.req.headers.cookie : \"\";\r\n  if (ctx.isServer && cookie) {\r\n    Axios.defaults.headers.Cookie = cookie;\r\n  }\r\n  if (!state.user.me) {\r\n    ctx.store.dispatch({\r\n      type: LOAD_USER_REQUEST\r\n    });\r\n  }\r\n  if (Component.getInitialProps) {\r\n    pageProps = await Component.getInitialProps(ctx);\r\n  }\r\n\r\n  return { pageProps };\r\n};\r\n\r\nconst configureStore = (initialState, options) => {\r\n  const sagaMiddleware = createSagaMiddleware();\r\n  const middlewares = [sagaMiddleware];\r\n  const enhancer =\r\n    process.env.NODE_ENV === \"production\"\r\n      ? compose(applyMiddleware(...middlewares))\r\n      : compose(\r\n          applyMiddleware(...middlewares),\r\n          !options.isServer &&\r\n            typeof window.__REDUX_DEVTOOLS_EXTENSION__ !== \"undefined\"\r\n            ? window.__REDUX_DEVTOOLS_EXTENSION__()\r\n            : f => f\r\n        );\r\n  const store = createStore(reducer, initialState, enhancer);\r\n  store.sagaTask = sagaMiddleware.run(rootSaga);\r\n  return store;\r\n};\r\n\r\nexport default withRedux(configureStore)(withReduxsaga(Nodebird));\r\n"]},"metadata":{},"sourceType":"module"}