{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport Link from \"next/link\";\nimport { Card, Icon, Button, Avatar, Divider, Form, Input, List, Comment } from \"antd\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { ADD_POST_REQUEST, ADD_COMMENT_REQUEST, LOAD_COMMENTS_REQUEST, UNLIKE_POST_REQUEST, LIKE_POST_REQUEST } from \"../Reducer/post\";\nimport PostImages from './PostImages';\n\nconst PostCard = ({\n  post\n}) => {\n  const {\n    0: commentFormOpened,\n    1: setCommentOpened\n  } = useState(false);\n  const {\n    0: commentText,\n    1: setCommentText\n  } = useState(\"\");\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    commentAdded,\n    isAddingComment\n  } = useSelector(state => state.post);\n  const dispatch = useDispatch();\n  const onToggleComment = useCallback(() => {\n    setCommentOpened(prev => !prev);\n\n    if (!commentFormOpened) {\n      dispatch({\n        type: LOAD_COMMENTS_REQUEST,\n        data: post.id\n      });\n    }\n  }, []);\n  const onSubmitComment = useCallback(e => {\n    e.preventDefault();\n\n    if (!me) {\n      return alert(\"로그인 필요합니다\");\n    }\n\n    dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id,\n        content: commentText\n      }\n    });\n  }, [me && me.id, commentText]);\n  const onChangeCommentText = useCallback(e => {\n    setCommentText(e.target.value);\n  }, []);\n  useEffect(() => {\n    setCommentText(\"\");\n  }, [commentAdded === true]);\n  const onToggleLike = useCallback(() => {\n    if (!me) {\n      return alert(\"로그인이 필요 합니다\");\n    }\n\n    console.log(post);\n\n    if (post.Liker && post.Liker.find(v => v.id === me.id)) {\n      return dispatch({\n        type: UNLIKE_POST_REQUEST,\n        data: post.id\n      });\n    } else {\n      return dispatch({\n        type: LIKE_POST_REQUEST,\n        data: post.id\n      });\n    }\n  }, [me && me.id]);\n  return __jsx(\"div\", null, __jsx(Card, {\n    key: +post.createdAt,\n    cover: post.Images[0] && __jsx(PostImages, {\n      images: post.Images\n    }),\n    actions: [__jsx(Icon, {\n      type: \"retweet\",\n      key: \"retweet\"\n    }), __jsx(Icon, {\n      type: \"heart\",\n      key: \"heart\",\n      theme: 'twoTone',\n      twoToneColor: \"#eb2f96\",\n      onClick: onToggleLike\n    }), __jsx(Icon, {\n      type: \"message\",\n      key: \"message\",\n      onClick: onToggleComment\n    }), __jsx(Icon, {\n      type: \"ellipsis\",\n      key: \"ellipsis\"\n    })],\n    extra: __jsx(Button, null, \"\\uD314\\uB85C\\uC6B0\")\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: {\n        pathname: `/user`,\n        query: {\n          id: post.User.id\n        }\n      }\n    }, __jsx(\"a\", null, __jsx(Avatar, null, post.User.nickname[0]))),\n    title: post.User.nickname,\n    description: __jsx(\"div\", null, post.content.split(/(#[^\\s]+)/g).map(v => {\n      if (v.match(/(#[^\\s]+)/g)) {\n        return __jsx(Link, {\n          href: {\n            pathname: \"/hashtag\",\n            query: {\n              tag: v.slice(1)\n            }\n          },\n          as: `/hashtag/${v.slice(1)}`,\n          key: v\n        }, __jsx(\"a\", null, v));\n      }\n\n      return v;\n    }))\n  })), commentFormOpened && __jsx(React.Fragment, null, __jsx(Form, {\n    onSubmit: onSubmitComment\n  }, __jsx(Form.Item, null, __jsx(Input.TextArea, {\n    rows: 4,\n    value: commentText,\n    onChange: onChangeCommentText\n  })), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: isAddingComment\n  }, \" \", \"\\uC785\\uB825!!\", \" \")), __jsx(List, {\n    header: `${post.Comments ? post.Comments.length : 0} 댓글`,\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments || [],\n    renderItem: item => __jsx(\"li\", null, __jsx(Comment, {\n      author: item.User.nickname,\n      avatar: __jsx(Link, {\n        href: {\n          pathname: \"/user\",\n          query: {\n            id: item.User.id\n          }\n        },\n        as: `/user/${item.User.id}`\n      }, __jsx(\"a\", null, __jsx(Avatar, null, item.User.nickname[0]))),\n      content: item.content,\n      datetime: item.createAt\n    }))\n  })));\n};\n\nexport default PostCard;","map":{"version":3,"sources":["C:/ReactNodeBird/Front/components/PostCard.js"],"names":["React","useState","useCallback","useEffect","Link","Card","Icon","Button","Avatar","Divider","Form","Input","List","Comment","useSelector","useDispatch","ADD_POST_REQUEST","ADD_COMMENT_REQUEST","LOAD_COMMENTS_REQUEST","UNLIKE_POST_REQUEST","LIKE_POST_REQUEST","PostImages","PostCard","post","commentFormOpened","setCommentOpened","commentText","setCommentText","me","state","user","commentAdded","isAddingComment","dispatch","onToggleComment","prev","type","data","id","onSubmitComment","e","preventDefault","alert","postId","content","onChangeCommentText","target","value","onToggleLike","console","log","Liker","find","v","createdAt","Images","pathname","query","User","nickname","split","map","match","tag","slice","Comments","length","item","createAt"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from \"react\";\r\nimport Link from \"next/link\";\r\nimport {\r\n  Card,\r\n  Icon,\r\n  Button,\r\n  Avatar,\r\n  Divider,\r\n  Form,\r\n  Input,\r\n  List,\r\n  Comment\r\n} from \"antd\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { ADD_POST_REQUEST, ADD_COMMENT_REQUEST, LOAD_COMMENTS_REQUEST, UNLIKE_POST_REQUEST, LIKE_POST_REQUEST } from \"../Reducer/post\";\r\nimport PostImages from './PostImages';\r\n\r\nconst PostCard = ({ post }) => {\r\n  const [commentFormOpened, setCommentOpened] = useState(false);\r\n  const [commentText, setCommentText] = useState(\"\");\r\n  const { me } = useSelector(state => state.user);\r\n  const { commentAdded, isAddingComment } = useSelector(state => state.post);\r\n  const dispatch = useDispatch();\r\n\r\n  const onToggleComment = useCallback(() => {\r\n    setCommentOpened(prev => !prev);\r\n    if(!commentFormOpened){\r\n      dispatch({\r\n        type:LOAD_COMMENTS_REQUEST,\r\n        data:post.id,\r\n      })\r\n    }\r\n  }, []);\r\n\r\n  const onSubmitComment = useCallback(\r\n    e => {\r\n      e.preventDefault();\r\n      if (!me) {\r\n        return alert(\"로그인 필요합니다\");\r\n      }\r\n      dispatch({\r\n        type: ADD_COMMENT_REQUEST,\r\n        data: {\r\n          postId: post.id,\r\n          content:commentText,\r\n        }\r\n      });\r\n    },\r\n    [me && me.id,commentText]\r\n  );\r\n\r\n  const onChangeCommentText = useCallback(e => {\r\n    setCommentText(e.target.value);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setCommentText(\"\");\r\n  }, [commentAdded === true]);\r\n\r\n  const onToggleLike = useCallback(()=>{\r\n    if(!me){\r\n      return alert(\"로그인이 필요 합니다\");\r\n    }\r\n    console.log(post)\r\n    if(post.Liker && post.Liker.find(v=> v.id === me.id)){\r\n      return dispatch({\r\n        type:UNLIKE_POST_REQUEST,\r\n        data:post.id,\r\n      })\r\n    }else{\r\n      return dispatch({\r\n        type:LIKE_POST_REQUEST,\r\n        data:post.id,\r\n      })\r\n    }\r\n  },[me && me.id])\r\n  \r\n  return (\r\n    <div>\r\n      <Card\r\n        key={+post.createdAt}\r\n        cover={post.Images[0] && <PostImages images = { post.Images }/>}\r\n        actions={[\r\n          <Icon type=\"retweet\" key=\"retweet\" />,\r\n          <Icon type=\"heart\" key=\"heart\" theme={'twoTone'} twoToneColor=\"#eb2f96\" onClick = { onToggleLike } />,\r\n          <Icon type=\"message\" key=\"message\" onClick={onToggleComment} />,\r\n          <Icon type=\"ellipsis\" key=\"ellipsis\" />\r\n        ]}\r\n        extra={<Button>팔로우</Button>}\r\n      >\r\n        <Card.Meta\r\n          avatar={\r\n            <Link href={{ pathname: `/user`, query: { id: post.User.id } }}>\r\n              <a>\r\n                <Avatar>{post.User.nickname[0]}</Avatar>\r\n              </a>\r\n            </Link>\r\n          }\r\n          title={post.User.nickname}\r\n          description={\r\n            <div>\r\n              {post.content.split(/(#[^\\s]+)/g).map(v => {\r\n                if (v.match(/(#[^\\s]+)/g)) {\r\n                  return (\r\n                    <Link\r\n                      href={{\r\n                        pathname: \"/hashtag\",\r\n                        query: { tag: v.slice(1) }\r\n                      }}\r\n                      as={`/hashtag/${v.slice(1)}`}\r\n                      key={v}\r\n                    >\r\n                      <a>{v}</a>\r\n                    </Link>\r\n                  );\r\n                }\r\n                return v;\r\n              })}\r\n            </div>\r\n          }\r\n        />\r\n      </Card>\r\n      {commentFormOpened && (\r\n        <>\r\n          <Form onSubmit={onSubmitComment}>\r\n            <Form.Item>\r\n              <Input.TextArea\r\n                rows={4}\r\n                value={commentText}\r\n                onChange={onChangeCommentText}\r\n              />\r\n            </Form.Item>\r\n            <Button type=\"primary\" htmlType=\"submit\" loading={isAddingComment}>\r\n              {\" \"}\r\n              입력!!{\" \"}\r\n            </Button>\r\n          </Form>\r\n          <List\r\n            header={`${post.Comments ? post.Comments.length : 0} 댓글`}\r\n            itemLayout=\"horizontal\"\r\n            dataSource={post.Comments || []}\r\n            renderItem={item => (\r\n              <li>\r\n                <Comment\r\n                  author={item.User.nickname}\r\n                  avatar={\r\n                    <Link\r\n                      href={{ pathname: \"/user\", query: { id: item.User.id } }}\r\n                      as={`/user/${item.User.id}`}\r\n                    >\r\n                      <a>\r\n                        <Avatar>{item.User.nickname[0]}</Avatar>\r\n                      </a>\r\n                    </Link>\r\n                  }\r\n                  content={item.content}\r\n                  datetime={item.createAt}\r\n                />\r\n              </li>\r\n            )}\r\n          />\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostCard;\r\n"]},"metadata":{},"sourceType":"module"}