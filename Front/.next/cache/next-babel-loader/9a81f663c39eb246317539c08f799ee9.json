{"ast":null,"code":"//call 함수 동기적으로 호출 fork 함수 비동기적으로 호출 put 액션 dispatch take 해당 액션이 dispatch 되면 제너레이터 next를 실행 하게함\n//사가 자체 적으로 next() 호출을 자동으로 해주는 제너레이터임\nimport { all, call, put, takeLatest, fork, take } from 'redux-saga/effects';\nimport { LOG_IN } from '../Reducer/user';\nimport { LOG_IN_SUCCESS, LOG_IN_FAIL } from '../Reducer/user';\nexport const HELLO_SAGA = \"HELLO_SAGA\";\n\nfunction loginAPI() {}\n\nfunction* login() {\n  try {\n    yield call(loginAPI);\n    yield put({\n      type: LOG_IN_SUCCESS\n    });\n  } catch (e) {\n    console.log(e);\n    yield put({\n      type: LOG_IN_FAIL\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeLatest(LOG_IN, login);\n}\n\nfunction* helloSaga() {\n  console.log(\"Before Saga\");\n  yield take(HELLO_SAGA);\n  console.log(\"Hello Saga\");\n}\n\nexport default function* userSaga() {\n  yield helloSaga();\n}","map":{"version":3,"sources":["C:/ReactNodeBird/Front/sagas/user.js"],"names":["all","call","put","takeLatest","fork","take","LOG_IN","LOG_IN_SUCCESS","LOG_IN_FAIL","HELLO_SAGA","loginAPI","login","type","e","console","log","watchLogin","helloSaga","userSaga"],"mappings":"AAAA;AACA;AACA,SAASA,GAAT,EAAcC,IAAd,EAAmBC,GAAnB,EAAuBC,UAAvB,EAAmCC,IAAnC,EAAwCC,IAAxC,QAAmD,oBAAnD;AACA,SAASC,MAAT,QAAuB,iBAAvB;AACA,SAASC,cAAT,EAAwBC,WAAxB,QAA2C,iBAA3C;AAEA,OAAO,MAAMC,UAAU,GAAG,YAAnB;;AAEP,SAASC,QAAT,GAAmB,CAElB;;AAED,UAAUC,KAAV,GAAiB;AACb,MAAG;AACC,UAAMV,IAAI,CAACS,QAAD,CAAV;AACA,UAAMR,GAAG,CAAC;AACNU,MAAAA,IAAI,EAACL;AADC,KAAD,CAAT;AAGH,GALD,CAKC,OAAMM,CAAN,EAAQ;AACLC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACA,UAAMX,GAAG,CAAC;AACNU,MAAAA,IAAI,EAACJ;AADC,KAAD,CAAT;AAGH;AACJ;;AAED,UAAUQ,UAAV,GAAsB;AAClB,QAAMb,UAAU,CAACG,MAAD,EAAQK,KAAR,CAAhB;AACH;;AAED,UAAUM,SAAV,GAAqB;AACjBH,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACA,QAAMV,IAAI,CAACI,UAAD,CAAV;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACH;;AAED,eAAe,UAAUG,QAAV,GAAoB;AAC/B,QAAMD,SAAS,EAAf;AACH","sourcesContent":["//call 함수 동기적으로 호출 fork 함수 비동기적으로 호출 put 액션 dispatch take 해당 액션이 dispatch 되면 제너레이터 next를 실행 하게함\r\n//사가 자체 적으로 next() 호출을 자동으로 해주는 제너레이터임\r\nimport { all ,call,put,takeLatest, fork,take} from 'redux-saga/effects';\r\nimport { LOG_IN } from '../Reducer/user';\r\nimport { LOG_IN_SUCCESS,LOG_IN_FAIL } from '../Reducer/user';\r\n\r\nexport const HELLO_SAGA = \"HELLO_SAGA\";\r\n\r\nfunction loginAPI(){\r\n\r\n}\r\n\r\nfunction* login(){\r\n    try{\r\n        yield call(loginAPI);\r\n        yield put({\r\n            type:LOG_IN_SUCCESS\r\n        })\r\n    }catch(e){\r\n        console.log(e)\r\n        yield put({\r\n            type:LOG_IN_FAIL\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLogin(){\r\n    yield takeLatest(LOG_IN,login)\r\n}\r\n\r\nfunction* helloSaga(){\r\n    console.log(\"Before Saga\")\r\n    yield take(HELLO_SAGA)\r\n    console.log(\"Hello Saga\");\r\n}\r\n\r\nexport default function* userSaga(){\r\n    yield helloSaga();\r\n}"]},"metadata":{},"sourceType":"module"}