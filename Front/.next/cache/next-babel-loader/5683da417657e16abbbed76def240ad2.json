{"ast":null,"code":"import { put, all, fork, takeLatest, delay, call } from 'redux-saga/effects';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_FAILURE } from '../Reducer/post';\nimport axios from 'axios';\n\nfunction addPostAPI(postData) {\n  return axios.post('http://localhost:3065/api/post', postData, {\n    withCredentials: true\n  });\n}\n\nfunction* appPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield delay(2000);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, appPost);\n}\n\nfunction loadMainPostsAPI() {\n  return axios.get('http://localhost:3065/api/posts');\n}\n\nfunction* loadMainPosts() {\n  try {\n    const result = yield call(loadMainPostsAPI);\n    yield delay(2000);\n    yield put({\n      type: LOAD_MAIN_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_MAIN_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchMainLoadPosts() {\n  yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n}\n\nfunction addCommentAPI() {}\n\nfunction* addComment(action) {\n  try {\n    yield delay(2000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: {\n        postId: action.data.postId\n      }\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment), fork(watchMainLoadPosts)]);\n}","map":{"version":3,"sources":["c:/ReactNodeBird/Front/sagas/post.js"],"names":["put","all","fork","takeLatest","delay","call","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_FAILURE","axios","addPostAPI","postData","post","withCredentials","appPost","action","result","data","type","e","error","watchAddPost","loadMainPostsAPI","get","loadMainPosts","watchMainLoadPosts","addCommentAPI","addComment","postId","watchAddComment","userSaga"],"mappings":"AAAA,SAAQA,GAAR,EAAaC,GAAb,EAAkBC,IAAlB,EAAuBC,UAAvB,EAAkCC,KAAlC,EAAwCC,IAAxC,QAAoD,oBAApD;AACA,SAASC,gBAAT,EAA2BC,gBAA3B,EAA6CC,gBAA7C,EAA+DC,mBAA/D,EAAmFC,mBAAnF,EAAuGC,mBAAvG,EAA4HC,uBAA5H,EAAqJC,uBAArJ,EAA8KC,uBAA9K,QAA6M,iBAA7M;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,UAAT,CAAqBC,QAArB,EAA+B;AAC7B,SAAOF,KAAK,CAACG,IAAN,CAAW,gCAAX,EAA4CD,QAA5C,EAAqD;AAC1DE,IAAAA,eAAe,EAAC;AAD0C,GAArD,CAAP;AAGD;;AAED,UAAUC,OAAV,CAAkBC,MAAlB,EAAyB;AACvB,MAAG;AACD,UAAMC,MAAM,GAAG,MAAMjB,IAAI,CAACW,UAAD,EAAYK,MAAM,CAACE,IAAnB,CAAzB;AACA,UAAMnB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMJ,GAAG,CAAC;AACRwB,MAAAA,IAAI,EAACjB,gBADG;AAERgB,MAAAA,IAAI,EAACD,MAAM,CAACC;AAFJ,KAAD,CAAT;AAID,GAPD,CAOC,OAAME,CAAN,EAAQ;AACP,UAAMzB,GAAG,CAAC;AACRwB,MAAAA,IAAI,EAAChB,gBADG;AAERkB,MAAAA,KAAK,EAACD;AAFE,KAAD,CAAT;AAID;AACF;;AAED,UAAUE,YAAV,GAAwB;AACtB,QAAMxB,UAAU,CAACG,gBAAD,EAAkBc,OAAlB,CAAhB;AACD;;AACD,SAASQ,gBAAT,GAA6B;AAC3B,SAAOb,KAAK,CAACc,GAAN,CAAU,iCAAV,CAAP;AAED;;AAED,UAAUC,aAAV,GAAyB;AACvB,MAAG;AACD,UAAMR,MAAM,GAAG,MAAMjB,IAAI,CAACuB,gBAAD,CAAzB;AACA,UAAMxB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMJ,GAAG,CAAC;AACRwB,MAAAA,IAAI,EAACZ,uBADG;AAERW,MAAAA,IAAI,EAAED,MAAM,CAACC;AAFL,KAAD,CAAT;AAID,GAPD,CAOC,OAAME,CAAN,EAAQ;AACP,UAAMzB,GAAG,CAAC;AACRwB,MAAAA,IAAI,EAACV,uBADG;AAERY,MAAAA,KAAK,EAACD;AAFE,KAAD,CAAT;AAID;AACF;;AAED,UAAUM,kBAAV,GAA8B;AAC5B,QAAM5B,UAAU,CAACU,uBAAD,EAAyBiB,aAAzB,CAAhB;AACD;;AAED,SAASE,aAAT,GAA0B,CAEzB;;AAED,UAAUC,UAAV,CAAqBZ,MAArB,EAA4B;AAC1B,MAAG;AACD,UAAMjB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMJ,GAAG,CAAC;AACRwB,MAAAA,IAAI,EAACb,mBADG;AAERY,MAAAA,IAAI,EAAC;AACHW,QAAAA,MAAM,EAAGb,MAAM,CAACE,IAAP,CAAYW;AADlB;AAFG,KAAD,CAAT;AAMD,GARD,CAQC,OAAMT,CAAN,EAAQ;AACP,UAAMzB,GAAG,CAAC;AACRwB,MAAAA,IAAI,EAACf,mBADG;AAERiB,MAAAA,KAAK,EAACD;AAFE,KAAD,CAAT;AAID;AACF;;AAED,UAAUU,eAAV,GAA2B;AACzB,QAAMhC,UAAU,CAACO,mBAAD,EAAqBuB,UAArB,CAAhB;AACD;;AAED,eAAe,UAAUG,QAAV,GAAoB;AAC/B,QAAMnC,GAAG,CAAC,CACRC,IAAI,CAACyB,YAAD,CADI,EAERzB,IAAI,CAACiC,eAAD,CAFI,EAGRjC,IAAI,CAAC6B,kBAAD,CAHI,CAAD,CAAT;AAKH","sourcesContent":["import {put, all, fork,takeLatest,delay,call } from 'redux-saga/effects';\r\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE ,ADD_COMMENT_FAILURE,ADD_COMMENT_REQUEST,ADD_COMMENT_SUCCESS, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_FAILURE } from '../Reducer/post';\r\nimport axios from 'axios';\r\n\r\nfunction addPostAPI (postData) {\r\n  return axios.post('http://localhost:3065/api/post',postData,{\r\n    withCredentials:true,\r\n  })\r\n}\r\n\r\nfunction* appPost(action){\r\n  try{\r\n    const result = yield call(addPostAPI,action.data)\r\n    yield delay(2000);\r\n    yield put({\r\n      type:ADD_POST_SUCCESS,\r\n      data:result.data,\r\n    })\r\n  }catch(e){\r\n    yield put({\r\n      type:ADD_POST_FAILURE,\r\n      error:e\r\n    })\r\n  }\r\n}\r\n\r\nfunction* watchAddPost(){\r\n  yield takeLatest(ADD_POST_REQUEST,appPost);\r\n}\r\nfunction loadMainPostsAPI () {\r\n  return axios.get('http://localhost:3065/api/posts')\r\n\r\n}\r\n\r\nfunction* loadMainPosts(){\r\n  try{\r\n    const result = yield call(loadMainPostsAPI);\r\n    yield delay(2000);\r\n    yield put({\r\n      type:LOAD_MAIN_POSTS_SUCCESS,\r\n      data: result.data\r\n    })\r\n  }catch(e){\r\n    yield put({\r\n      type:LOAD_MAIN_POSTS_FAILURE,\r\n      error:e\r\n    })\r\n  }\r\n}\r\n\r\nfunction* watchMainLoadPosts(){\r\n  yield takeLatest(LOAD_MAIN_POSTS_REQUEST,loadMainPosts);\r\n}\r\n\r\nfunction addCommentAPI () {\r\n\r\n}\r\n\r\nfunction* addComment(action){\r\n  try{\r\n    yield delay(2000);\r\n    yield put({\r\n      type:ADD_COMMENT_SUCCESS,\r\n      data:{\r\n        postId : action.data.postId\r\n      }\r\n    })\r\n  }catch(e){\r\n    yield put({\r\n      type:ADD_COMMENT_FAILURE,\r\n      error:e\r\n    })\r\n  }\r\n}\r\n\r\nfunction* watchAddComment(){\r\n  yield takeLatest(ADD_COMMENT_REQUEST,addComment);\r\n}\r\n\r\nexport default function* userSaga(){\r\n    yield all([\r\n      fork(watchAddPost),\r\n      fork(watchAddComment),\r\n      fork(watchMainLoadPosts),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}