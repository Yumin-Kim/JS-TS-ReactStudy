{"ast":null,"code":"//call 함수 동기적으로 호출 fork 함수 비동기적으로 호출 put 액션 dispatch\n//사가 자체 적으로 next() 호출을 자동으로 해주는 제너레이터임\nimport { all, call, put, takeLatest, fork } from 'redux-saga/effects';\nimport { LOG_IN } from '../Reducer/user';\nimport { LOG_IN_SUCCESS, LOG_IN_FAIL } from '../Reducer/user';\n\nfunction loginAPI() {}\n\nfunction* login() {\n  try {\n    yield call(loginAPI);\n    yield put({\n      type: LOG_IN_SUCCESS\n    });\n  } catch (e) {\n    console.log(e);\n    yield put({\n      type: LOG_IN_FAIL\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeLatest(LOG_IN, login);\n}\n\nfunction* helloSaga() {\n  console.log(\"Hello Saga\");\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), helloSaga()]);\n}","map":{"version":3,"sources":["C:/ReactNodeBird/Front/sagas/user.js"],"names":["all","call","put","takeLatest","fork","LOG_IN","LOG_IN_SUCCESS","LOG_IN_FAIL","loginAPI","login","type","e","console","log","watchLogin","helloSaga","userSaga"],"mappings":"AAAA;AACA;AACA,SAASA,GAAT,EAAcC,IAAd,EAAmBC,GAAnB,EAAuBC,UAAvB,EAAmCC,IAAnC,QAA+C,oBAA/C;AACA,SAASC,MAAT,QAAuB,iBAAvB;AACA,SAASC,cAAT,EAAwBC,WAAxB,QAA2C,iBAA3C;;AACA,SAASC,QAAT,GAAmB,CAElB;;AAED,UAAUC,KAAV,GAAiB;AACb,MAAG;AACC,UAAMR,IAAI,CAACO,QAAD,CAAV;AACA,UAAMN,GAAG,CAAC;AACNQ,MAAAA,IAAI,EAACJ;AADC,KAAD,CAAT;AAGH,GALD,CAKC,OAAMK,CAAN,EAAQ;AACLC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACA,UAAMT,GAAG,CAAC;AACNQ,MAAAA,IAAI,EAACH;AADC,KAAD,CAAT;AAGH;AACJ;;AAED,UAAUO,UAAV,GAAsB;AAClB,QAAMX,UAAU,CAACE,MAAD,EAAQI,KAAR,CAAhB;AACH;;AAED,UAAUM,SAAV,GAAqB;AACjBH,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACH;;AAED,eAAe,UAAUG,QAAV,GAAoB;AAC/B,QAAMhB,GAAG,CAAC,CACNI,IAAI,CAACU,UAAD,CADE,EAENC,SAAS,EAFH,CAAD,CAAT;AAIH","sourcesContent":["//call 함수 동기적으로 호출 fork 함수 비동기적으로 호출 put 액션 dispatch\r\n//사가 자체 적으로 next() 호출을 자동으로 해주는 제너레이터임\r\nimport { all ,call,put,takeLatest, fork } from 'redux-saga/effects';\r\nimport { LOG_IN } from '../Reducer/user';\r\nimport { LOG_IN_SUCCESS,LOG_IN_FAIL } from '../Reducer/user';\r\nfunction loginAPI(){\r\n\r\n}\r\n\r\nfunction* login(){\r\n    try{\r\n        yield call(loginAPI);\r\n        yield put({\r\n            type:LOG_IN_SUCCESS\r\n        })\r\n    }catch(e){\r\n        console.log(e)\r\n        yield put({\r\n            type:LOG_IN_FAIL\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLogin(){\r\n    yield takeLatest(LOG_IN,login)\r\n}\r\n\r\nfunction* helloSaga(){\r\n    console.log(\"Hello Saga\");\r\n}\r\n\r\nexport default function* userSaga(){\r\n    yield all([\r\n        fork(watchLogin),\r\n        helloSaga(),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}