{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport Link from 'next/link';\nimport { Card, Icon, Button, Avatar, Divider, Form, Input, List, Comment } from \"antd\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { ADD_POST_REQUEST, ADD_COMMENT_REQUEST } from \"../Reducer/post\";\n\nconst PostCard = ({\n  post\n}) => {\n  const {\n    0: commentFormOpened,\n    1: setCommentOpened\n  } = useState(false);\n  const {\n    0: commentText,\n    1: setCommentText\n  } = useState(\"\");\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    commentAdded,\n    isAddingComment\n  } = useSelector(state => state.post);\n  const dispatch = useDispatch();\n  const onToggleComment = useCallback(() => {\n    setCommentOpened(prev => !prev);\n  }, []);\n  const onSubmitComment = useCallback(e => {\n    e.preventDefault();\n    console.log(me);\n\n    if (!me) {\n      return alert('로그인 필요합니다');\n    }\n\n    console.log(post);\n    dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id\n      }\n    });\n  }, [me && me.id]);\n  const onChangeCommentText = useCallback(e => {\n    setCommentText(e.target.value);\n  }, []);\n  useEffect(() => {\n    setCommentText('');\n  }, [commentAdded === true]);\n  console.log(post.createdAt);\n  return __jsx(\"div\", null, __jsx(Card, {\n    key: +post.createdAt,\n    cover: post.img && __jsx(\"img\", {\n      alt: \"example\",\n      src: post.img\n    }),\n    actions: [__jsx(Icon, {\n      type: \"retweet\",\n      key: \"retweet\"\n    }), __jsx(Icon, {\n      type: \"heart\",\n      key: \"heart\"\n    }), __jsx(Icon, {\n      type: \"message\",\n      key: \"message\",\n      onClick: onToggleComment\n    }), __jsx(Icon, {\n      type: \"ellipsis\",\n      key: \"ellipsis\"\n    })],\n    extra: __jsx(Button, null, \"\\uD314\\uB85C\\uC6B0\")\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Avatar, null, post.User.nickname[0]),\n    title: post.User.nickname,\n    description: __jsx(\"div\", null, post.content.split(/(#[^\\s]+)/g).map(v => {\n      if (v.match(/(#[^\\s]+)/g)) {\n        return __jsx(Link, {\n          href: \"/hashtag\",\n          key: v\n        }, __jsx(\"a\", null, v));\n      }\n\n      return v;\n    }))\n  })), commentFormOpened && __jsx(React.Fragment, null, __jsx(Form, {\n    onSubmit: onSubmitComment\n  }, __jsx(Form.Item, null, __jsx(Input.TextArea, {\n    rows: 4,\n    value: commentText,\n    onChange: onChangeCommentText\n  })), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: isAddingComment\n  }, \" \\uC785\\uB825!! \")), __jsx(List, {\n    header: `${post.Comments ? post.Comments.length : 0} 댓글`,\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments || [],\n    renderItem: item => __jsx(\"li\", null, __jsx(Comment, {\n      author: item.User.nickname,\n      avatar: __jsx(Avatar, null, item.User.nickname[0]),\n      content: item.content,\n      datetime: item.createAt\n    }))\n  })));\n};\n\nexport default PostCard;","map":{"version":3,"sources":["C:/ReactNodeBird/Front/components/PostCard.js"],"names":["React","useState","useCallback","useEffect","Link","Card","Icon","Button","Avatar","Divider","Form","Input","List","Comment","useSelector","useDispatch","ADD_POST_REQUEST","ADD_COMMENT_REQUEST","PostCard","post","commentFormOpened","setCommentOpened","commentText","setCommentText","me","state","user","commentAdded","isAddingComment","dispatch","onToggleComment","prev","onSubmitComment","e","preventDefault","console","log","alert","type","data","postId","id","onChangeCommentText","target","value","createdAt","img","User","nickname","content","split","map","v","match","Comments","length","item","createAt"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from \"react\";\r\nimport Link from 'next/link';\r\nimport { Card, Icon, Button, Avatar, Divider, Form, Input, List,Comment } from \"antd\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { ADD_POST_REQUEST, ADD_COMMENT_REQUEST } from \"../Reducer/post\";\r\n\r\nconst PostCard = ({ post }) => {\r\n  const [commentFormOpened, setCommentOpened] = useState(false);\r\n  const [commentText, setCommentText] = useState(\"\");\r\n  const { me } = useSelector(state => state.user);\r\n  const { commentAdded ,isAddingComment } = useSelector(state => state.post);\r\n  const dispatch = useDispatch();\r\n\r\n  const onToggleComment = useCallback(() => {\r\n    setCommentOpened(prev => !prev);\r\n  }, []);\r\n\r\n  const onSubmitComment = useCallback((e) =>{\r\n      e.preventDefault();\r\n      console.log(me)\r\n      if(!me){\r\n          return alert('로그인 필요합니다');\r\n      }\r\n      console.log(post)\r\n      dispatch({\r\n          type:ADD_COMMENT_REQUEST,\r\n          data: {\r\n              postId:post.id\r\n          }\r\n      })\r\n  },[me && me.id])\r\n\r\n  const onChangeCommentText = useCallback((e) =>{\r\n      setCommentText(e.target.value)\r\n  },[]);\r\n\r\n  useEffect(()=>{\r\n    setCommentText('');\r\n  },[commentAdded === true])\r\n  console.log(post.createdAt)\r\n  return (\r\n    <div>\r\n      <Card\r\n        key={+post.createdAt}\r\n        cover={post.img && <img alt=\"example\" src={post.img} />}\r\n        actions={[\r\n          <Icon type=\"retweet\" key=\"retweet\" />,\r\n          <Icon type=\"heart\" key=\"heart\" />,\r\n          <Icon type=\"message\" key=\"message\" onClick={onToggleComment} />,\r\n          <Icon type=\"ellipsis\" key=\"ellipsis\" />\r\n        ]}\r\n        extra={<Button>팔로우</Button>}\r\n      >\r\n        <Card.Meta\r\n          avatar={<Avatar>{post.User.nickname[0]}</Avatar>}\r\n          title={post.User.nickname}\r\n      description={\r\n      <div>\r\n        {post.content.split(/(#[^\\s]+)/g).map( v=>{\r\n          if(v.match(/(#[^\\s]+)/g)){\r\n            return(\r\n            <Link href=\"/hashtag\" key={v} ><a>{v}</a></Link>\r\n            )\r\n          }\r\n          return v;\r\n        } )}\r\n        </div>}\r\n        />\r\n      </Card>\r\n      {commentFormOpened && \r\n      <>\r\n        <Form onSubmit = {onSubmitComment} >\r\n            <Form.Item>\r\n                <Input.TextArea rows={4} value={commentText} onChange={onChangeCommentText} />\r\n            </Form.Item>\r\n            <Button type=\"primary\" htmlType=\"submit\" loading={isAddingComment} > 입력!! </Button>\r\n        </Form>\r\n        <List \r\n            header ={`${post.Comments ? post.Comments.length : 0 } 댓글`}\r\n            itemLayout=\"horizontal\"\r\n            dataSource={post.Comments || [] }\r\n            renderItem={item=>(<li>\r\n                <Comment\r\n                    author = {item.User.nickname}\r\n                    avatar = {<Avatar>{item.User.nickname[0]}</Avatar>}\r\n                    content = {item.content}\r\n                    datetime = {item.createAt}\r\n                />\r\n            </li>)}\r\n         />\r\n      </>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostCard;\r\n"]},"metadata":{},"sourceType":"module"}