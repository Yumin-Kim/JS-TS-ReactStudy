{"ast":null,"code":"import { put, all, fork, takeLatest, delay, call } from 'redux-saga/effects';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_FAILURE, LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_COMMENTS_REQUEST, LOAD_COMMENTS_SUCCESS, LOAD_COMMENTS_FAILURE, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_REQUEST, UNLIKE_POST_FAILURE, UNLIKE_POST_SUCCESS, UNLIKE_POST_REQUEST, LIKE_POST_REQUEST, LIKE_POST_FAILURE, LIKE_POST_SUCCESS, RETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE } from '../Reducer/post';\nimport axios from 'axios';\n\nfunction addPostAPI(postData) {\n  return axios.post('http://localhost:3065/api/post', postData, {\n    withCredentials: true\n  });\n}\n\nfunction* appPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, appPost);\n}\n\nfunction loadMainPostsAPI() {\n  return axios.get('http://localhost:3065/api/posts');\n}\n\nfunction* loadMainPosts() {\n  try {\n    const result = yield call(loadMainPostsAPI);\n    yield put({\n      type: LOAD_MAIN_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_MAIN_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchMainLoadPosts() {\n  yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n}\n\nfunction loadUserPostsAPI(id) {\n  return axios.get(`http://localhost:3065/api/user/${id}/posts`);\n}\n\nfunction* loadUserPosts(action) {\n  try {\n    const result = yield call(loadUserPostsAPI, action.data);\n    yield put({\n      type: LOAD_USER_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_USER_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadUserPosts() {\n  yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n}\n\nfunction loadHashtagPostsAPI(tag) {\n  return axios.get(`http://localhost:3065/api/hashtag/${encodeURIComponent(tag)}`);\n}\n\nfunction* loadHashtagPosts(action) {\n  try {\n    const result = yield call(loadHashtagPostsAPI, action.data);\n    yield put({\n      type: LOAD_HASHTAG_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_HASHTAG_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadHashtagPosts() {\n  yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`http://localhost:3065/api/posts/${data.postId}/comment`, {\n    content: data.content\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: {\n        postId: action.data.postId,\n        comment: result.data\n      }\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction loadCommentsAPI(postId) {\n  return axios.get(`http://localhost:3065/api/posts/${postId}/comments`);\n}\n\nfunction* loadComments(action) {\n  try {\n    const result = yield call(loadCommentsAPI, action.data);\n    yield put({\n      type: LOAD_COMMENTS_SUCCESS,\n      data: {\n        postId: action.data,\n        comments: result.data\n      }\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOAD_COMMENTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadComments() {\n  yield takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\n}\n\nfunction uploadImagesAPI(formData) {\n  return axios.post(`http://localhost:3065/api/post/images`, formData, {\n    withCredentials: true\n  });\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction likePostAPI(postId) {\n  return axios.post(`http://localhost:3065/api/post/${postId}/like`, {}, {\n    withCredentials: true\n  });\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: {\n        postId: action.data,\n        userId: result.data.userId\n      }\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction unlikePostAPI(postId) {\n  return axios.delete(`http://localhost:3065/api/post/${postId}/unlike`, {\n    withCredentials: true\n  });\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: {\n        postId: action.data,\n        userId: result.data.userId\n      }\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction retweetAPI(postId) {\n  return axios.post(`http://localhost:3065/api/post/${postId}/retweet`, {}, {\n    withCredentials: true\n  });\n}\n\nfunction* retweet(action) {\n  try {\n    const result = yield call(retweetAPI, action.data);\n    yield put({\n      type: RETWEET_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: RETWEET_FAILURE,\n      error: e\n    });\n    alert(e.response && e.response.data);\n  }\n}\n\nfunction* watchRetweet() {\n  yield takeLatest(RETWEET_REQUEST, retweet);\n}\n\nfunction removePostAPI(postId) {\n  return axios.delete(`http://localhost:3065/api/post/${postId}`, {}, {\n    withCredentials: true\n  });\n}\n\nfunction* removePost(action) {\n  try {\n    const result = yield call(removePostAPI, action.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(RETWEET_REQUEST, removePost);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment), fork(watchLoadComments), fork(watchMainLoadPosts), fork(watchLoadHashtagPosts), fork(watchLoadUserPosts), fork(watchUploadImages), fork(watchLikePost), fork(watchUnlikePost), fork(watchRetweet), fork(watchRemovePost)]);\n}","map":{"version":3,"sources":["C:/ReactNodeBird/Front/sagas/post.js"],"names":["put","all","fork","takeLatest","delay","call","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_COMMENTS_REQUEST","LOAD_COMMENTS_SUCCESS","LOAD_COMMENTS_FAILURE","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","UPLOAD_IMAGES_REQUEST","UNLIKE_POST_FAILURE","UNLIKE_POST_SUCCESS","UNLIKE_POST_REQUEST","LIKE_POST_REQUEST","LIKE_POST_FAILURE","LIKE_POST_SUCCESS","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","axios","addPostAPI","postData","post","withCredentials","appPost","action","result","data","type","e","error","watchAddPost","loadMainPostsAPI","get","loadMainPosts","watchMainLoadPosts","loadUserPostsAPI","id","loadUserPosts","watchLoadUserPosts","loadHashtagPostsAPI","tag","encodeURIComponent","loadHashtagPosts","watchLoadHashtagPosts","addCommentAPI","postId","content","addComment","comment","console","watchAddComment","loadCommentsAPI","loadComments","comments","watchLoadComments","uploadImagesAPI","formData","uploadImages","watchUploadImages","likePostAPI","likePost","userId","watchLikePost","unlikePostAPI","delete","unlikePost","watchUnlikePost","retweetAPI","retweet","alert","response","watchRetweet","removePostAPI","removePost","watchRemovePost","userSaga"],"mappings":"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","sourcesContent":["import {put, all, fork,takeLatest,delay,call } from 'redux-saga/effects';\r\nimport { \r\n  ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE ,\r\n  ADD_COMMENT_FAILURE,ADD_COMMENT_REQUEST,ADD_COMMENT_SUCCESS, \r\n  LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_FAILURE, \r\n  LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, \r\n  LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_COMMENTS_REQUEST, LOAD_COMMENTS_SUCCESS, LOAD_COMMENTS_FAILURE, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_REQUEST, \r\n  UNLIKE_POST_FAILURE,UNLIKE_POST_SUCCESS,UNLIKE_POST_REQUEST,LIKE_POST_REQUEST,LIKE_POST_FAILURE,LIKE_POST_SUCCESS, RETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE,\r\n} from '../Reducer/post';\r\nimport axios from 'axios';\r\n\r\nfunction addPostAPI (postData) {\r\n  return axios.post('http://localhost:3065/api/post',postData,{\r\n    withCredentials:true,\r\n  })\r\n}\r\n\r\nfunction* appPost(action){\r\n  try{\r\n    const result = yield call(addPostAPI,action.data)\r\n    yield put({\r\n      type:ADD_POST_SUCCESS,\r\n      data:result.data,\r\n    })\r\n  }catch(e){\r\n    yield put({\r\n      type:ADD_POST_FAILURE,\r\n      error:e\r\n    })\r\n  }\r\n}\r\n\r\nfunction* watchAddPost(){\r\n  yield takeLatest(ADD_POST_REQUEST,appPost);\r\n}\r\nfunction loadMainPostsAPI () {\r\n  return axios.get('http://localhost:3065/api/posts')\r\n\r\n}\r\n\r\nfunction* loadMainPosts(){\r\n  try{\r\n    const result = yield call(loadMainPostsAPI);\r\n    yield put({\r\n      type:LOAD_MAIN_POSTS_SUCCESS,\r\n      data: result.data\r\n    })\r\n  }catch(e){\r\n    yield put({\r\n      type:LOAD_MAIN_POSTS_FAILURE,\r\n      error:e\r\n    })\r\n  }\r\n}\r\n\r\nfunction* watchMainLoadPosts(){\r\n  yield takeLatest(LOAD_MAIN_POSTS_REQUEST,loadMainPosts);\r\n}\r\nfunction loadUserPostsAPI (id) {\r\n  return axios.get(`http://localhost:3065/api/user/${id}/posts`)\r\n\r\n}\r\n\r\nfunction* loadUserPosts(action){\r\n  try{\r\n    const result = yield call(loadUserPostsAPI,action.data);\r\n    yield put({\r\n      type:LOAD_USER_POSTS_SUCCESS,\r\n      data: result.data\r\n    })\r\n  }catch(e){\r\n    yield put({\r\n      type:LOAD_USER_POSTS_FAILURE,\r\n      error:e\r\n    })\r\n  }\r\n}\r\n\r\nfunction* watchLoadUserPosts(){\r\n  yield takeLatest(LOAD_USER_POSTS_REQUEST,loadUserPosts);\r\n}\r\nfunction loadHashtagPostsAPI (tag) {\r\n  return axios.get(`http://localhost:3065/api/hashtag/${encodeURIComponent(tag)}`)\r\n\r\n}\r\n\r\nfunction* loadHashtagPosts(action){\r\n  try{\r\n    const result = yield call(loadHashtagPostsAPI,action.data);\r\n    yield put({\r\n      type:LOAD_HASHTAG_POSTS_SUCCESS,\r\n      data: result.data\r\n    })\r\n  }catch(e){\r\n    yield put({\r\n      type:LOAD_HASHTAG_POSTS_FAILURE,\r\n      error:e\r\n    })\r\n  }\r\n}\r\n\r\nfunction* watchLoadHashtagPosts(){\r\n  yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST,loadHashtagPosts);\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n  return axios.post(`http://localhost:3065/api/posts/${data.postId}/comment`, { content: data.content }, {\r\n    withCredentials: true,\r\n  });\r\n}\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    const result = yield call(addCommentAPI, action.data);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: {\r\n        postId: action.data.postId,\r\n        comment: result.data,\r\n      },\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nfunction loadCommentsAPI(postId) {\r\n  return axios.get(`http://localhost:3065/api/posts/${postId}/comments`);\r\n}\r\n\r\nfunction* loadComments(action) {\r\n  try {\r\n    const result = yield call(loadCommentsAPI, action.data);\r\n    yield put({\r\n      type: LOAD_COMMENTS_SUCCESS,\r\n      data: {\r\n        postId: action.data,\r\n        comments: result.data,\r\n      },\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: LOAD_COMMENTS_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadComments() {\r\n  yield takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\r\n}\r\nfunction uploadImagesAPI(formData) {\r\n  return axios.post(`http://localhost:3065/api/post/images`,formData,{\r\n    withCredentials:true\r\n  });\r\n}\r\n\r\nfunction* uploadImages(action) {\r\n  try {\r\n    const result = yield call(uploadImagesAPI, action.data);\r\n    yield put({\r\n      type: UPLOAD_IMAGES_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: UPLOAD_IMAGES_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchUploadImages() {\r\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\r\n}\r\n\r\nfunction likePostAPI(postId) {\r\n  return axios.post(`http://localhost:3065/api/post/${postId}/like`,{},{\r\n    withCredentials:true\r\n  });\r\n}\r\n\r\nfunction* likePost(action) {\r\n  try {\r\n    const result = yield call(likePostAPI, action.data);\r\n    yield put({\r\n      type: LIKE_POST_SUCCESS,\r\n      data: {\r\n        postId:action.data,\r\n        userId:result.data.userId\r\n      }\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: LIKE_POST_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLikePost() {\r\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\r\n}\r\nfunction unlikePostAPI(postId) {\r\n  return axios.delete(`http://localhost:3065/api/post/${postId}/unlike`,{\r\n    withCredentials:true\r\n  });\r\n}\r\n\r\nfunction* unlikePost(action) {\r\n  try {\r\n    const result = yield call(unlikePostAPI, action.data);\r\n    yield put({\r\n      type: UNLIKE_POST_SUCCESS,\r\n      data: {\r\n        postId:action.data,\r\n        userId:result.data.userId\r\n      }\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: UNLIKE_POST_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchUnlikePost() {\r\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\r\n}\r\nfunction retweetAPI(postId) {\r\n  return axios.post(`http://localhost:3065/api/post/${postId}/retweet`,{},{\r\n    withCredentials:true\r\n  });\r\n}\r\n\r\nfunction* retweet(action) {\r\n  try {\r\n    const result = yield call(retweetAPI, action.data);\r\n    yield put({\r\n      type: RETWEET_SUCCESS,\r\n      data:result.data,\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: RETWEET_FAILURE,\r\n      error: e,\r\n    });\r\n    alert(e.response && e.response.data);\r\n  }\r\n}\r\n\r\nfunction* watchRetweet() {\r\n  yield takeLatest(RETWEET_REQUEST, retweet);\r\n}\r\nfunction removePostAPI(postId) {\r\n  return axios.delete(`http://localhost:3065/api/post/${postId}`,{},{\r\n    withCredentials:true\r\n  });\r\n}\r\n\r\nfunction* removePost(action) {\r\n  try {\r\n    const result = yield call(removePostAPI, action.data);\r\n    yield put({\r\n      type: REMOVE_POST_SUCCESS,\r\n      data:result.data,\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: REMOVE_POST_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n  yield takeLatest(RETWEET_REQUEST, removePost);\r\n}\r\n\r\nexport default function* userSaga(){\r\n    yield all([\r\n      fork(watchAddPost),\r\n      fork(watchAddComment),\r\n      fork(watchLoadComments),\r\n      fork(watchMainLoadPosts),\r\n      fork(watchLoadHashtagPosts),\r\n      fork(watchLoadUserPosts),\r\n      fork(watchUploadImages),\r\n      fork(watchLikePost),\r\n      fork(watchUnlikePost),\r\n      fork(watchRetweet),\r\n      fork(watchRemovePost),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}