{"ast":null,"code":"//call 함수 동기적으로 호출 fork 함수 비동기적으로 호출 put 액션 dispatch take 해당 액션이 dispatch 되면 제너레이터 next를 실행 하게함\n//all 여러 이펙트를 동시에 실항 할 수 있게 함\n//사가 자체 적으로 next() 호출을 자동으로 해주는 제너레이터임\n//제너레이터는 한번 사용하면 다시 사용 할 수 없기 때문에 무한 루프를 사용하여 반복 실행이 될 수 있도록 한다\n// function* watchLogin(){\n//     // while(true){\n//     //     console.log(\"대기\");\n//     //     yield take(LOG_IN)\n//     //     yield delay(4000);\n//     //     yield put({\n//     //         type:LOG_IN_SUCCESS\n//     //     })\n//     //     console.log(\"LOG_IN_SUCCESS\");\n//     // }while saga에서 문법으로 지원 takeEvery\n//     //사용자의 시도가 유효할때 takeEvery\n//     //유효 하지 않고 한번만 발생 하길 원할때 takeLatest\n//     // yield takeEvery(LOG_IN,function* (){\n//     //     yield put({\n//     //         type:LOG_IN_SUCCESS\n//     //     })\n//     //     console.log(1);\n//     //     console.log(12);\n//     //     console.log(13);\n//     //     console.log(14);\n//     // })\n// }\nimport { all, call, put, takeLatest, takeEvery, fork, take, delay } from 'redux-saga/effects';\nimport { LOG_IN_REQUEST, SIGN_UP_REQUEST, LOG_IN_FAILURE, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, LOAD_USER_SUCCESS, LOAD_USER_FAILURE, LOAD_USER_REQUEST } from '../Reducer/user';\nimport { LOG_IN_SUCCESS } from '../Reducer/user';\nimport axios from 'axios';\n\nfunction loginAPI(loginData) {\n  return axios.post('http://localhost:3065/api/user/login', loginData, {\n    withCredentials: true //서로 쿠키 교환 axios에서 지원\n\n  });\n}\n\nfunction* login(action) {\n  try {\n    const result = yield call(loginAPI, action.data);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.log(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeEvery(LOG_IN_REQUEST, login);\n}\n\nfunction signUpAPI(signUpData) {\n  return axios.post('http://localhost:3065/api/user', signUpData);\n}\n\nfunction* signUp(action) {\n  try {\n    yield call(signUpAPI, action.data);\n    yield put({\n      // put은 dispatch 동일\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.log(action);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchSignUp() {\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\nfunction logoutAPI() {\n  return axios.post('http://localhost:3065/api/user/logout', {}, {\n    withCredentials: true\n  });\n}\n\nfunction* logout(action) {\n  try {\n    yield call(logoutAPI);\n    yield put({\n      // put은 dispatch 동일\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.log(action);\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLogout() {\n  yield takeEvery(LOG_OUT_REQUEST, logout);\n}\n\nfunction loadUserAPI(userId) {\n  console.log(userId);\n  return axios.get(userId ? `http://localhost:3065/api/user/${userId}` : 'http://localhost:3065/api/user', {\n    withCredentials: true\n  });\n}\n\nfunction* loadUser(action) {\n  try {\n    console.log(action);\n    const result = yield call(loadUserAPI, action.data);\n    yield put({\n      // put은 dispatch 동일\n      type: LOAD_USER_SUCCESS,\n      data: result.data,\n      me: !action.data\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.log(e);\n    yield put({\n      type: LOAD_USER_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadUser() {\n  yield takeEvery(LOAD_USER_REQUEST, loadUser);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchLogout), fork(watchLoadUser), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["C:/ReactNodeBird/Front/sagas/user.js"],"names":["all","call","put","takeLatest","takeEvery","fork","take","delay","LOG_IN_REQUEST","SIGN_UP_REQUEST","LOG_IN_FAILURE","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","LOAD_USER_SUCCESS","LOAD_USER_FAILURE","LOAD_USER_REQUEST","LOG_IN_SUCCESS","axios","loginAPI","loginData","post","withCredentials","login","action","result","data","type","e","console","log","watchLogin","signUpAPI","signUpData","signUp","error","watchSignUp","logoutAPI","logout","watchLogout","loadUserAPI","userId","get","loadUser","me","watchLoadUser","userSaga"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACJ,SAASA,GAAT,EAAcC,IAAd,EAAmBC,GAAnB,EAAuBC,UAAvB,EAAkCC,SAAlC,EAA6CC,IAA7C,EAAkDC,IAAlD,EAAuDC,KAAvD,QAAmE,oBAAnE;AACA,SAASC,cAAT,EAAyBC,eAAzB,EAA0CC,cAA1C,EAA0DC,eAA1D,EAA2EC,eAA3E,EAA4FC,eAA5F,EAA6GC,eAA7G,EAA8HC,eAA9H,EAA+IC,iBAA/I,EAAkKC,iBAAlK,EAAqLC,iBAArL,QAA8M,iBAA9M;AACA,SAASC,cAAT,QAA+B,iBAA/B;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,QAAT,CAAkBC,SAAlB,EAA4B;AACxB,SAAOF,KAAK,CAACG,IAAN,CAAW,sCAAX,EAAkDD,SAAlD,EAA4D;AAC/DE,IAAAA,eAAe,EAAC,IAD+C,CAC1C;;AAD0C,GAA5D,CAAP;AAGH;;AAED,UAAUC,KAAV,CAAgBC,MAAhB,EAAuB;AACnB,MAAG;AACC,UAAMC,MAAM,GAAG,MAAM1B,IAAI,CAACoB,QAAD,EAAUK,MAAM,CAACE,IAAjB,CAAzB;AACA,UAAM1B,GAAG,CAAC;AACN2B,MAAAA,IAAI,EAACV,cADC;AAENS,MAAAA,IAAI,EAACD,MAAM,CAACC;AAFN,KAAD,CAAT;AAIH,GAND,CAMC,OAAME,CAAN,EAAQ;AACLC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACA,UAAM5B,GAAG,CAAC;AACN2B,MAAAA,IAAI,EAACnB;AADC,KAAD,CAAT;AAGH;AACJ;;AAED,UAAUuB,UAAV,GAAuB;AACnB,QAAM7B,SAAS,CAACI,cAAD,EAAgBiB,KAAhB,CAAf;AACH;;AAED,SAASS,SAAT,CAAmBC,UAAnB,EAA8B;AAC1B,SAAOf,KAAK,CAACG,IAAN,CAAW,gCAAX,EAA4CY,UAA5C,CAAP;AACH;;AAED,UAAUC,MAAV,CAAiBV,MAAjB,EAAyB;AACrB,MAAI;AACF,UAAMzB,IAAI,CAACiC,SAAD,EAAWR,MAAM,CAACE,IAAlB,CAAV;AACA,UAAM1B,GAAG,CAAC;AAAE;AACV2B,MAAAA,IAAI,EAAElB;AADE,KAAD,CAAT;AAGD,GALD,CAKE,OAAOmB,CAAP,EAAU;AAAE;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYN,MAAZ;AACA,UAAMxB,GAAG,CAAC;AACR2B,MAAAA,IAAI,EAAEjB,eADE;AAERyB,MAAAA,KAAK,EAAEP;AAFC,KAAD,CAAT;AAID;AACF;;AAGH,UAAUQ,WAAV,GAAuB;AACnB,QAAMlC,SAAS,CAACK,eAAD,EAAiB2B,MAAjB,CAAf;AACH;;AACD,SAASG,SAAT,GAAoB;AAChB,SAAOnB,KAAK,CAACG,IAAN,CAAW,uCAAX,EAAmD,EAAnD,EAAsD;AACzDC,IAAAA,eAAe,EAAC;AADyC,GAAtD,CAAP;AAGH;;AAED,UAAUgB,MAAV,CAAiBd,MAAjB,EAAyB;AACrB,MAAI;AACF,UAAMzB,IAAI,CAACsC,SAAD,CAAV;AACA,UAAMrC,GAAG,CAAC;AAAE;AACV2B,MAAAA,IAAI,EAAEf;AADE,KAAD,CAAT;AAGD,GALD,CAKE,OAAOgB,CAAP,EAAU;AAAE;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYN,MAAZ;AACA,UAAMxB,GAAG,CAAC;AACR2B,MAAAA,IAAI,EAAEd,eADE;AAERsB,MAAAA,KAAK,EAAEP;AAFC,KAAD,CAAT;AAID;AACF;;AAGH,UAAUW,WAAV,GAAuB;AACnB,QAAMrC,SAAS,CAACS,eAAD,EAAiB2B,MAAjB,CAAf;AACH;;AACD,SAASE,WAAT,CAAqBC,MAArB,EAA4B;AAC1BZ,EAAAA,OAAO,CAACC,GAAR,CAAYW,MAAZ;AACE,SAAOvB,KAAK,CAACwB,GAAN,CAAUD,MAAM,GAAG,kCAAiCA,MAAO,EAA3C,GAA+C,gCAA/D,EAAgG;AACnGnB,IAAAA,eAAe,EAAC;AADmF,GAAhG,CAAP;AAGH;;AAED,UAAUqB,QAAV,CAAmBnB,MAAnB,EAA2B;AACvB,MAAI;AACFK,IAAAA,OAAO,CAACC,GAAR,CAAYN,MAAZ;AACA,UAAMC,MAAM,GAAG,MAAM1B,IAAI,CAACyC,WAAD,EAAahB,MAAM,CAACE,IAApB,CAAzB;AACA,UAAM1B,GAAG,CAAC;AAAE;AACV2B,MAAAA,IAAI,EAAEb,iBADE;AAERY,MAAAA,IAAI,EAAGD,MAAM,CAACC,IAFN;AAGRkB,MAAAA,EAAE,EAAC,CAACpB,MAAM,CAACE;AAHH,KAAD,CAAT;AAKD,GARD,CAQE,OAAOE,CAAP,EAAU;AAAE;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACA,UAAM5B,GAAG,CAAC;AACR2B,MAAAA,IAAI,EAAEZ,iBADE;AAERoB,MAAAA,KAAK,EAAEP;AAFC,KAAD,CAAT;AAID;AACF;;AAEH,UAAUiB,aAAV,GAAyB;AACrB,QAAM3C,SAAS,CAACc,iBAAD,EAAmB2B,QAAnB,CAAf;AACH;;AAGD,eAAe,UAAUG,QAAV,GAAoB;AAC/B,QAAMhD,GAAG,CAAC,CACNK,IAAI,CAAC4B,UAAD,CADE,EAEN5B,IAAI,CAACoC,WAAD,CAFE,EAGNpC,IAAI,CAAC0C,aAAD,CAHE,EAIN1C,IAAI,CAACiC,WAAD,CAJE,CAAD,CAAT;AAMH","sourcesContent":["//call 함수 동기적으로 호출 fork 함수 비동기적으로 호출 put 액션 dispatch take 해당 액션이 dispatch 되면 제너레이터 next를 실행 하게함\r\n//all 여러 이펙트를 동시에 실항 할 수 있게 함\r\n//사가 자체 적으로 next() 호출을 자동으로 해주는 제너레이터임\r\n//제너레이터는 한번 사용하면 다시 사용 할 수 없기 때문에 무한 루프를 사용하여 반복 실행이 될 수 있도록 한다\r\n// function* watchLogin(){\r\n    //     // while(true){\r\n    //     //     console.log(\"대기\");\r\n    //     //     yield take(LOG_IN)\r\n    //     //     yield delay(4000);\r\n    //     //     yield put({\r\n    //     //         type:LOG_IN_SUCCESS\r\n    //     //     })\r\n    //     //     console.log(\"LOG_IN_SUCCESS\");\r\n    //     // }while saga에서 문법으로 지원 takeEvery\r\n    //     //사용자의 시도가 유효할때 takeEvery\r\n    //     //유효 하지 않고 한번만 발생 하길 원할때 takeLatest\r\n    //     // yield takeEvery(LOG_IN,function* (){\r\n    //     //     yield put({\r\n    //     //         type:LOG_IN_SUCCESS\r\n    //     //     })\r\n    //     //     console.log(1);\r\n    //     //     console.log(12);\r\n    //     //     console.log(13);\r\n    //     //     console.log(14);\r\n    //     // })\r\n    \r\n    // }\r\nimport { all ,call,put,takeLatest,takeEvery, fork,take,delay} from 'redux-saga/effects';\r\nimport { LOG_IN_REQUEST, SIGN_UP_REQUEST, LOG_IN_FAILURE, SIGN_UP_SUCCESS ,SIGN_UP_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, LOAD_USER_SUCCESS, LOAD_USER_FAILURE, LOAD_USER_REQUEST } from '../Reducer/user';\r\nimport { LOG_IN_SUCCESS } from '../Reducer/user';\r\nimport axios from 'axios';\r\n\r\nfunction loginAPI(loginData){\r\n    return axios.post('http://localhost:3065/api/user/login',loginData,{\r\n        withCredentials:true //서로 쿠키 교환 axios에서 지원\r\n    });\r\n}\r\n\r\nfunction* login(action){\r\n    try{\r\n        const result = yield call(loginAPI,action.data);\r\n        yield put({\r\n            type:LOG_IN_SUCCESS,\r\n            data:result.data,\r\n        })\r\n    }catch(e){\r\n        console.log(e)\r\n        yield put({\r\n            type:LOG_IN_FAILURE\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLogin (){\r\n    yield takeEvery(LOG_IN_REQUEST,login);\r\n}\r\n\r\nfunction signUpAPI(signUpData){\r\n    return axios.post('http://localhost:3065/api/user',signUpData);\r\n}\r\n\r\nfunction* signUp(action) {\r\n    try {\r\n      yield call(signUpAPI,action.data);\r\n      yield put({ // put은 dispatch 동일\r\n        type: SIGN_UP_SUCCESS,\r\n      });\r\n    } catch (e) { // loginAPI 실패\r\n      console.log(action);\r\n      yield put({\r\n        type: SIGN_UP_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  }\r\n\r\n\r\nfunction* watchSignUp(){\r\n    yield takeEvery(SIGN_UP_REQUEST,signUp)\r\n}\r\nfunction logoutAPI(){\r\n    return axios.post('http://localhost:3065/api/user/logout',{},{\r\n        withCredentials:true\r\n    });\r\n}\r\n\r\nfunction* logout(action) {\r\n    try {\r\n      yield call(logoutAPI);\r\n      yield put({ // put은 dispatch 동일\r\n        type: LOG_OUT_SUCCESS,\r\n      });\r\n    } catch (e) { // loginAPI 실패\r\n      console.log(action);\r\n      yield put({\r\n        type: LOG_OUT_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  }\r\n\r\n\r\nfunction* watchLogout(){\r\n    yield takeEvery(LOG_OUT_REQUEST,logout)\r\n}\r\nfunction loadUserAPI(userId){\r\n  console.log(userId)\r\n    return axios.get(userId ?`http://localhost:3065/api/user/${userId}` : 'http://localhost:3065/api/user',{\r\n        withCredentials:true,\r\n    });\r\n}\r\n\r\nfunction* loadUser(action) {\r\n    try {\r\n      console.log(action)\r\n      const result = yield call(loadUserAPI,action.data);\r\n      yield put({ // put은 dispatch 동일\r\n        type: LOAD_USER_SUCCESS,\r\n        data : result.data,\r\n        me:!action.data\r\n      });\r\n    } catch (e) { // loginAPI 실패\r\n      console.log(e);\r\n      yield put({\r\n        type: LOAD_USER_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  }\r\n\r\nfunction* watchLoadUser(){\r\n    yield takeEvery(LOAD_USER_REQUEST,loadUser)\r\n}\r\n\r\n\r\nexport default function* userSaga(){\r\n    yield all([\r\n        fork(watchLogin),\r\n        fork(watchLogout),\r\n        fork(watchLoadUser),\r\n        fork(watchSignUp)\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}