{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(login),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLogin),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(userSaga);\n\n//call 함수 동기적으로 호출 fork 함수 비동기적으로 호출 put 액션 dispatch take 해당 액션이 dispatch 되면 제너레이터 next를 실행 하게함\n//all 여러 이펙트를 동시에 실항 할 수 있게 함\n//사가 자체 적으로 next() 호출을 자동으로 해주는 제너레이터임\n//제너레이터는 한번 사용하면 다시 사용 할 수 없기 때문에 무한 루프를 사용하여 반복 실행이 될 수 있도록 한다\nimport { all, call, put, takeLatest, fork, take } from 'redux-saga/effects';\nimport { LOG_IN } from '../Reducer/user';\nimport { LOG_IN_SUCCESS, LOG_IN_FAIL } from '../Reducer/user';\n\nfunction loginAPI() {}\n\nfunction login() {\n  return _regeneratorRuntime.wrap(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(loginAPI);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: LOG_IN_SUCCESS\n          });\n\n        case 5:\n          _context.next = 12;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(_context.t0);\n          _context.next = 12;\n          return put({\n            type: LOG_IN_FAIL\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (!true) {\n            _context2.next = 8;\n            break;\n          }\n\n          _context2.next = 3;\n          return take(LOG_IN);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: LOG_IN_SUCCESS\n          });\n\n        case 5:\n          console.log(\"LOG_IN_SUCCESS\");\n          _context2.next = 0;\n          break;\n\n        case 8:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([watchLogin()]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["C:/ReactNodeBird/Front/sagas/user.js"],"names":["login","watchLogin","userSaga","all","call","put","takeLatest","fork","take","LOG_IN","LOG_IN_SUCCESS","LOG_IN_FAIL","loginAPI","type","console","log"],"mappings":";;;;yBAYUA,K;;;yBAcAC,U;;;yBAaeC,Q;;AAvCzB;AACA;AACA;AACA;AACA,SAASC,GAAT,EAAcC,IAAd,EAAmBC,GAAnB,EAAuBC,UAAvB,EAAmCC,IAAnC,EAAwCC,IAAxC,QAAmD,oBAAnD;AACA,SAASC,MAAT,QAAuB,iBAAvB;AACA,SAASC,cAAT,EAAwBC,WAAxB,QAA2C,iBAA3C;;AAEA,SAASC,QAAT,GAAmB,CAElB;;AAED,SAAUZ,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQ,iBAAMI,IAAI,CAACQ,QAAD,CAAV;;AAFR;AAAA;AAGQ,iBAAMP,GAAG,CAAC;AACNQ,YAAAA,IAAI,EAACH;AADC,WAAD,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAOQI,UAAAA,OAAO,CAACC,GAAR;AAPR;AAQQ,iBAAMV,GAAG,CAAC;AACNQ,YAAAA,IAAI,EAACF;AADC,WAAD,CAAT;;AARR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAcA,SAAUV,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA,eACU,IADV;AAAA;AAAA;AAAA;;AAAA;AAEQ,iBAAMO,IAAI,CAACC,MAAD,CAAV;;AAFR;AAAA;AAGQ,iBAAMJ,GAAG,CAAC;AACNQ,YAAAA,IAAI,EAACH;AADC,WAAD,CAAT;;AAHR;AAMQI,UAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AANR;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAaA,eAAe,SAAUb,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CACNF,UAAU,EADJ,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["//call 함수 동기적으로 호출 fork 함수 비동기적으로 호출 put 액션 dispatch take 해당 액션이 dispatch 되면 제너레이터 next를 실행 하게함\r\n//all 여러 이펙트를 동시에 실항 할 수 있게 함\r\n//사가 자체 적으로 next() 호출을 자동으로 해주는 제너레이터임\r\n//제너레이터는 한번 사용하면 다시 사용 할 수 없기 때문에 무한 루프를 사용하여 반복 실행이 될 수 있도록 한다\r\nimport { all ,call,put,takeLatest, fork,take} from 'redux-saga/effects';\r\nimport { LOG_IN } from '../Reducer/user';\r\nimport { LOG_IN_SUCCESS,LOG_IN_FAIL } from '../Reducer/user';\r\n\r\nfunction loginAPI(){\r\n\r\n}\r\n\r\nfunction* login(){\r\n    try{\r\n        yield call(loginAPI);\r\n        yield put({\r\n            type:LOG_IN_SUCCESS\r\n        })\r\n    }catch(e){\r\n        console.log(e)\r\n        yield put({\r\n            type:LOG_IN_FAIL\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLogin(){\r\n    while(true){\r\n        yield take(LOG_IN)\r\n        yield put({\r\n            type:LOG_IN_SUCCESS\r\n        })\r\n        console.log(\"LOG_IN_SUCCESS\");\r\n    \r\n    }\r\n}\r\n\r\n\r\n\r\nexport default function* userSaga(){\r\n    yield all([\r\n        watchLogin()\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}