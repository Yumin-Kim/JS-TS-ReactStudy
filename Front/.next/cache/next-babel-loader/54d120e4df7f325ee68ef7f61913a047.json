{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(login),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLogin),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(signUp),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchSignUp),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(userSaga);\n\n//call 함수 동기적으로 호출 fork 함수 비동기적으로 호출 put 액션 dispatch take 해당 액션이 dispatch 되면 제너레이터 next를 실행 하게함\n//all 여러 이펙트를 동시에 실항 할 수 있게 함\n//사가 자체 적으로 next() 호출을 자동으로 해주는 제너레이터임\n//제너레이터는 한번 사용하면 다시 사용 할 수 없기 때문에 무한 루프를 사용하여 반복 실행이 될 수 있도록 한다\n// function* watchLogin(){\n//     // while(true){\n//     //     console.log(\"대기\");\n//     //     yield take(LOG_IN)\n//     //     yield delay(4000);\n//     //     yield put({\n//     //         type:LOG_IN_SUCCESS\n//     //     })\n//     //     console.log(\"LOG_IN_SUCCESS\");\n//     // }while saga에서 문법으로 지원 takeEvery\n//     //사용자의 시도가 유효할때 takeEvery\n//     //유효 하지 않고 한번만 발생 하길 원할때 takeLatest\n//     // yield takeEvery(LOG_IN,function* (){\n//     //     yield put({\n//     //         type:LOG_IN_SUCCESS\n//     //     })\n//     //     console.log(1);\n//     //     console.log(12);\n//     //     console.log(13);\n//     //     console.log(14);\n//     // })\n// }\nimport { all, call, put, takeLatest, takeEvery, fork, take, delay } from 'redux-saga/effects';\nimport { LOG_IN, LOG_IN_REQUEST, SIGN_UP_REQUEST, LOG_IN_FAILURE, SIGN_UP_SUCCESS } from '../Reducer/user';\nimport { LOG_IN_SUCCESS, LOG_IN_FAIL } from '../Reducer/user';\nimport axios from 'axios';\n\nfunction loginAPI() {\n  return axios.post('login');\n}\n\nfunction login() {\n  return _regeneratorRuntime.wrap(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(loginAPI);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: LOG_IN_SUCCESS\n          });\n\n        case 5:\n          _context.next = 12;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(_context.t0);\n          _context.next = 12;\n          return put({\n            type: LOG_IN_FAILURE\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(LOG_IN_REQUEST, login);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction signUpAPI() {\n  return axios.post('login');\n}\n\nfunction signUp() {\n  return _regeneratorRuntime.wrap(function signUp$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(signUpAPI);\n\n        case 3:\n          _context3.next = 5;\n          return put({\n            type: SIGN_UP_SUCCESS\n          });\n\n        case 5:\n          _context3.next = 12;\n          break;\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.log(_context3.t0);\n          _context3.next = 12;\n          return put({\n            type: SIGN_UP_FAILURE\n          });\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 7]]);\n}\n\nfunction watchSignUp() {\n  return _regeneratorRuntime.wrap(function watchSignUp$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeEvery(SIGN_UP_REQUEST, signUp);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchLogin), fork(watchSignUp)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["C:/ReactNodeBird/Front/sagas/user.js"],"names":["login","watchLogin","signUp","watchSignUp","userSaga","all","call","put","takeLatest","takeEvery","fork","take","delay","LOG_IN","LOG_IN_REQUEST","SIGN_UP_REQUEST","LOG_IN_FAILURE","SIGN_UP_SUCCESS","LOG_IN_SUCCESS","LOG_IN_FAIL","axios","loginAPI","post","type","console","log","signUpAPI","SIGN_UP_FAILURE"],"mappings":";;;;yBAoCUA,K;;;yBAcAC,U;;;yBAQAC,M;;;yBAeAC,W;;;yBAKeC,Q;;AA9EzB;AACA;AACA;AACA;AACA;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACJ,SAASC,GAAT,EAAcC,IAAd,EAAmBC,GAAnB,EAAuBC,UAAvB,EAAkCC,SAAlC,EAA6CC,IAA7C,EAAkDC,IAAlD,EAAuDC,KAAvD,QAAmE,oBAAnE;AACA,SAASC,MAAT,EAAiBC,cAAjB,EAAiCC,eAAjC,EAAkDC,cAAlD,EAAkEC,eAAlE,QAAyF,iBAAzF;AACA,SAASC,cAAT,EAAwBC,WAAxB,QAA2C,iBAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,QAAT,GAAmB;AACf,SAAOD,KAAK,CAACE,IAAN,CAAW,OAAX,CAAP;AACH;;AAED,SAAUtB,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQ,iBAAMM,IAAI,CAACe,QAAD,CAAV;;AAFR;AAAA;AAGQ,iBAAMd,GAAG,CAAC;AACNgB,YAAAA,IAAI,EAACL;AADC,WAAD,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAOQM,UAAAA,OAAO,CAACC,GAAR;AAPR;AAQQ,iBAAMlB,GAAG,CAAC;AACNgB,YAAAA,IAAI,EAACP;AADC,WAAD,CAAT;;AARR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAcA,SAAUf,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMQ,SAAS,CAACK,cAAD,EAAgBd,KAAhB,CAAf;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAS0B,SAAT,GAAoB;AAChB,SAAON,KAAK,CAACE,IAAN,CAAW,OAAX,CAAP;AACH;;AAED,SAAUpB,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQ,iBAAMI,IAAI,CAACoB,SAAD,CAAV;;AAFR;AAAA;AAGQ,iBAAMnB,GAAG,CAAC;AACNgB,YAAAA,IAAI,EAACN;AADC,WAAD,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAOQO,UAAAA,OAAO,CAACC,GAAR;AAPR;AAQQ,iBAAMlB,GAAG,CAAC;AACNgB,YAAAA,IAAI,EAACI;AADC,WAAD,CAAT;;AARR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeA,SAAUxB,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMM,SAAS,CAACM,eAAD,EAAiBb,MAAjB,CAAf;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CACNK,IAAI,CAACT,UAAD,CADE,EAENS,IAAI,CAACP,WAAD,CAFE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["//call 함수 동기적으로 호출 fork 함수 비동기적으로 호출 put 액션 dispatch take 해당 액션이 dispatch 되면 제너레이터 next를 실행 하게함\r\n//all 여러 이펙트를 동시에 실항 할 수 있게 함\r\n//사가 자체 적으로 next() 호출을 자동으로 해주는 제너레이터임\r\n//제너레이터는 한번 사용하면 다시 사용 할 수 없기 때문에 무한 루프를 사용하여 반복 실행이 될 수 있도록 한다\r\n// function* watchLogin(){\r\n    //     // while(true){\r\n    //     //     console.log(\"대기\");\r\n    //     //     yield take(LOG_IN)\r\n    //     //     yield delay(4000);\r\n    //     //     yield put({\r\n    //     //         type:LOG_IN_SUCCESS\r\n    //     //     })\r\n    //     //     console.log(\"LOG_IN_SUCCESS\");\r\n    //     // }while saga에서 문법으로 지원 takeEvery\r\n    //     //사용자의 시도가 유효할때 takeEvery\r\n    //     //유효 하지 않고 한번만 발생 하길 원할때 takeLatest\r\n    //     // yield takeEvery(LOG_IN,function* (){\r\n    //     //     yield put({\r\n    //     //         type:LOG_IN_SUCCESS\r\n    //     //     })\r\n    //     //     console.log(1);\r\n    //     //     console.log(12);\r\n    //     //     console.log(13);\r\n    //     //     console.log(14);\r\n    //     // })\r\n    \r\n    // }\r\nimport { all ,call,put,takeLatest,takeEvery, fork,take,delay} from 'redux-saga/effects';\r\nimport { LOG_IN, LOG_IN_REQUEST, SIGN_UP_REQUEST, LOG_IN_FAILURE, SIGN_UP_SUCCESS } from '../Reducer/user';\r\nimport { LOG_IN_SUCCESS,LOG_IN_FAIL } from '../Reducer/user';\r\nimport axios from 'axios';\r\n\r\nfunction loginAPI(){\r\n    return axios.post('login');\r\n}\r\n\r\nfunction* login(){\r\n    try{\r\n        yield call(loginAPI);\r\n        yield put({\r\n            type:LOG_IN_SUCCESS\r\n        })\r\n    }catch(e){\r\n        console.log(e)\r\n        yield put({\r\n            type:LOG_IN_FAILURE\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLogin (){\r\n    yield takeEvery(LOG_IN_REQUEST,login);\r\n}\r\n\r\nfunction signUpAPI(){\r\n    return axios.post('login');\r\n}\r\n\r\nfunction* signUp(){\r\n    try{\r\n        yield call(signUpAPI);\r\n        yield put({\r\n            type:SIGN_UP_SUCCESS\r\n        })\r\n    }catch(e){\r\n        console.log(e)\r\n        yield put({\r\n            type:SIGN_UP_FAILURE\r\n        })\r\n    }\r\n}\r\n\r\n\r\nfunction* watchSignUp(){\r\n    yield takeEvery(SIGN_UP_REQUEST,signUp)\r\n}\r\n\r\n\r\nexport default function* userSaga(){\r\n    yield all([\r\n        fork(watchLogin),\r\n        fork(watchSignUp)\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}