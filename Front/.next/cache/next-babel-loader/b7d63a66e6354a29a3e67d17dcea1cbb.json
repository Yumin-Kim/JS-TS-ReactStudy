{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(appPost),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchAddPost),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(userSaga);\n\nimport { put, all, fork, takeLatest, delay } from 'redux-saga/effects';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE } from '../Reducer/post';\n\nfunction appPost() {\n  return _regeneratorRuntime.wrap(function appPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(2000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: ADD_POST_SUCCESS\n          });\n\n        case 5:\n          _context.next = 11;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 11;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context.t0\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(ADD_POST_REQUEST, appPost);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchAddPost)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["C:/ReactNodeBird/Front/sagas/post.js"],"names":["appPost","watchAddPost","userSaga","put","all","fork","takeLatest","delay","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","type","error"],"mappings":";;;;yBAGUA,O;;;yBAcAC,Y;;;yBAIeC,Q;;AArBzB,SAAQC,GAAR,EAAaC,GAAb,EAAkBC,IAAlB,EAAuBC,UAAvB,EAAkCC,KAAlC,QAA+C,oBAA/C;AACA,SAASC,gBAAT,EAA2BC,gBAA3B,EAA6CC,gBAA7C,QAAqE,iBAArE;;AAEA,SAAUV,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEI,iBAAMO,KAAK,CAAC,IAAD,CAAX;;AAFJ;AAAA;AAGI,iBAAMJ,GAAG,CAAC;AACRQ,YAAAA,IAAI,EAACF;AADG,WAAD,CAAT;;AAHJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAOI,iBAAMN,GAAG,CAAC;AACRQ,YAAAA,IAAI,EAACD,gBADG;AAERE,YAAAA,KAAK;AAFG,WAAD,CAAT;;AAPJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAcA,SAAUX,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMK,UAAU,CAACE,gBAAD,EAAkBR,OAAlB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAME,GAAG,CAAC,CACRC,IAAI,CAACJ,YAAD,CADI,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {put, all, fork,takeLatest,delay } from 'redux-saga/effects';\r\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE } from '../Reducer/post';\r\n\r\nfunction* appPost(){\r\n  try{\r\n    yield delay(2000);\r\n    yield put({\r\n      type:ADD_POST_SUCCESS,\r\n    })\r\n  }catch(e){\r\n    yield put({\r\n      type:ADD_POST_FAILURE,\r\n      error:e\r\n    })\r\n  }\r\n}\r\n\r\nfunction* watchAddPost(){\r\n  yield takeLatest(ADD_POST_REQUEST,appPost);\r\n}\r\n\r\nexport default function* userSaga(){\r\n    yield all([\r\n      fork(watchAddPost),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}