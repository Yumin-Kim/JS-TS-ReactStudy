{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport styled from 'styled-components';\nimport Link from \"next/link\";\nimport { Card, Icon, Button, Avatar, Divider, Form, Input, List, Comment, Popover } from \"antd\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { ADD_POST_REQUEST, ADD_COMMENT_REQUEST, LOAD_COMMENTS_REQUEST, UNLIKE_POST_REQUEST, LIKE_POST_REQUEST, RETWEET_REQUEST, REMOVE_POST_REQUEST } from \"../Reducer/post\";\nimport PostImages from \"./PostImages\";\nimport PostCardCotent from \"./PostCardContent\";\nconst CardWrapper = styled.div`\n  margin-bottom:20px;\n`;\n\nconst PostCard = ({\n  post\n}) => {\n  const {\n    0: commentFormOpened,\n    1: setCommentOpened\n  } = useState(false);\n  const {\n    0: commentText,\n    1: setCommentText\n  } = useState(\"\");\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    commentAdded,\n    isAddingComment\n  } = useSelector(state => state.post);\n  const dispatch = useDispatch();\n  const liked = me && post.Likers && post.Likers.find(v => v.id === me.id);\n  const onRemovepost = useCallback(userId => () => {\n    dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: userId\n    });\n  }, []);\n  const onToggleComment = useCallback(() => {\n    setCommentOpened(prev => !prev);\n\n    if (!commentFormOpened) {\n      dispatch({\n        type: LOAD_COMMENTS_REQUEST,\n        data: post.id\n      });\n    }\n  }, []);\n  const onSubmitComment = useCallback(e => {\n    e.preventDefault();\n\n    if (!me) {\n      return alert(\"로그인 필요합니다\");\n    }\n\n    dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id,\n        content: commentText\n      }\n    });\n  }, [me && me.id, commentText]);\n  const onChangeCommentText = useCallback(e => {\n    setCommentText(e.target.value);\n  }, []);\n  useEffect(() => {\n    setCommentText(\"\");\n  }, [commentAdded === true]);\n  const onToggleLike = useCallback(() => {\n    console.log(post.User.id, me.id);\n\n    if (!me) {\n      return alert(\"로그인이 필요 합니다\");\n    }\n\n    console.log(post);\n\n    if (liked) {\n      return dispatch({\n        type: UNLIKE_POST_REQUEST,\n        data: post.id\n      });\n    } else {\n      return dispatch({\n        type: LIKE_POST_REQUEST,\n        data: post.id\n      });\n    }\n  }, [me && me.id, liked]);\n  const onRetweet = useCallback(() => {\n    if (!me) {\n      return alert(\"로그인이 필요합니다\");\n    }\n\n    return dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id\n    });\n  }, [me && me.id, post.id]);\n  return __jsx(CardWrapper, null, __jsx(Card, {\n    key: +post.createdAt,\n    cover: post.Images[0] && __jsx(PostImages, {\n      images: post.Images\n    }),\n    actions: [__jsx(Icon, {\n      type: \"retweet\",\n      key: \"retweet\",\n      onClick: onRetweet\n    }), __jsx(Icon, {\n      type: \"heart\",\n      key: \"heart\",\n      theme: liked ? \"twoTone\" : \"outlined\",\n      twoToneColor: \"#eb2f96\",\n      onClick: onToggleLike\n    }), __jsx(Icon, {\n      type: \"message\",\n      key: \"message\",\n      onClick: onToggleComment\n    }), __jsx(Popover, {\n      key: \"ellipsis\",\n      content: __jsx(Button.Group, null, me && post.UserId === me.id ? __jsx(React.Fragment, null, __jsx(Button, null, \"\\uC218\\uC815\"), __jsx(Button, {\n        type: \"danger\",\n        onClick: onRemovepost(post.id)\n      }, \"\\uC0AD\\uC81C\")) : __jsx(Button, null, \"\\uC2E0\\uACE0\"))\n    }, __jsx(Icon, {\n      type: \"ellipsis\"\n    }))],\n    title: post.RetweetId ? `${post.User.nickname}님이 리트윗 했습니다` : null,\n    extra: __jsx(Button, null, \"\\uD314\\uB85C\\uC6B0\")\n  }, post.RetweetId && post.Retweet ? __jsx(Card // cover={post.Retweet.Images[0] !== undefined ? <PostImages images={post.Retweet.Images} />  : null}\n  , null, __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: {\n        pathname: '/user',\n        query: {\n          id: post.Retweet.User.id\n        }\n      },\n      as: `/user/${post.Retweet.User.id}`\n    }, __jsx(\"a\", null, __jsx(Avatar, null, post.Retweet.User.nickname[0]))),\n    title: post.Retweet.User.nickname,\n    description: __jsx(PostCardCotent, {\n      postData: post.Retweet.content\n    }) // a tag x -> Link\n\n  })) : __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: {\n        pathname: '/user',\n        query: {\n          id: post.User.id\n        }\n      },\n      as: `/user/${post.User.id}`\n    }, __jsx(\"a\", null, __jsx(Avatar, null, post.User.nickname[0]))),\n    title: post.User.nickname,\n    description: __jsx(PostCardCotent, {\n      postData: post.content\n    }) // a tag x -> Link\n\n  })), commentFormOpened && __jsx(React.Fragment, null, __jsx(Form, {\n    onSubmit: onSubmitComment\n  }, __jsx(Form.Item, null, __jsx(Input.TextArea, {\n    rows: 4,\n    value: commentText,\n    onChange: onChangeCommentText\n  })), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: isAddingComment\n  }, \" \", \"\\uC785\\uB825!!\", \" \")), __jsx(List, {\n    header: `${post.Comments ? post.Comments.length : 0} 댓글`,\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments || [],\n    renderItem: item => __jsx(\"li\", null, __jsx(Comment, {\n      author: item.User.nickname,\n      avatar: __jsx(Link, {\n        href: {\n          pathname: \"/user\",\n          query: {\n            id: item.User.id\n          }\n        },\n        as: `/user/${item.User.id}`\n      }, __jsx(\"a\", null, __jsx(Avatar, null, item.User.nickname[0]))),\n      content: item.content,\n      datetime: item.createAt\n    }))\n  })));\n};\n\nexport default PostCard;","map":{"version":3,"sources":["C:/ReactNodeBird/Front/components/PostCard.js"],"names":["React","useState","useCallback","useEffect","styled","Link","Card","Icon","Button","Avatar","Divider","Form","Input","List","Comment","Popover","useSelector","useDispatch","ADD_POST_REQUEST","ADD_COMMENT_REQUEST","LOAD_COMMENTS_REQUEST","UNLIKE_POST_REQUEST","LIKE_POST_REQUEST","RETWEET_REQUEST","REMOVE_POST_REQUEST","PostImages","PostCardCotent","CardWrapper","div","PostCard","post","commentFormOpened","setCommentOpened","commentText","setCommentText","me","state","user","commentAdded","isAddingComment","dispatch","liked","Likers","find","v","id","onRemovepost","userId","type","data","onToggleComment","prev","onSubmitComment","e","preventDefault","alert","postId","content","onChangeCommentText","target","value","onToggleLike","console","log","User","onRetweet","createdAt","Images","UserId","RetweetId","nickname","Retweet","pathname","query","Comments","length","item","createAt"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from \"react\";\r\nimport styled from 'styled-components';\r\nimport Link from \"next/link\";\r\nimport {\r\n  Card,\r\n  Icon,\r\n  Button,\r\n  Avatar,\r\n  Divider,\r\n  Form,\r\n  Input,\r\n  List,\r\n  Comment,\r\n  Popover\r\n} from \"antd\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  ADD_POST_REQUEST,\r\n  ADD_COMMENT_REQUEST,\r\n  LOAD_COMMENTS_REQUEST,\r\n  UNLIKE_POST_REQUEST,\r\n  LIKE_POST_REQUEST,\r\n  RETWEET_REQUEST,\r\n  REMOVE_POST_REQUEST\r\n} from \"../Reducer/post\";\r\nimport PostImages from \"./PostImages\";\r\nimport PostCardCotent from \"./PostCardContent\";\r\n\r\nconst CardWrapper = styled.div`\r\n  margin-bottom:20px;\r\n`;\r\n\r\nconst PostCard = ({ post }) => {\r\n  const [commentFormOpened, setCommentOpened] = useState(false);\r\n  const [commentText, setCommentText] = useState(\"\");\r\n  const { me } = useSelector(state => state.user);\r\n  const { commentAdded, isAddingComment } = useSelector(state => state.post);\r\n  const dispatch = useDispatch();\r\n  const liked = me && post.Likers && post.Likers.find(v => v.id === me.id);\r\n\r\n  const onRemovepost = useCallback(userId => () => {\r\n    dispatch({\r\n      type:REMOVE_POST_REQUEST,\r\n      data:userId,\r\n    })\r\n  },[]);\r\n\r\n  const onToggleComment = useCallback(() => {\r\n    setCommentOpened(prev => !prev);\r\n    if (!commentFormOpened) {\r\n      dispatch({\r\n        type: LOAD_COMMENTS_REQUEST,\r\n        data: post.id\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  const onSubmitComment = useCallback(\r\n    e => {\r\n      e.preventDefault();\r\n      if (!me) {\r\n        return alert(\"로그인 필요합니다\");\r\n      }\r\n      dispatch({\r\n        type: ADD_COMMENT_REQUEST,\r\n        data: {\r\n          postId: post.id,\r\n          content: commentText\r\n        }\r\n      });\r\n    },\r\n    [me && me.id, commentText]\r\n  );\r\n\r\n  const onChangeCommentText = useCallback(e => {\r\n    setCommentText(e.target.value);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setCommentText(\"\");\r\n  }, [commentAdded === true]);\r\n\r\n  const onToggleLike = useCallback(() => {\r\n    console.log(post.User.id, me.id);\r\n    if (!me) {\r\n      return alert(\"로그인이 필요 합니다\");\r\n    }\r\n    console.log(post);\r\n    if (liked) {\r\n      return dispatch({\r\n        type: UNLIKE_POST_REQUEST,\r\n        data: post.id\r\n      });\r\n    } else {\r\n      return dispatch({\r\n        type: LIKE_POST_REQUEST,\r\n        data: post.id\r\n      });\r\n    }\r\n  }, [me && me.id, liked]);\r\n\r\n  const onRetweet = useCallback(() => {\r\n    if (!me) {\r\n      return alert(\"로그인이 필요합니다\");\r\n    }\r\n    return dispatch({\r\n      type: RETWEET_REQUEST,\r\n      data: post.id\r\n    });\r\n  }, [me && me.id, post.id]);\r\n  return (\r\n    <CardWrapper>\r\n      <Card\r\n        key={+post.createdAt}\r\n        cover={post.Images[0] && <PostImages images={post.Images} />}\r\n        actions={[\r\n          <Icon type=\"retweet\" key=\"retweet\" onClick={onRetweet} />,\r\n          <Icon\r\n            type=\"heart\"\r\n            key=\"heart\"\r\n            theme={liked ? \"twoTone\" : \"outlined\"}\r\n            twoToneColor=\"#eb2f96\"\r\n            onClick={onToggleLike}\r\n          />,\r\n          <Icon type=\"message\" key=\"message\" onClick={onToggleComment} />,\r\n          <Popover\r\n            key=\"ellipsis\"\r\n            content={(\r\n              <Button.Group>\r\n                {me && post.UserId === me.id\r\n                  ? (\r\n                    <>\r\n                      <Button>수정</Button>\r\n                      <Button type=\"danger\" onClick={onRemovepost(post.id)}>삭제</Button>\r\n                    </>\r\n                  )\r\n                  : <Button>신고</Button>}\r\n              </Button.Group>\r\n            )}\r\n          >\r\n            <Icon type=\"ellipsis\" />\r\n          </Popover>,\r\n        ]}\r\n        title={post.RetweetId ? `${post.User.nickname}님이 리트윗 했습니다` : null}\r\n        extra={<Button>팔로우</Button>}\r\n      >\r\n        {post.RetweetId && post.Retweet\r\n          ? (\r\n            <Card\r\n              // cover={post.Retweet.Images[0] !== undefined ? <PostImages images={post.Retweet.Images} />  : null}\r\n            >\r\n              <Card.Meta\r\n                avatar={(\r\n                  <Link\r\n                    href={{ pathname: '/user', query: { id: post.Retweet.User.id } }}\r\n                    as={`/user/${post.Retweet.User.id}`}\r\n                  >\r\n                    <a><Avatar>{post.Retweet.User.nickname[0]}</Avatar></a>\r\n                  </Link>\r\n                )}\r\n                title={post.Retweet.User.nickname}\r\n                description={<PostCardCotent postData={post.Retweet.content} />} // a tag x -> Link\r\n              />\r\n            </Card>\r\n          )\r\n          : (\r\n            <Card.Meta\r\n              avatar={(\r\n                <Link href={{ pathname: '/user', query: { id: post.User.id } }} as={`/user/${post.User.id}`}>\r\n                  <a><Avatar>{post.User.nickname[0]}</Avatar></a>\r\n                </Link>\r\n              )}\r\n              title={post.User.nickname}\r\n              description={<PostCardCotent postData={post.content} />} // a tag x -> Link\r\n            />\r\n          )}\r\n      </Card>\r\n      {commentFormOpened && (\r\n        <>\r\n          <Form onSubmit={onSubmitComment}>\r\n            <Form.Item>\r\n              <Input.TextArea\r\n                rows={4}\r\n                value={commentText}\r\n                onChange={onChangeCommentText}\r\n              />\r\n            </Form.Item>\r\n            <Button type=\"primary\" htmlType=\"submit\" loading={isAddingComment}>\r\n              {\" \"}\r\n              입력!!{\" \"}\r\n            </Button>\r\n          </Form>\r\n          <List\r\n            header={`${post.Comments ? post.Comments.length : 0} 댓글`}\r\n            itemLayout=\"horizontal\"\r\n            dataSource={post.Comments || []}\r\n            renderItem={item => (\r\n              <li>\r\n                <Comment\r\n                  author={item.User.nickname}\r\n                  avatar={\r\n                    <Link\r\n                      href={{ pathname: \"/user\", query: { id: item.User.id } }}\r\n                      as={`/user/${item.User.id}`}\r\n                    >\r\n                      <a>\r\n                        <Avatar>{item.User.nickname[0]}</Avatar>\r\n                      </a>\r\n                    </Link>\r\n                  }\r\n                  content={item.content}\r\n                  datetime={item.createAt}\r\n                />\r\n              </li>\r\n            )}\r\n          />\r\n        </>\r\n      )}\r\n    </CardWrapper>\r\n  );\r\n};\r\n\r\nexport default PostCard;\r\n"]},"metadata":{},"sourceType":"module"}