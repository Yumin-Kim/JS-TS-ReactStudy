{"ast":null,"code":"// import React from 'react';\n// import Head from 'next/head';\n// import PropTypes from 'prop-types';\n// import AppLayout from '../components/AppLayout';\n// import withRedux from 'next-redux-wrapper';\n// import { Provider } from 'react-redux';\n// import {createStore, compose, applyMiddleware} from 'redux';\n// import reducer from '../Reducer';\n// //모든 페이지에 공통적으로 들어가는것들을 여기다모음\n// const Nodebird = ({Component,store}) =>{\n//     return(\n//         <Provider store={store}>\n//             <Head>\n//                 <title>NodeBird</title>\n//                 <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/antd/3.22.0/antd.css\" />\n//             </Head>\n//             <AppLayout>\n//                 <Component />\n//             </AppLayout>\n//         </Provider>\n//     );\n// }\n// //store 만드는 과정 withRedux라는 고위함수를 만들어 주는데 확장자 처럼 사용되며\n// //state+reducer가 합쳐진 것을 모으는 곳이 store라고함\n// // export default withRedux((initialState,options)=>{\n// //     const middlewares = [];\n// //     const enhancer =  compose(\n// //         applyMiddleware(...middlewares)\n// //         ,typeof(window) !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? \n// //         window.__REDUX_DEVTOOLS_EXTENSION__():(f)=>f);\n// //     const store=createStore(reducer,initialState,enhancer);\n// // //middlewares는 state,action,reducer와 store사이 기능을 추가 변조 할수있는 역할을 가짐    \n// //     return store;\n// // })(Nodebird);\n// const configureStore = (initialState, options) => {\n//     const sagaMiddleware = createSagaMiddleware();\n//     const middlewares = [sagaMiddleware];\n//     const enhancer = process.env.NODE_ENV === 'production'\n//       ? compose(applyMiddleware(...middlewares))\n//       : compose(\n//         applyMiddleware(...middlewares),\n//         !options.isServer && typeof window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : f => f,\n//       );\n//     const store = createStore(reducer, initialState, enhancer);\n//     sagaMiddleware.run(rootSaga);\n//     return store;\n//   };\n//   export default withRedux(configureStore)(NodeBird);","map":{"version":3,"sources":["c:/ReactNodeBird/Front/pages/_app.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["// import React from 'react';\r\n// import Head from 'next/head';\r\n// import PropTypes from 'prop-types';\r\n// import AppLayout from '../components/AppLayout';\r\n// import withRedux from 'next-redux-wrapper';\r\n// import { Provider } from 'react-redux';\r\n// import {createStore, compose, applyMiddleware} from 'redux';\r\n// import reducer from '../Reducer';\r\n// //모든 페이지에 공통적으로 들어가는것들을 여기다모음\r\n\r\n\r\n// const Nodebird = ({Component,store}) =>{\r\n//     return(\r\n//         <Provider store={store}>\r\n//             <Head>\r\n//                 <title>NodeBird</title>\r\n//                 <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/antd/3.22.0/antd.css\" />\r\n//             </Head>\r\n//             <AppLayout>\r\n//                 <Component />\r\n//             </AppLayout>\r\n//         </Provider>\r\n//     );\r\n// }\r\n// //store 만드는 과정 withRedux라는 고위함수를 만들어 주는데 확장자 처럼 사용되며\r\n// //state+reducer가 합쳐진 것을 모으는 곳이 store라고함\r\n// // export default withRedux((initialState,options)=>{\r\n// //     const middlewares = [];\r\n// //     const enhancer =  compose(\r\n// //         applyMiddleware(...middlewares)\r\n// //         ,typeof(window) !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? \r\n// //         window.__REDUX_DEVTOOLS_EXTENSION__():(f)=>f);\r\n// //     const store=createStore(reducer,initialState,enhancer);\r\n// // //middlewares는 state,action,reducer와 store사이 기능을 추가 변조 할수있는 역할을 가짐    \r\n// //     return store;\r\n// // })(Nodebird);\r\n\r\n\r\n// const configureStore = (initialState, options) => {\r\n//     const sagaMiddleware = createSagaMiddleware();\r\n//     const middlewares = [sagaMiddleware];\r\n//     const enhancer = process.env.NODE_ENV === 'production'\r\n//       ? compose(applyMiddleware(...middlewares))\r\n//       : compose(\r\n//         applyMiddleware(...middlewares),\r\n//         !options.isServer && typeof window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : f => f,\r\n//       );\r\n//     const store = createStore(reducer, initialState, enhancer);\r\n//     sagaMiddleware.run(rootSaga);\r\n//     return store;\r\n//   };\r\n  \r\n//   export default withRedux(configureStore)(NodeBird);"]},"metadata":{},"sourceType":"script"}