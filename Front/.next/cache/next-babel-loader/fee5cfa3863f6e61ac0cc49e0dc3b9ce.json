{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(appPost),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchAddPost),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addComment),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchAddComment),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(userSaga);\n\nimport { put, all, fork, takeLatest, delay } from 'redux-saga/effects';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS } from '../Reducer/post';\nimport axios from 'axios';\n\nfunction addPostAPI(postData) {\n  return axios.post('http://localhost:3065/api/post', postData, {\n    watchAddComment: true\n  });\n}\n\nfunction appPost(action) {\n  return _regeneratorRuntime.wrap(function appPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(addPostAPI, action.data);\n\n        case 3:\n          _context.next = 5;\n          return delay(2000);\n\n        case 5:\n          _context.next = 7;\n          return put({\n            type: ADD_POST_SUCCESS\n          });\n\n        case 7:\n          _context.next = 13;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 13;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 9]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(ADD_POST_REQUEST, appPost);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction addCommentAPI() {}\n\nfunction addComment(action) {\n  return _regeneratorRuntime.wrap(function addComment$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return delay(2000);\n\n        case 3:\n          _context3.next = 5;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: {\n              postId: action.data.postId\n            }\n          });\n\n        case 5:\n          _context3.next = 11;\n          break;\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 11;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context3.t0\n          });\n\n        case 11:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 7]]);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchAddPost), fork(watchAddComment)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["c:/ReactNodeBird/Front/sagas/post.js"],"names":["appPost","watchAddPost","addComment","watchAddComment","userSaga","put","all","fork","takeLatest","delay","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","axios","addPostAPI","postData","post","action","call","data","type","error","addCommentAPI","postId"],"mappings":";;;;yBAUUA,O;;;yBAeAC,Y;;;yBAOAC,U;;;yBAiBAC,e;;;yBAIeC,Q;;AArDzB,SAAQC,GAAR,EAAaC,GAAb,EAAkBC,IAAlB,EAAuBC,UAAvB,EAAkCC,KAAlC,QAA+C,oBAA/C;AACA,SAASC,gBAAT,EAA2BC,gBAA3B,EAA6CC,gBAA7C,EAA+DC,mBAA/D,EAAmFC,mBAAnF,EAAuGC,mBAAvG,QAAkI,iBAAlI;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,UAAT,CAAqBC,QAArB,EAA+B;AAC7B,SAAOF,KAAK,CAACG,IAAN,CAAW,gCAAX,EAA4CD,QAA5C,EAAqD;AAC1Df,IAAAA,eAAe,EAAC;AAD0C,GAArD,CAAP;AAGD;;AAED,SAAUH,OAAV,CAAkBoB,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEI,iBAAMC,IAAI,CAACJ,UAAD,EAAYG,MAAM,CAACE,IAAnB,CAAV;;AAFJ;AAAA;AAGI,iBAAMb,KAAK,CAAC,IAAD,CAAX;;AAHJ;AAAA;AAII,iBAAMJ,GAAG,CAAC;AACRkB,YAAAA,IAAI,EAACZ;AADG,WAAD,CAAT;;AAJJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAQI,iBAAMN,GAAG,CAAC;AACRkB,YAAAA,IAAI,EAACX,gBADG;AAERY,YAAAA,KAAK;AAFG,WAAD,CAAT;;AARJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeA,SAAUvB,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMO,UAAU,CAACE,gBAAD,EAAkBV,OAAlB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA,SAASyB,aAAT,GAA0B,CAEzB;;AAED,SAAUvB,UAAV,CAAqBkB,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEI,iBAAMX,KAAK,CAAC,IAAD,CAAX;;AAFJ;AAAA;AAGI,iBAAMJ,GAAG,CAAC;AACRkB,YAAAA,IAAI,EAACR,mBADG;AAERO,YAAAA,IAAI,EAAC;AACHI,cAAAA,MAAM,EAAGN,MAAM,CAACE,IAAP,CAAYI;AADlB;AAFG,WAAD,CAAT;;AAHJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAUI,iBAAMrB,GAAG,CAAC;AACRkB,YAAAA,IAAI,EAACV,mBADG;AAERW,YAAAA,KAAK;AAFG,WAAD,CAAT;;AAVJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBA,SAAUrB,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMK,UAAU,CAACM,mBAAD,EAAqBZ,UAArB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAME,GAAG,CAAC,CACRC,IAAI,CAACN,YAAD,CADI,EAERM,IAAI,CAACJ,eAAD,CAFI,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {put, all, fork,takeLatest,delay } from 'redux-saga/effects';\r\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE ,ADD_COMMENT_FAILURE,ADD_COMMENT_REQUEST,ADD_COMMENT_SUCCESS } from '../Reducer/post';\r\nimport axios from 'axios';\r\n\r\nfunction addPostAPI (postData) {\r\n  return axios.post('http://localhost:3065/api/post',postData,{\r\n    watchAddComment:true,\r\n  })\r\n}\r\n\r\nfunction* appPost(action){\r\n  try{\r\n    yield call(addPostAPI,action.data)\r\n    yield delay(2000);\r\n    yield put({\r\n      type:ADD_POST_SUCCESS,\r\n    })\r\n  }catch(e){\r\n    yield put({\r\n      type:ADD_POST_FAILURE,\r\n      error:e\r\n    })\r\n  }\r\n}\r\n\r\nfunction* watchAddPost(){\r\n  yield takeLatest(ADD_POST_REQUEST,appPost);\r\n}\r\nfunction addCommentAPI () {\r\n\r\n}\r\n\r\nfunction* addComment(action){\r\n  try{\r\n    yield delay(2000);\r\n    yield put({\r\n      type:ADD_COMMENT_SUCCESS,\r\n      data:{\r\n        postId : action.data.postId\r\n      }\r\n    })\r\n  }catch(e){\r\n    yield put({\r\n      type:ADD_COMMENT_FAILURE,\r\n      error:e\r\n    })\r\n  }\r\n}\r\n\r\nfunction* watchAddComment(){\r\n  yield takeLatest(ADD_COMMENT_REQUEST,addComment);\r\n}\r\n\r\nexport default function* userSaga(){\r\n    yield all([\r\n      fork(watchAddPost),\r\n      fork(watchAddComment),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}