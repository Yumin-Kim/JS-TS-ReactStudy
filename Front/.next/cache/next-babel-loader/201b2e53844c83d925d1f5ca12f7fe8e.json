{"ast":null,"code":"var _jsxFileName = \"c:\\\\ReactNodeBird\\\\Front\\\\components\\\\PostCard.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport { Card, Icon, Button, Avatar, Divider, Form, Input, List, Comment } from \"antd\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { ADD_POST_REQUEST, ADD_COMMENT_REQUEST } from \"../Reducer/post\";\n\nvar PostCard = function PostCard(_ref) {\n  var post = _ref.post;\n\n  var _useState = useState(false),\n      commentFormOpened = _useState[0],\n      setCommentOpened = _useState[1];\n\n  var _useState2 = useState(\"\"),\n      commentText = _useState2[0],\n      setCommentText = _useState2[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      commentAdded = _useSelector2.commentAdded,\n      isAddingComment = _useSelector2.isAddingComment;\n\n  var dispatch = useDispatch();\n  var onToggleComment = useCallback(function () {\n    setCommentOpened(function (prev) {\n      return !prev;\n    });\n  }, []);\n  var onSubmitComment = useCallback(function (e) {\n    e.preventDefault();\n    console.log(me);\n\n    if (!me) {\n      return alert('로그인 필요합니다');\n    }\n\n    console.log(post);\n    dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id\n      }\n    });\n  }, [me && me.id]);\n  var onChangeCommentText = useCallback(function (e) {\n    setCommentText(e.target.value);\n  }, []);\n  useEffect(function () {\n    setCommentText('');\n  }, [commentAdded === true]);\n  console.log(post.createdAt);\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, __jsx(Card, {\n    key: +post.createdAt,\n    cover: post.img && __jsx(\"img\", {\n      alt: \"example\",\n      src: post.img,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }),\n    actions: [__jsx(Icon, {\n      type: \"retweet\",\n      key: \"retweet\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }), __jsx(Icon, {\n      type: \"heart\",\n      key: \"heart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }), __jsx(Icon, {\n      type: \"message\",\n      key: \"message\",\n      onClick: onToggleComment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }), __jsx(Icon, {\n      type: \"ellipsis\",\n      key: \"ellipsis\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    })],\n    extra: __jsx(Button, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, \"\\uD314\\uB85C\\uC6B0\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Avatar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, post.User.nickname[0]),\n    title: post.User.nickname,\n    description: __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, post.content),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  })), commentFormOpened && __jsx(React.Fragment, null, __jsx(Form, {\n    onSubmit: onSubmitComment,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, __jsx(Form.Item, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, __jsx(Input.TextArea, {\n    rows: 4,\n    value: commentText,\n    onChange: onChangeCommentText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  })), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: isAddingComment,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, \" \\uC785\\uB825!! \")), __jsx(List, {\n    header: \"\".concat(post.Comments ? post.Comments.length : 0, \" \\uB313\\uAE00\"),\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments || [],\n    renderItem: function renderItem(item) {\n      return __jsx(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, __jsx(Comment, {\n        author: item.User.nickname,\n        avatar: __jsx(Avatar, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74\n          },\n          __self: this\n        }, item.User.nickname[0]),\n        content: item.content,\n        datetime: item.createAt,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  })));\n};\n\nexport default PostCard;","map":{"version":3,"sources":["c:/ReactNodeBird/Front/components/PostCard.js"],"names":["React","useState","useCallback","useEffect","Card","Icon","Button","Avatar","Divider","Form","Input","List","Comment","useSelector","useDispatch","ADD_POST_REQUEST","ADD_COMMENT_REQUEST","PostCard","post","commentFormOpened","setCommentOpened","commentText","setCommentText","state","user","me","commentAdded","isAddingComment","dispatch","onToggleComment","prev","onSubmitComment","e","preventDefault","console","log","alert","type","data","postId","id","onChangeCommentText","target","value","createdAt","img","User","nickname","content","Comments","length","item","createAt"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,EAAuCC,SAAvC,QAAwD,OAAxD;AACA,SAASC,IAAT,EAAeC,IAAf,EAAqBC,MAArB,EAA6BC,MAA7B,EAAqCC,OAArC,EAA8CC,IAA9C,EAAoDC,KAApD,EAA2DC,IAA3D,EAAgEC,OAAhE,QAA+E,MAA/E;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,gBAAT,EAA2BC,mBAA3B,QAAsD,iBAAtD;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,OAAc;AAAA,MAAXC,IAAW,QAAXA,IAAW;;AAAA,kBACiBjB,QAAQ,CAAC,KAAD,CADzB;AAAA,MACtBkB,iBADsB;AAAA,MACHC,gBADG;;AAAA,mBAESnB,QAAQ,CAAC,EAAD,CAFjB;AAAA,MAEtBoB,WAFsB;AAAA,MAETC,cAFS;;AAAA,qBAGdT,WAAW,CAAC,UAAAU,KAAK;AAAA,WAAIA,KAAK,CAACC,IAAV;AAAA,GAAN,CAHG;AAAA,MAGrBC,EAHqB,gBAGrBA,EAHqB;;AAAA,sBAIaZ,WAAW,CAAC,UAAAU,KAAK;AAAA,WAAIA,KAAK,CAACL,IAAV;AAAA,GAAN,CAJxB;AAAA,MAIrBQ,YAJqB,iBAIrBA,YAJqB;AAAA,MAIPC,eAJO,iBAIPA,eAJO;;AAK7B,MAAMC,QAAQ,GAAGd,WAAW,EAA5B;AAEA,MAAMe,eAAe,GAAG3B,WAAW,CAAC,YAAM;AACxCkB,IAAAA,gBAAgB,CAAC,UAAAU,IAAI;AAAA,aAAI,CAACA,IAAL;AAAA,KAAL,CAAhB;AACD,GAFkC,EAEhC,EAFgC,CAAnC;AAIA,MAAMC,eAAe,GAAG7B,WAAW,CAAC,UAAC8B,CAAD,EAAM;AACtCA,IAAAA,CAAC,CAACC,cAAF;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYV,EAAZ;;AACA,QAAG,CAACA,EAAJ,EAAO;AACH,aAAOW,KAAK,CAAC,WAAD,CAAZ;AACH;;AACDF,IAAAA,OAAO,CAACC,GAAR,CAAYjB,IAAZ;AACAU,IAAAA,QAAQ,CAAC;AACLS,MAAAA,IAAI,EAACrB,mBADA;AAELsB,MAAAA,IAAI,EAAE;AACFC,QAAAA,MAAM,EAACrB,IAAI,CAACsB;AADV;AAFD,KAAD,CAAR;AAMH,GAbkC,EAajC,CAACf,EAAE,IAAIA,EAAE,CAACe,EAAV,CAbiC,CAAnC;AAeA,MAAMC,mBAAmB,GAAGvC,WAAW,CAAC,UAAC8B,CAAD,EAAM;AAC1CV,IAAAA,cAAc,CAACU,CAAC,CAACU,MAAF,CAASC,KAAV,CAAd;AACH,GAFsC,EAErC,EAFqC,CAAvC;AAIAxC,EAAAA,SAAS,CAAC,YAAI;AACZmB,IAAAA,cAAc,CAAC,EAAD,CAAd;AACD,GAFQ,EAEP,CAACI,YAAY,KAAK,IAAlB,CAFO,CAAT;AAGAQ,EAAAA,OAAO,CAACC,GAAR,CAAYjB,IAAI,CAAC0B,SAAjB;AACA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AACE,IAAA,GAAG,EAAE,CAAC1B,IAAI,CAAC0B,SADb;AAEE,IAAA,KAAK,EAAE1B,IAAI,CAAC2B,GAAL,IAAY;AAAK,MAAA,GAAG,EAAC,SAAT;AAAmB,MAAA,GAAG,EAAE3B,IAAI,CAAC2B,GAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFrB;AAGE,IAAA,OAAO,EAAE,CACP,MAAC,IAAD;AAAM,MAAA,IAAI,EAAC,SAAX;AAAqB,MAAA,GAAG,EAAC,SAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADO,EAEP,MAAC,IAAD;AAAM,MAAA,IAAI,EAAC,OAAX;AAAmB,MAAA,GAAG,EAAC,OAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFO,EAGP,MAAC,IAAD;AAAM,MAAA,IAAI,EAAC,SAAX;AAAqB,MAAA,GAAG,EAAC,SAAzB;AAAmC,MAAA,OAAO,EAAEhB,eAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHO,EAIP,MAAC,IAAD;AAAM,MAAA,IAAI,EAAC,UAAX;AAAsB,MAAA,GAAG,EAAC,UAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJO,CAHX;AASE,IAAA,KAAK,EAAE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BATT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAWE,MAAC,IAAD,CAAM,IAAN;AACE,IAAA,MAAM,EAAE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAASX,IAAI,CAAC4B,IAAL,CAAUC,QAAV,CAAmB,CAAnB,CAAT,CADV;AAEE,IAAA,KAAK,EAAE7B,IAAI,CAAC4B,IAAL,CAAUC,QAFnB;AAGF,IAAA,WAAW,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAM7B,IAAI,CAAC8B,OAAX,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXF,CADF,EAkBG7B,iBAAiB,IAClB,4BACE,MAAC,IAAD;AAAM,IAAA,QAAQ,EAAIY,eAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,KAAD,CAAO,QAAP;AAAgB,IAAA,IAAI,EAAE,CAAtB;AAAyB,IAAA,KAAK,EAAEV,WAAhC;AAA6C,IAAA,QAAQ,EAAEoB,mBAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,EAII,MAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,SAAb;AAAuB,IAAA,QAAQ,EAAC,QAAhC;AAAyC,IAAA,OAAO,EAAEd,eAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAJJ,CADF,EAOE,MAAC,IAAD;AACI,IAAA,MAAM,YAAMT,IAAI,CAAC+B,QAAL,GAAgB/B,IAAI,CAAC+B,QAAL,CAAcC,MAA9B,GAAuC,CAA7C,kBADV;AAEI,IAAA,UAAU,EAAC,YAFf;AAGI,IAAA,UAAU,EAAEhC,IAAI,CAAC+B,QAAL,IAAiB,EAHjC;AAII,IAAA,UAAU,EAAE,oBAAAE,IAAI;AAAA,aAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACf,MAAC,OAAD;AACI,QAAA,MAAM,EAAIA,IAAI,CAACL,IAAL,CAAUC,QADxB;AAEI,QAAA,MAAM,EAAI,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAASI,IAAI,CAACL,IAAL,CAAUC,QAAV,CAAmB,CAAnB,CAAT,CAFd;AAGI,QAAA,OAAO,EAAII,IAAI,CAACH,OAHpB;AAII,QAAA,QAAQ,EAAIG,IAAI,CAACC,QAJrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADe,CAAH;AAAA,KAJpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,CAnBF,CADF;AA2CD,CA7ED;;AA+EA,eAAenC,QAAf","sourcesContent":["import React, { useState, useCallback, useEffect } from \"react\";\r\nimport { Card, Icon, Button, Avatar, Divider, Form, Input, List,Comment } from \"antd\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { ADD_POST_REQUEST, ADD_COMMENT_REQUEST } from \"../Reducer/post\";\r\n\r\nconst PostCard = ({ post }) => {\r\n  const [commentFormOpened, setCommentOpened] = useState(false);\r\n  const [commentText, setCommentText] = useState(\"\");\r\n  const { me } = useSelector(state => state.user);\r\n  const { commentAdded ,isAddingComment } = useSelector(state => state.post);\r\n  const dispatch = useDispatch();\r\n\r\n  const onToggleComment = useCallback(() => {\r\n    setCommentOpened(prev => !prev);\r\n  }, []);\r\n\r\n  const onSubmitComment = useCallback((e) =>{\r\n      e.preventDefault();\r\n      console.log(me)\r\n      if(!me){\r\n          return alert('로그인 필요합니다');\r\n      }\r\n      console.log(post)\r\n      dispatch({\r\n          type:ADD_COMMENT_REQUEST,\r\n          data: {\r\n              postId:post.id\r\n          }\r\n      })\r\n  },[me && me.id])\r\n\r\n  const onChangeCommentText = useCallback((e) =>{\r\n      setCommentText(e.target.value)\r\n  },[]);\r\n\r\n  useEffect(()=>{\r\n    setCommentText('');\r\n  },[commentAdded === true])\r\n  console.log(post.createdAt)\r\n  return (\r\n    <div>\r\n      <Card\r\n        key={+post.createdAt}\r\n        cover={post.img && <img alt=\"example\" src={post.img} />}\r\n        actions={[\r\n          <Icon type=\"retweet\" key=\"retweet\" />,\r\n          <Icon type=\"heart\" key=\"heart\" />,\r\n          <Icon type=\"message\" key=\"message\" onClick={onToggleComment} />,\r\n          <Icon type=\"ellipsis\" key=\"ellipsis\" />\r\n        ]}\r\n        extra={<Button>팔로우</Button>}\r\n      >\r\n        <Card.Meta\r\n          avatar={<Avatar>{post.User.nickname[0]}</Avatar>}\r\n          title={post.User.nickname}\r\n      description={<div>{post.content}</div>}\r\n        />\r\n      </Card>\r\n      {commentFormOpened && \r\n      <>\r\n        <Form onSubmit = {onSubmitComment} >\r\n            <Form.Item>\r\n                <Input.TextArea rows={4} value={commentText} onChange={onChangeCommentText} />\r\n            </Form.Item>\r\n            <Button type=\"primary\" htmlType=\"submit\" loading={isAddingComment} > 입력!! </Button>\r\n        </Form>\r\n        <List \r\n            header ={`${post.Comments ? post.Comments.length : 0 } 댓글`}\r\n            itemLayout=\"horizontal\"\r\n            dataSource={post.Comments || [] }\r\n            renderItem={item=>(<li>\r\n                <Comment\r\n                    author = {item.User.nickname}\r\n                    avatar = {<Avatar>{item.User.nickname[0]}</Avatar>}\r\n                    content = {item.content}\r\n                    datetime = {item.createAt}\r\n                />\r\n            </li>)}\r\n         />\r\n      </>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostCard;\r\n"]},"metadata":{},"sourceType":"module"}