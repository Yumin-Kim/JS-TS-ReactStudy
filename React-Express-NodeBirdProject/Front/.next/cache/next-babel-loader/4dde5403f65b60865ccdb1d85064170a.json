{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport Head from 'next/head';\nimport PropTypes from 'prop-types';\nimport AppLayout from '../components/AppLayout';\nimport withRedux from 'next-redux-wrapper';\nimport withReduxsaga from 'next-redux-saga';\nimport { Provider } from 'react-redux';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport reducer from '../Reducer';\nimport createSagaMiddleware from 'redux-saga';\nimport rootSaga from '../sagas';\nimport { LOAD_USER_POSTS_REQUEST } from '../Reducer/post';\nimport { LOAD_USER_REQUEST } from '../Reducer/user';\nimport Axios from 'axios'; //모든 페이지에 공통적으로 들어가는것들을 여기다모음\n\nconst Nodebird = ({\n  Component,\n  store,\n  pageProps\n}) => {\n  //Component는 Next.js에서 넣어 주는 멤버 >> 말그대로 컴포넌트 전체를 넣어 주며 isServer router Component 등을 넗어준다\n  return __jsx(Provider, {\n    store: store\n  }, __jsx(Head, null, __jsx(\"title\", null, \"NodeBird\"), __jsx(\"link\", {\n    rel: \"stylesheet\",\n    href: \"https://cdnjs.cloudflare.com/ajax/libs/antd/3.16.2/antd.css\"\n  }), __jsx(\"link\", {\n    rel: \"stylesheet\",\n    type: \"text/css\",\n    charSet: \"UTF-8\",\n    href: \"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick.min.css\"\n  }), __jsx(\"link\", {\n    rel: \"stylesheet\",\n    type: \"text/css\",\n    href: \"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick-theme.min.css\"\n  })), __jsx(AppLayout, null, __jsx(Component, pageProps)));\n}; //store 만드는 과정 withRedux라는 고위함수를 만들어 주는데 확장자 처럼 사용되며\n//state+reducer가 합쳐진 것을 모으는 곳이 store라고함\n// export default withRedux((initialState,options)=>{\n//     const middlewares = [];\n//     const enhancer =  compose(\n//         applyMiddleware(...middlewares)\n//         ,!options.isServer && window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? \n//         window.__REDUX_DEVTOOLS_EXTENSION__():(f)=>f);\n//     const store=createStore(reducer,initialState,enhancer);\n// //middlewares는 state,action,reducer와 store사이 기능을 추가 변조 할수있는 역할을 가짐    \n//     return store;\n// })(Nodebird);\n\n\nNodebird.getInitialProps = async context => {\n  const {\n    ctx,\n    Component\n  } = context;\n  let pageProps = {};\n  const state = ctx.store.getState();\n  const cookie = ctx.isServer ? ctx.req.headers.cookie : '';\n\n  if (ctx.isServer && cookie) {\n    Axios.defaults.headers.Cookie = cookie;\n  }\n\n  if (!state.user.me) {\n    ctx.store.dispatch({\n      type: LOAD_USER_REQUEST\n    });\n  }\n\n  if (Component.getInitialProps) {\n    pageProps = await Component.getInitialProps(ctx);\n  }\n\n  return {\n    pageProps\n  };\n};\n\nconst configureStore = (initialState, options) => {\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = [sagaMiddleware];\n  const enhancer = false ? compose(applyMiddleware(...middlewares)) : compose(applyMiddleware(...middlewares), !options.isServer && typeof window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : f => f);\n  const store = createStore(reducer, initialState, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nexport default withRedux(configureStore)(withReduxsaga(Nodebird));","map":{"version":3,"sources":["C:/ReactNodeBird/Front/pages/_app.js"],"names":["React","Head","PropTypes","AppLayout","withRedux","withReduxsaga","Provider","createStore","compose","applyMiddleware","reducer","createSagaMiddleware","rootSaga","LOAD_USER_POSTS_REQUEST","LOAD_USER_REQUEST","Axios","Nodebird","Component","store","pageProps","getInitialProps","context","ctx","state","getState","cookie","isServer","req","headers","defaults","Cookie","user","me","dispatch","type","configureStore","initialState","options","sagaMiddleware","middlewares","enhancer","window","__REDUX_DEVTOOLS_EXTENSION__","f","sagaTask","run"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Head from 'next/head';\r\nimport PropTypes from 'prop-types';\r\nimport AppLayout from '../components/AppLayout';\r\nimport withRedux from 'next-redux-wrapper';\r\nimport withReduxsaga from 'next-redux-saga';\r\nimport { Provider } from 'react-redux';\r\nimport {createStore, compose, applyMiddleware} from 'redux';\r\nimport reducer from '../Reducer';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport rootSaga from '../sagas';\r\nimport { LOAD_USER_POSTS_REQUEST } from '../Reducer/post';\r\nimport { LOAD_USER_REQUEST } from '../Reducer/user';\r\nimport Axios from 'axios';\r\n\r\n//모든 페이지에 공통적으로 들어가는것들을 여기다모음\r\n\r\n\r\nconst Nodebird = ({Component ,store,pageProps}) =>{\r\n    //Component는 Next.js에서 넣어 주는 멤버 >> 말그대로 컴포넌트 전체를 넣어 주며 isServer router Component 등을 넗어준다\r\n    return(\r\n        <Provider store={store}>\r\n            <Head>\r\n            <title>NodeBird</title>\r\n        <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/antd/3.16.2/antd.css\" />\r\n        <link rel=\"stylesheet\" type=\"text/css\" charSet=\"UTF-8\" href=\"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick.min.css\" />\r\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick-theme.min.css\" />\r\n            </Head>\r\n            <AppLayout>\r\n                <Component {...pageProps} />\r\n            </AppLayout>\r\n        </Provider>\r\n    );\r\n}\r\n//store 만드는 과정 withRedux라는 고위함수를 만들어 주는데 확장자 처럼 사용되며\r\n//state+reducer가 합쳐진 것을 모으는 곳이 store라고함\r\n// export default withRedux((initialState,options)=>{\r\n//     const middlewares = [];\r\n//     const enhancer =  compose(\r\n//         applyMiddleware(...middlewares)\r\n//         ,!options.isServer && window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? \r\n//         window.__REDUX_DEVTOOLS_EXTENSION__():(f)=>f);\r\n//     const store=createStore(reducer,initialState,enhancer);\r\n// //middlewares는 state,action,reducer와 store사이 기능을 추가 변조 할수있는 역할을 가짐    \r\n//     return store;\r\n// })(Nodebird);\r\n\r\n\r\nNodebird.getInitialProps = async (context) => {\r\n    const { ctx, Component } = context;\r\n    let pageProps = {};\r\n    const state = ctx.store.getState();\r\n    const cookie = ctx.isServer ? ctx.req.headers.cookie : '';\r\n    if(ctx.isServer && cookie){\r\n        Axios.defaults.headers.Cookie = cookie;\r\n    }\r\n    if(!state.user.me){\r\n        ctx.store.dispatch({\r\n            type:LOAD_USER_REQUEST\r\n        })\r\n    }\r\n    if (Component.getInitialProps) {\r\n      pageProps = await Component.getInitialProps(ctx);\r\n    }\r\n    \r\n    return { pageProps };\r\n  };\r\n\r\nconst configureStore = (initialState, options) => {\r\n    const sagaMiddleware = createSagaMiddleware();\r\n    const middlewares = [sagaMiddleware];\r\n    const enhancer = process.env.NODE_ENV === 'production'\r\n      ? compose(applyMiddleware(...middlewares))\r\n      : compose(\r\n        applyMiddleware(...middlewares),\r\n        !options.isServer && typeof window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : f => f,\r\n      );\r\n    const store = createStore(reducer, initialState, enhancer);\r\n    store.sagaTask = sagaMiddleware.run(rootSaga);\r\n    return store;\r\n  };\r\n  \r\n  export default withRedux(configureStore)(withReduxsaga(Nodebird));"]},"metadata":{},"sourceType":"module"}