{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport Link from \"next/link\";\nimport { Card, Icon, Button, Avatar, Divider, Form, Input, List, Comment, Popover } from \"antd\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { ADD_POST_REQUEST, ADD_COMMENT_REQUEST, LOAD_COMMENTS_REQUEST, UNLIKE_POST_REQUEST, LIKE_POST_REQUEST, RETWEET_REQUEST, REMOVE_POST_REQUEST } from \"../Reducer/post\";\nimport PostImages from \"./PostImages\";\nimport PostCardCotent from \"./PostCardContent\";\n\nvar PostCard = function PostCard(_ref) {\n  var post = _ref.post;\n\n  var _useState = useState(false),\n      commentFormOpened = _useState[0],\n      setCommentOpened = _useState[1];\n\n  var _useState2 = useState(\"\"),\n      commentText = _useState2[0],\n      setCommentText = _useState2[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      commentAdded = _useSelector2.commentAdded,\n      isAddingComment = _useSelector2.isAddingComment;\n\n  var dispatch = useDispatch();\n  var liked = me && post.Likers && post.Likers.find(function (v) {\n    return v.id === me.id;\n  });\n  var onRemovepost = useCallback(function (userId) {\n    return function () {\n      dispatch({\n        type: REMOVE_POST_REQUEST,\n        data: userId\n      });\n    };\n  }, []);\n  var onToggleComment = useCallback(function () {\n    setCommentOpened(function (prev) {\n      return !prev;\n    });\n\n    if (!commentFormOpened) {\n      dispatch({\n        type: LOAD_COMMENTS_REQUEST,\n        data: post.id\n      });\n    }\n  }, []);\n  var onSubmitComment = useCallback(function (e) {\n    e.preventDefault();\n\n    if (!me) {\n      return alert(\"로그인 필요합니다\");\n    }\n\n    dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id,\n        content: commentText\n      }\n    });\n  }, [me && me.id, commentText]);\n  var onChangeCommentText = useCallback(function (e) {\n    setCommentText(e.target.value);\n  }, []);\n  useEffect(function () {\n    setCommentText(\"\");\n  }, [commentAdded === true]);\n  var onToggleLike = useCallback(function () {\n    console.log(post.User.id, me.id);\n\n    if (!me) {\n      return alert(\"로그인이 필요 합니다\");\n    }\n\n    console.log(post);\n\n    if (liked) {\n      return dispatch({\n        type: UNLIKE_POST_REQUEST,\n        data: post.id\n      });\n    } else {\n      return dispatch({\n        type: LIKE_POST_REQUEST,\n        data: post.id\n      });\n    }\n  }, [me && me.id, liked]);\n  var onRetweet = useCallback(function () {\n    if (!me) {\n      return alert(\"로그인이 필요합니다\");\n    }\n\n    return dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id\n    });\n  }, [me && me.id, post.id]);\n  return (//   <div>\n    //     <Card\n    //       key={+post.createdAt}\n    //       cover={post.Images[0] && <PostImages images={post.Images} />}\n    //       actions={[\n    //         <Icon type=\"retweet\" key=\"retweet\" onClick={onRetweet} />,\n    //         <Icon\n    //           type=\"heart\"\n    //           key=\"heart\"\n    //           theme={liked ? \"twoTone\" : \"outlined\"}\n    //           twoToneColor=\"#eb2f96\"\n    //           onClick={onToggleLike}\n    //         />,\n    //         <Icon type=\"message\" key=\"message\" onClick={onToggleComment} />,\n    //         <Popover\n    //           key=\"ellipsis\"\n    //           content={(\n    //             <Button.Group>\n    //               {me && post.UserId === me.id\n    //                 ? (\n    //                   <>\n    //                     <Button>수정</Button>\n    //                     <Button type=\"danger\" onClick={onRemovepost(post.id)}>삭제</Button>\n    //                   </>\n    //                 )\n    //                 : <Button>신고</Button>}\n    //             </Button.Group>\n    //           )}\n    //         >\n    //           <Icon type=\"ellipsis\" />\n    //         </Popover>,\n    //       ]}\n    //       title={post.RetweetId ? `${post.User.nickname}님이 리트윗 했습니다` : null}\n    //       extra={<Button>팔로우</Button>}\n    //     >\n    //       {post.RetweetId && post.Retweet\n    //         ? (\n    //           <Card\n    //             // cover={post.Retweet.Images[0] !== undefined ? <PostImages images={post.Retweet.Images} />  : null}\n    //           >\n    //             <Card.Meta\n    //               avatar={(\n    //                 <Link\n    //                   href={{ pathname: '/user', query: { id: post.Retweet.User.id } }}\n    //                   as={`/user/${post.Retweet.User.id}`}\n    //                 >\n    //                   <a><Avatar>{post.Retweet.User.nickname[0]}</Avatar></a>\n    //                 </Link>\n    //               )}\n    //               title={post.Retweet.User.nickname}\n    //               description={<PostCardCotent postData={post.Retweet.content} />} // a tag x -> Link\n    //             />\n    //           </Card>\n    //         )\n    //         : (\n    //           <Card.Meta\n    //             avatar={(\n    //               <Link href={{ pathname: '/user', query: { id: post.User.id } }} as={`/user/${post.User.id}`}>\n    //                 <a><Avatar>{post.User.nickname[0]}</Avatar></a>\n    //               </Link>\n    //             )}\n    //             title={post.User.nickname}\n    //             description={<PostCardCotent postData={post.content} />} // a tag x -> Link\n    //           />\n    //         )}\n    //     </Card>\n    //     {commentFormOpened && (\n    //       <>\n    //         <Form onSubmit={onSubmitComment}>\n    //           <Form.Item>\n    //             <Input.TextArea\n    //               rows={4}\n    //               value={commentText}\n    //               onChange={onChangeCommentText}\n    //             />\n    //           </Form.Item>\n    //           <Button type=\"primary\" htmlType=\"submit\" loading={isAddingComment}>\n    //             {\" \"}\n    //             입력!!{\" \"}\n    //           </Button>\n    //         </Form>\n    //         {/* <List\n    //           header={`${post.Comments ? post.Comments.length : 0} 댓글`}\n    //           itemLayout=\"horizontal\"\n    //           dataSource={post.Comments || []}\n    //           renderItem={item => (\n    //             <li>\n    //               <Comment\n    //                 author={item.User.nickname}\n    //                 avatar={\n    //                   <Link\n    //                     href={{ pathname: \"/user\", query: { id: item.User.id } }}\n    //                     as={`/user/${item.User.id}`}\n    //                   >\n    //                     <a>\n    //                       <Avatar>{item.User.nickname[0]}</Avatar>\n    //                     </a>\n    //                   </Link>\n    //                 }\n    //                 content={item.content}\n    //                 datetime={item.createAt}\n    //               />\n    //             </li>\n    //           )} */}\n    //         />\n    //       </>\n    //     )}\n    //   </div>\n    __jsx(React.Fragment, null, post.id)\n  );\n};\n\nexport default PostCard;","map":{"version":3,"sources":["C:/ReactNodeBird/Front/components/PostCard.js"],"names":["React","useState","useCallback","useEffect","Link","Card","Icon","Button","Avatar","Divider","Form","Input","List","Comment","Popover","useSelector","useDispatch","ADD_POST_REQUEST","ADD_COMMENT_REQUEST","LOAD_COMMENTS_REQUEST","UNLIKE_POST_REQUEST","LIKE_POST_REQUEST","RETWEET_REQUEST","REMOVE_POST_REQUEST","PostImages","PostCardCotent","PostCard","post","commentFormOpened","setCommentOpened","commentText","setCommentText","state","user","me","commentAdded","isAddingComment","dispatch","liked","Likers","find","v","id","onRemovepost","userId","type","data","onToggleComment","prev","onSubmitComment","e","preventDefault","alert","postId","content","onChangeCommentText","target","value","onToggleLike","console","log","User","onRetweet"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from \"react\";\r\nimport Link from \"next/link\";\r\nimport {\r\n  Card,\r\n  Icon,\r\n  Button,\r\n  Avatar,\r\n  Divider,\r\n  Form,\r\n  Input,\r\n  List,\r\n  Comment,\r\n  Popover\r\n} from \"antd\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  ADD_POST_REQUEST,\r\n  ADD_COMMENT_REQUEST,\r\n  LOAD_COMMENTS_REQUEST,\r\n  UNLIKE_POST_REQUEST,\r\n  LIKE_POST_REQUEST,\r\n  RETWEET_REQUEST,\r\n  REMOVE_POST_REQUEST\r\n} from \"../Reducer/post\";\r\nimport PostImages from \"./PostImages\";\r\nimport PostCardCotent from \"./PostCardContent\";\r\n\r\nconst PostCard = ({ post }) => {\r\n  const [commentFormOpened, setCommentOpened] = useState(false);\r\n  const [commentText, setCommentText] = useState(\"\");\r\n  const { me } = useSelector(state => state.user);\r\n  const { commentAdded, isAddingComment } = useSelector(state => state.post);\r\n  const dispatch = useDispatch();\r\n  const liked = me && post.Likers && post.Likers.find(v => v.id === me.id);\r\n\r\n  const onRemovepost = useCallback(userId => () => {\r\n    dispatch({\r\n      type:REMOVE_POST_REQUEST,\r\n      data:userId,\r\n    })\r\n  },[]);\r\n\r\n  const onToggleComment = useCallback(() => {\r\n    setCommentOpened(prev => !prev);\r\n    if (!commentFormOpened) {\r\n      dispatch({\r\n        type: LOAD_COMMENTS_REQUEST,\r\n        data: post.id\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  const onSubmitComment = useCallback(\r\n    e => {\r\n      e.preventDefault();\r\n      if (!me) {\r\n        return alert(\"로그인 필요합니다\");\r\n      }\r\n      dispatch({\r\n        type: ADD_COMMENT_REQUEST,\r\n        data: {\r\n          postId: post.id,\r\n          content: commentText\r\n        }\r\n      });\r\n    },\r\n    [me && me.id, commentText]\r\n  );\r\n\r\n  const onChangeCommentText = useCallback(e => {\r\n    setCommentText(e.target.value);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setCommentText(\"\");\r\n  }, [commentAdded === true]);\r\n\r\n  const onToggleLike = useCallback(() => {\r\n    console.log(post.User.id, me.id);\r\n    if (!me) {\r\n      return alert(\"로그인이 필요 합니다\");\r\n    }\r\n    console.log(post);\r\n    if (liked) {\r\n      return dispatch({\r\n        type: UNLIKE_POST_REQUEST,\r\n        data: post.id\r\n      });\r\n    } else {\r\n      return dispatch({\r\n        type: LIKE_POST_REQUEST,\r\n        data: post.id\r\n      });\r\n    }\r\n  }, [me && me.id, liked]);\r\n\r\n  const onRetweet = useCallback(() => {\r\n    if (!me) {\r\n      return alert(\"로그인이 필요합니다\");\r\n    }\r\n    return dispatch({\r\n      type: RETWEET_REQUEST,\r\n      data: post.id\r\n    });\r\n  }, [me && me.id, post.id]);\r\n  return (\r\n  //   <div>\r\n  //     <Card\r\n  //       key={+post.createdAt}\r\n  //       cover={post.Images[0] && <PostImages images={post.Images} />}\r\n  //       actions={[\r\n  //         <Icon type=\"retweet\" key=\"retweet\" onClick={onRetweet} />,\r\n  //         <Icon\r\n  //           type=\"heart\"\r\n  //           key=\"heart\"\r\n  //           theme={liked ? \"twoTone\" : \"outlined\"}\r\n  //           twoToneColor=\"#eb2f96\"\r\n  //           onClick={onToggleLike}\r\n  //         />,\r\n  //         <Icon type=\"message\" key=\"message\" onClick={onToggleComment} />,\r\n  //         <Popover\r\n  //           key=\"ellipsis\"\r\n  //           content={(\r\n  //             <Button.Group>\r\n  //               {me && post.UserId === me.id\r\n  //                 ? (\r\n  //                   <>\r\n  //                     <Button>수정</Button>\r\n  //                     <Button type=\"danger\" onClick={onRemovepost(post.id)}>삭제</Button>\r\n  //                   </>\r\n  //                 )\r\n  //                 : <Button>신고</Button>}\r\n  //             </Button.Group>\r\n  //           )}\r\n  //         >\r\n  //           <Icon type=\"ellipsis\" />\r\n  //         </Popover>,\r\n  //       ]}\r\n  //       title={post.RetweetId ? `${post.User.nickname}님이 리트윗 했습니다` : null}\r\n  //       extra={<Button>팔로우</Button>}\r\n  //     >\r\n  //       {post.RetweetId && post.Retweet\r\n  //         ? (\r\n  //           <Card\r\n  //             // cover={post.Retweet.Images[0] !== undefined ? <PostImages images={post.Retweet.Images} />  : null}\r\n  //           >\r\n  //             <Card.Meta\r\n  //               avatar={(\r\n  //                 <Link\r\n  //                   href={{ pathname: '/user', query: { id: post.Retweet.User.id } }}\r\n  //                   as={`/user/${post.Retweet.User.id}`}\r\n  //                 >\r\n  //                   <a><Avatar>{post.Retweet.User.nickname[0]}</Avatar></a>\r\n  //                 </Link>\r\n  //               )}\r\n  //               title={post.Retweet.User.nickname}\r\n  //               description={<PostCardCotent postData={post.Retweet.content} />} // a tag x -> Link\r\n  //             />\r\n  //           </Card>\r\n  //         )\r\n  //         : (\r\n  //           <Card.Meta\r\n  //             avatar={(\r\n  //               <Link href={{ pathname: '/user', query: { id: post.User.id } }} as={`/user/${post.User.id}`}>\r\n  //                 <a><Avatar>{post.User.nickname[0]}</Avatar></a>\r\n  //               </Link>\r\n  //             )}\r\n  //             title={post.User.nickname}\r\n  //             description={<PostCardCotent postData={post.content} />} // a tag x -> Link\r\n  //           />\r\n  //         )}\r\n  //     </Card>\r\n  //     {commentFormOpened && (\r\n  //       <>\r\n  //         <Form onSubmit={onSubmitComment}>\r\n  //           <Form.Item>\r\n  //             <Input.TextArea\r\n  //               rows={4}\r\n  //               value={commentText}\r\n  //               onChange={onChangeCommentText}\r\n  //             />\r\n  //           </Form.Item>\r\n  //           <Button type=\"primary\" htmlType=\"submit\" loading={isAddingComment}>\r\n  //             {\" \"}\r\n  //             입력!!{\" \"}\r\n  //           </Button>\r\n  //         </Form>\r\n  //         {/* <List\r\n  //           header={`${post.Comments ? post.Comments.length : 0} 댓글`}\r\n  //           itemLayout=\"horizontal\"\r\n  //           dataSource={post.Comments || []}\r\n  //           renderItem={item => (\r\n  //             <li>\r\n  //               <Comment\r\n  //                 author={item.User.nickname}\r\n  //                 avatar={\r\n  //                   <Link\r\n  //                     href={{ pathname: \"/user\", query: { id: item.User.id } }}\r\n  //                     as={`/user/${item.User.id}`}\r\n  //                   >\r\n  //                     <a>\r\n  //                       <Avatar>{item.User.nickname[0]}</Avatar>\r\n  //                     </a>\r\n  //                   </Link>\r\n  //                 }\r\n  //                 content={item.content}\r\n  //                 datetime={item.createAt}\r\n  //               />\r\n  //             </li>\r\n  //           )} */}\r\n  //         />\r\n  //       </>\r\n  //     )}\r\n  //   </div>\r\n  <>\r\n  {post.id}\r\n  </>\r\n  );\r\n};\r\n\r\nexport default PostCard;\r\n"]},"metadata":{},"sourceType":"module"}