{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// export const initialState={\n//     mainPosts: [{\n//         User: {\n//             id: 1,\n//             nickname: 'dbals',\n//             content: '첫 번째 게시글',\n//             img: 'https://cdn.crowdpic.net/detail-thumb/thumb_d_FF1D6AD8B887EC2359A69C049ECA2A1D.jpg'\n//         },\n//         content: '첫 번째 게시글',\n//         img: 'https://cdn.crowdpic.net/detail-thumb/thumb_d_FF1D6AD8B887EC2359A69C049ECA2A1D.jpg'\n//     }],\n//     imagePaths: [],\n//     addPostErrorReason : false,\n//     isAddingPost: false,\n// };\nimport produce from 'immer';\nexport const initialState = {\n  mainPosts: [],\n  // 화면에 보일 포스트들\n  imagePaths: [],\n  // 미리보기 이미지 경로\n  addPostErrorReason: '',\n  // 포스트 업로드 실패 사유\n  isAddingPost: false,\n  // 포스트 업로드 중\n  postAdded: false,\n  // 포스트 업로드 성공\n  isAddingComment: false,\n  addCommentErrorReason: '',\n  commentAdded: false,\n  hasMorePost: false\n};\nexport const LOAD_MAIN_POSTS_REQUEST = 'LOAD_MAIN_POSTS_REQUEST';\nexport const LOAD_MAIN_POSTS_SUCCESS = 'LOAD_MAIN_POSTS_SUCCESS';\nexport const LOAD_MAIN_POSTS_FAILURE = 'LOAD_MAIN_POSTS_FAILURE';\nexport const LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\nexport const LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\nexport const LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE';\nexport const LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST';\nexport const LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS';\nexport const LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE';\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const LOAD_COMMENTS_REQUEST = 'LOAD_COMMENTS_REQUEST';\nexport const LOAD_COMMENTS_SUCCESS = 'LOAD_COMMENTS_SUCCESS';\nexport const LOAD_COMMENTS_FAILURE = 'LOAD_COMMENTS_FAILURE';\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport default ((state = initialState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      case UPLOAD_IMAGES_REQUEST:\n        {\n          break;\n        }\n\n      case UPLOAD_IMAGES_SUCCESS:\n        {\n          action.data.forEach(v => {\n            draft.imagePaths.push(v);\n          });\n          break;\n        }\n\n      case UPLOAD_IMAGES_FAILURE:\n        {\n          break;\n        }\n\n      case REMOVE_IMAGE:\n        {\n          const index = draft.imagePaths.findIndex((v, i) => i === action.index);\n          draft.imagePaths.splice(index, 1);\n          break;\n        }\n\n      case ADD_POST_REQUEST:\n        {\n          draft.isAddingPost = true;\n          draft.addPostErrorReason = '';\n          draft.postAdded = false;\n          break;\n        }\n\n      case ADD_POST_SUCCESS:\n        {\n          draft.isAddingPost = false;\n          draft.mainPosts.unshift(action.data);\n          draft.postAdded = true;\n          draft.imagePaths = [];\n          break;\n        }\n\n      case ADD_POST_FAILURE:\n        {\n          return _objectSpread({}, state, {\n            isAddingPost: false,\n            addPostErrorReason: action.error\n          });\n        }\n\n      case ADD_COMMENT_REQUEST:\n        {\n          return _objectSpread({}, state, {\n            isAddingComment: true,\n            addCommentErrorReason: '',\n            commentAdded: false\n          });\n        }\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          const postIndex = draft.mainPosts.findIndex(v => v.id === action.data.postId);\n          draft.mainPosts[postIndex].Comments.push(action.data.comment);\n          draft.isAddingComment = false;\n          draft.commentAdded = true;\n          break;\n        }\n\n      case ADD_COMMENT_FAILURE:\n        {\n          return _objectSpread({}, state, {\n            isAddingComment: false,\n            addCommentErrorReason: action.error\n          });\n        }\n\n      case LOAD_COMMENTS_SUCCESS:\n        {\n          const postIndex = draft.mainPosts.findIndex(v => v.id === action.data.postId);\n          draft.mainPosts[postIndex].Comments = action.data.Comments;\n          break;\n        }\n\n      case LOAD_HASHTAG_POSTS_REQUEST:\n        {\n          return _objectSpread({}, state, {\n            mainPosts: []\n          });\n        }\n\n      case LOAD_MAIN_POSTS_REQUEST:\n      case LOAD_USER_POSTS_REQUEST:\n        {\n          draft.mainPosts = action.lastId === 0 ? [] : draft.mainPosts;\n          draft.hasMorePost = action.lastId ? draft.hasMorePost : true;\n          break;\n        }\n\n      case LOAD_MAIN_POSTS_SUCCESS:\n      case LOAD_HASHTAG_POSTS_SUCCESS:\n      case LOAD_USER_POSTS_SUCCESS:\n        {\n          return _objectSpread({}, state, {\n            mainPosts: state.mainPosts.concat(action.data),\n            hasMorePost: action.data.length === 10\n          });\n        }\n\n      case LOAD_MAIN_POSTS_FAILURE:\n      case LOAD_HASHTAG_POSTS_FAILURE:\n      case LOAD_USER_POSTS_FAILURE:\n        {\n          return _objectSpread({}, state);\n        }\n\n      case LIKE_POST_REQUEST:\n        {\n          return _objectSpread({}, state);\n        }\n\n      case LIKE_POST_SUCCESS:\n        {\n          const postIndex = draft.mainPosts.findIndex(v => v.id === action.data.postId);\n          draft.mainPosts[postIndex].Likers.unshift({\n            id: action.data.userId\n          });\n          break;\n        }\n\n      case LIKE_POST_FAILURE:\n        {\n          return _objectSpread({}, state);\n        }\n\n      case UNLIKE_POST_REQUEST:\n        {\n          return _objectSpread({}, state);\n        }\n\n      case UNLIKE_POST_SUCCESS:\n        {\n          const postIndex = draft.mainPosts.findIndex(v => v.id === action.data.postId);\n          const likeIndex = draft.mainPosts[postIndex].Likers.findIndex(v => v.id === action.data.userId);\n          draft.mainPosts[postIndex].Likers.splice(likeIndex, 1);\n          break;\n        }\n\n      case UNLIKE_POST_FAILURE:\n        {\n          return _objectSpread({}, state);\n        }\n\n      case RETWEET_REQUEST:\n        {\n          return _objectSpread({}, state);\n        }\n\n      case RETWEET_SUCCESS:\n        {\n          return _objectSpread({}, state, {\n            mainPosts: [action.data, ...state.mainPosts]\n          });\n        }\n\n      case RETWEET_FAILURE:\n        {\n          return _objectSpread({}, state);\n        }\n\n      case REMOVE_POST_REQUEST:\n        {\n          return _objectSpread({}, state);\n        }\n\n      case REMOVE_POST_SUCCESS:\n        {\n          return _objectSpread({}, state, {\n            mainPosts: state.mainPosts.filter(v => v.id !== action.data)\n          });\n        }\n\n      case REMOVE_POST_FAILURE:\n        {\n          return _objectSpread({}, state);\n        }\n\n      default:\n        {\n          return _objectSpread({}, state);\n        }\n    }\n  });\n});","map":{"version":3,"sources":["C:/ReactNodeBird/Front/Reducer/post.js"],"names":["produce","initialState","mainPosts","imagePaths","addPostErrorReason","isAddingPost","postAdded","isAddingComment","addCommentErrorReason","commentAdded","hasMorePost","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","REMOVE_IMAGE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_COMMENTS_REQUEST","LOAD_COMMENTS_SUCCESS","LOAD_COMMENTS_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","state","action","draft","type","data","forEach","v","push","index","findIndex","i","splice","unshift","error","postIndex","id","postId","Comments","comment","lastId","concat","length","Likers","userId","likeIndex","filter"],"mappings":"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","sourcesContent":["// export const initialState={\r\n//     mainPosts: [{\r\n//         User: {\r\n//             id: 1,\r\n//             nickname: 'dbals',\r\n//             content: '첫 번째 게시글',\r\n//             img: 'https://cdn.crowdpic.net/detail-thumb/thumb_d_FF1D6AD8B887EC2359A69C049ECA2A1D.jpg'\r\n//         },\r\n//         content: '첫 번째 게시글',\r\n//         img: 'https://cdn.crowdpic.net/detail-thumb/thumb_d_FF1D6AD8B887EC2359A69C049ECA2A1D.jpg'\r\n//     }],\r\n//     imagePaths: [],\r\n//     addPostErrorReason : false,\r\n//     isAddingPost: false,\r\n// };\r\nimport produce from 'immer';\r\n\r\nexport const initialState = {\r\n    mainPosts: [], // 화면에 보일 포스트들\r\n    imagePaths: [], // 미리보기 이미지 경로\r\n    addPostErrorReason: '', // 포스트 업로드 실패 사유\r\n    isAddingPost: false, // 포스트 업로드 중\r\n    postAdded: false, // 포스트 업로드 성공\r\n    isAddingComment: false,\r\n    addCommentErrorReason: '',\r\n    commentAdded: false,\r\n    hasMorePost:false,\r\n  };\r\n  \r\n  export const LOAD_MAIN_POSTS_REQUEST = 'LOAD_MAIN_POSTS_REQUEST';\r\n  export const LOAD_MAIN_POSTS_SUCCESS = 'LOAD_MAIN_POSTS_SUCCESS';\r\n  export const LOAD_MAIN_POSTS_FAILURE = 'LOAD_MAIN_POSTS_FAILURE';\r\n  \r\n  export const LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\r\n  export const LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\r\n  export const LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE';\r\n  \r\n  export const LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST';\r\n  export const LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS';\r\n  export const LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE';\r\n  \r\n  export const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\r\n  export const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\r\n  export const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\r\n  \r\n  export const REMOVE_IMAGE = 'REMOVE_IMAGE';\r\n  \r\n  export const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\n  export const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\n  export const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n  \r\n  export const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\r\n  export const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\r\n  export const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\r\n  \r\n  export const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\r\n  export const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\r\n  export const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\r\n  \r\n  export const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\n  export const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\n  export const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n  \r\n  export const LOAD_COMMENTS_REQUEST = 'LOAD_COMMENTS_REQUEST';\r\n  export const LOAD_COMMENTS_SUCCESS = 'LOAD_COMMENTS_SUCCESS';\r\n  export const LOAD_COMMENTS_FAILURE = 'LOAD_COMMENTS_FAILURE';\r\n  \r\n  export const RETWEET_REQUEST = 'RETWEET_REQUEST';\r\n  export const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\r\n  export const RETWEET_FAILURE = 'RETWEET_FAILURE';\r\n  \r\n  export const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\n  export const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\n  export const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n  \r\n  export default (state = initialState, action) => {\r\n    return produce(state,(draft)=>{\r\n      switch (action.type) {\r\n        case UPLOAD_IMAGES_REQUEST: {\r\n          break;\r\n        }\r\n        case UPLOAD_IMAGES_SUCCESS: {\r\n          action.data.forEach(v=>{\r\n            draft.imagePaths.push(v);\r\n          })\r\n          break;\r\n        }\r\n        case UPLOAD_IMAGES_FAILURE: {\r\n          break;\r\n        }\r\n        case REMOVE_IMAGE: {\r\n          const index = draft.imagePaths.findIndex((v,i)=> i === action.index )\r\n          draft.imagePaths.splice(index,1);\r\n          break;\r\n        }\r\n        case ADD_POST_REQUEST: {\r\n          draft.isAddingPost = true;\r\n          draft.addPostErrorReason = '';\r\n          draft.postAdded = false;\r\n          break;\r\n        }\r\n        case ADD_POST_SUCCESS: {\r\n          draft.isAddingPost = false;\r\n          draft.mainPosts.unshift(action.data);\r\n          draft.postAdded = true;\r\n          draft.imagePaths = [];\r\n          break;\r\n        }\r\n        case ADD_POST_FAILURE: {\r\n          return {\r\n            ...state,\r\n            isAddingPost: false,\r\n            addPostErrorReason: action.error,\r\n          };\r\n        }\r\n        case ADD_COMMENT_REQUEST: {\r\n          return {\r\n            ...state,\r\n            isAddingComment: true,\r\n            addCommentErrorReason: '',\r\n            commentAdded: false,\r\n          };\r\n        }\r\n        case ADD_COMMENT_SUCCESS: {\r\n          const postIndex = draft.mainPosts.findIndex(v => v.id === action.data.postId);\r\n          draft.mainPosts[postIndex].Comments.push(action.data.comment);\r\n          draft.isAddingComment = false;\r\n          draft.commentAdded = true;\r\n          break;\r\n        }\r\n        case ADD_COMMENT_FAILURE: {\r\n          return {\r\n            ...state,\r\n            isAddingComment: false,\r\n            addCommentErrorReason: action.error,\r\n          };\r\n        }\r\n        case LOAD_COMMENTS_SUCCESS: {\r\n          const postIndex = draft.mainPosts.findIndex(v => v.id === action.data.postId);\r\n          draft.mainPosts[postIndex].Comments = action.data.Comments;\r\n          break;\r\n        }\r\n        case LOAD_HASHTAG_POSTS_REQUEST:{\r\n          return{\r\n            ...state,\r\n            mainPosts:[],\r\n          }\r\n        }\r\n        case LOAD_MAIN_POSTS_REQUEST:\r\n        case LOAD_USER_POSTS_REQUEST: {\r\n          draft.mainPosts = action.lastId === 0 ? [] : draft.mainPosts;\r\n          draft.hasMorePost = action.lastId ? draft.hasMorePost : true;\r\n          break;\r\n        }\r\n        case LOAD_MAIN_POSTS_SUCCESS:\r\n        case LOAD_HASHTAG_POSTS_SUCCESS:\r\n        case LOAD_USER_POSTS_SUCCESS: {\r\n          return {\r\n            ...state,\r\n            mainPosts: state.mainPosts.concat(action.data),\r\n            hasMorePost : action.data.length === 10,\r\n          };\r\n        }\r\n        case LOAD_MAIN_POSTS_FAILURE:\r\n        case LOAD_HASHTAG_POSTS_FAILURE:\r\n        case LOAD_USER_POSTS_FAILURE: {\r\n          return {\r\n            ...state,\r\n          };\r\n        }\r\n        case LIKE_POST_REQUEST: {\r\n          return {\r\n            ...state,\r\n          };\r\n        }\r\n        case LIKE_POST_SUCCESS: {\r\n          const postIndex = draft.mainPosts.findIndex(v => v.id === action.data.postId);\r\n          draft.mainPosts[postIndex].Likers.unshift({id:action.data.userId})\r\n          break;\r\n        }\r\n        case LIKE_POST_FAILURE: {\r\n          return {\r\n            ...state,\r\n          };\r\n        }\r\n        case UNLIKE_POST_REQUEST: {\r\n          return {\r\n            ...state,\r\n          };\r\n        }\r\n        case UNLIKE_POST_SUCCESS: {\r\n          const postIndex = draft.mainPosts.findIndex(v => v.id === action.data.postId);\r\n          const likeIndex = draft.mainPosts[postIndex].Likers.findIndex(v=> v.id === action.data.userId);\r\n          draft.mainPosts[postIndex].Likers.splice(likeIndex,1); \r\n          break;\r\n        }\r\n        case UNLIKE_POST_FAILURE: {\r\n          return {\r\n            ...state,\r\n          };\r\n        }\r\n        case RETWEET_REQUEST: {\r\n          return {\r\n            ...state,\r\n          };\r\n        }\r\n        case RETWEET_SUCCESS: {\r\n          return {\r\n            ...state,\r\n            mainPosts: [action.data, ...state.mainPosts],\r\n          };\r\n        }\r\n        case RETWEET_FAILURE: {\r\n          return {\r\n            ...state,\r\n          };\r\n        }\r\n        case REMOVE_POST_REQUEST: {\r\n          return {\r\n            ...state,\r\n          };\r\n        }\r\n        case REMOVE_POST_SUCCESS: {\r\n          return {\r\n            ...state,\r\n            mainPosts: state.mainPosts.filter(v=>v.id!==action.data),\r\n          };\r\n        }\r\n        case REMOVE_POST_FAILURE: {\r\n          return {\r\n            ...state,\r\n          };\r\n        }\r\n        default: {\r\n          return {\r\n            ...state,\r\n          };\r\n        }\r\n      }\r\n    })\r\n  };"]},"metadata":{},"sourceType":"module"}