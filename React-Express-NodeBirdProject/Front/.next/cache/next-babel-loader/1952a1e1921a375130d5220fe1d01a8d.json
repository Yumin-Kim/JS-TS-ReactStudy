{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(login),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLogin),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(signUp),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchSignUp),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(logout),\n    _marked6 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLogout),\n    _marked7 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadUser),\n    _marked8 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadUser),\n    _marked9 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(userSaga);\n\n//call 함수 동기적으로 호출 fork 함수 비동기적으로 호출 put 액션 dispatch take 해당 액션이 dispatch 되면 제너레이터 next를 실행 하게함\n//all 여러 이펙트를 동시에 실항 할 수 있게 함\n//사가 자체 적으로 next() 호출을 자동으로 해주는 제너레이터임\n//제너레이터는 한번 사용하면 다시 사용 할 수 없기 때문에 무한 루프를 사용하여 반복 실행이 될 수 있도록 한다\n// function* watchLogin(){\n//     // while(true){\n//     //     console.log(\"대기\");\n//     //     yield take(LOG_IN)\n//     //     yield delay(4000);\n//     //     yield put({\n//     //         type:LOG_IN_SUCCESS\n//     //     })\n//     //     console.log(\"LOG_IN_SUCCESS\");\n//     // }while saga에서 문법으로 지원 takeEvery\n//     //사용자의 시도가 유효할때 takeEvery\n//     //유효 하지 않고 한번만 발생 하길 원할때 takeLatest\n//     // yield takeEvery(LOG_IN,function* (){\n//     //     yield put({\n//     //         type:LOG_IN_SUCCESS\n//     //     })\n//     //     console.log(1);\n//     //     console.log(12);\n//     //     console.log(13);\n//     //     console.log(14);\n//     // })\n// }\nimport { all, call, put, takeLatest, takeEvery, fork, take, delay } from 'redux-saga/effects';\nimport { LOG_IN_REQUEST, SIGN_UP_REQUEST, LOG_IN_FAILURE, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, LOAD_USER_SUCCESS, LOAD_USER_FAILURE, LOAD_USER_REQUEST } from '../Reducer/user';\nimport { LOG_IN_SUCCESS } from '../Reducer/user';\nimport axios from 'axios';\n\nfunction loginAPI(loginData) {\n  return axios.post('http://localhost:3065/api/user/login', loginData, {\n    withCredentials: true //서로 쿠키 교환 axios에서 지원\n\n  });\n}\n\nfunction login(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(loginAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: LOG_IN_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 13;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(_context.t0);\n          _context.next = 13;\n          return put({\n            type: LOG_IN_FAILURE\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(LOG_IN_REQUEST, login);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction signUpAPI(signUpData) {\n  return axios.post('http://localhost:3065/api/user', signUpData);\n}\n\nfunction signUp(action) {\n  return _regeneratorRuntime.wrap(function signUp$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(signUpAPI, action.data);\n\n        case 3:\n          _context3.next = 5;\n          return put({\n            // put은 dispatch 동일\n            type: SIGN_UP_SUCCESS\n          });\n\n        case 5:\n          _context3.next = 12;\n          break;\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          // loginAPI 실패\n          console.log(action);\n          _context3.next = 12;\n          return put({\n            type: SIGN_UP_FAILURE,\n            error: _context3.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 7]]);\n}\n\nfunction watchSignUp() {\n  return _regeneratorRuntime.wrap(function watchSignUp$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeEvery(SIGN_UP_REQUEST, signUp);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction logoutAPI() {\n  return axios.post('http://localhost:3065/api/user/logout', {}, {\n    withCredentials: true\n  });\n}\n\nfunction logout(action) {\n  return _regeneratorRuntime.wrap(function logout$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(logoutAPI);\n\n        case 3:\n          _context5.next = 5;\n          return put({\n            // put은 dispatch 동일\n            type: LOG_OUT_SUCCESS\n          });\n\n        case 5:\n          _context5.next = 12;\n          break;\n\n        case 7:\n          _context5.prev = 7;\n          _context5.t0 = _context5[\"catch\"](0);\n          // loginAPI 실패\n          console.log(action);\n          _context5.next = 12;\n          return put({\n            type: LOG_OUT_FAILURE,\n            error: _context5.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 7]]);\n}\n\nfunction watchLogout() {\n  return _regeneratorRuntime.wrap(function watchLogout$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeEvery(LOG_OUT_REQUEST, logout);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction loadUserAPI(userId) {\n  console.log(userId);\n  return axios.get(userId ? \"http://localhost:3065/api/user/\".concat(userId) : 'http://localhost:3065/api/user', {\n    withCredentials: true\n  });\n}\n\nfunction loadUser(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadUser$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return call(loadUserAPI, action.data);\n\n        case 3:\n          result = _context7.sent;\n          _context7.next = 6;\n          return put({\n            // put은 dispatch 동일\n            type: LOAD_USER_SUCCESS,\n            data: result.data,\n            me: !action.data\n          });\n\n        case 6:\n          _context7.next = 13;\n          break;\n\n        case 8:\n          _context7.prev = 8;\n          _context7.t0 = _context7[\"catch\"](0);\n          // loginAPI 실패\n          console.log(_context7.t0);\n          _context7.next = 13;\n          return put({\n            type: LOAD_USER_FAILURE,\n            error: _context7.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[0, 8]]);\n}\n\nfunction watchLoadUser() {\n  return _regeneratorRuntime.wrap(function watchLoadUser$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeEvery(LOAD_USER_REQUEST, loadUser);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return all([fork(watchLogin), fork(watchLogout), fork(watchLoadUser), fork(watchSignUp)]);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}","map":{"version":3,"sources":["C:/ReactNodeBird/Front/sagas/user.js"],"names":["login","watchLogin","signUp","watchSignUp","logout","watchLogout","loadUser","watchLoadUser","userSaga","all","call","put","takeLatest","takeEvery","fork","take","delay","LOG_IN_REQUEST","SIGN_UP_REQUEST","LOG_IN_FAILURE","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","LOAD_USER_SUCCESS","LOAD_USER_FAILURE","LOAD_USER_REQUEST","LOG_IN_SUCCESS","axios","loginAPI","loginData","post","withCredentials","action","data","result","type","console","log","signUpAPI","signUpData","error","logoutAPI","loadUserAPI","userId","get","me"],"mappings":"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","sourcesContent":["//call 함수 동기적으로 호출 fork 함수 비동기적으로 호출 put 액션 dispatch take 해당 액션이 dispatch 되면 제너레이터 next를 실행 하게함\r\n//all 여러 이펙트를 동시에 실항 할 수 있게 함\r\n//사가 자체 적으로 next() 호출을 자동으로 해주는 제너레이터임\r\n//제너레이터는 한번 사용하면 다시 사용 할 수 없기 때문에 무한 루프를 사용하여 반복 실행이 될 수 있도록 한다\r\n// function* watchLogin(){\r\n    //     // while(true){\r\n    //     //     console.log(\"대기\");\r\n    //     //     yield take(LOG_IN)\r\n    //     //     yield delay(4000);\r\n    //     //     yield put({\r\n    //     //         type:LOG_IN_SUCCESS\r\n    //     //     })\r\n    //     //     console.log(\"LOG_IN_SUCCESS\");\r\n    //     // }while saga에서 문법으로 지원 takeEvery\r\n    //     //사용자의 시도가 유효할때 takeEvery\r\n    //     //유효 하지 않고 한번만 발생 하길 원할때 takeLatest\r\n    //     // yield takeEvery(LOG_IN,function* (){\r\n    //     //     yield put({\r\n    //     //         type:LOG_IN_SUCCESS\r\n    //     //     })\r\n    //     //     console.log(1);\r\n    //     //     console.log(12);\r\n    //     //     console.log(13);\r\n    //     //     console.log(14);\r\n    //     // })\r\n    \r\n    // }\r\nimport { all ,call,put,takeLatest,takeEvery, fork,take,delay} from 'redux-saga/effects';\r\nimport { LOG_IN_REQUEST, SIGN_UP_REQUEST, LOG_IN_FAILURE, SIGN_UP_SUCCESS ,SIGN_UP_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, LOAD_USER_SUCCESS, LOAD_USER_FAILURE, LOAD_USER_REQUEST } from '../Reducer/user';\r\nimport { LOG_IN_SUCCESS } from '../Reducer/user';\r\nimport axios from 'axios';\r\n\r\nfunction loginAPI(loginData){\r\n    return axios.post('http://localhost:3065/api/user/login',loginData,{\r\n        withCredentials:true //서로 쿠키 교환 axios에서 지원\r\n    });\r\n}\r\n\r\nfunction* login(action){\r\n    try{\r\n        const result = yield call(loginAPI,action.data);\r\n        yield put({\r\n            type:LOG_IN_SUCCESS,\r\n            data:result.data,\r\n        })\r\n    }catch(e){\r\n        console.log(e)\r\n        yield put({\r\n            type:LOG_IN_FAILURE\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLogin (){\r\n    yield takeEvery(LOG_IN_REQUEST,login);\r\n}\r\n\r\nfunction signUpAPI(signUpData){\r\n    return axios.post('http://localhost:3065/api/user',signUpData);\r\n}\r\n\r\nfunction* signUp(action) {\r\n    try {\r\n      yield call(signUpAPI,action.data);\r\n      yield put({ // put은 dispatch 동일\r\n        type: SIGN_UP_SUCCESS,\r\n      });\r\n    } catch (e) { // loginAPI 실패\r\n      console.log(action);\r\n      yield put({\r\n        type: SIGN_UP_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  }\r\n\r\n\r\nfunction* watchSignUp(){\r\n    yield takeEvery(SIGN_UP_REQUEST,signUp)\r\n}\r\nfunction logoutAPI(){\r\n    return axios.post('http://localhost:3065/api/user/logout',{},{\r\n        withCredentials:true\r\n    });\r\n}\r\n\r\nfunction* logout(action) {\r\n    try {\r\n      yield call(logoutAPI);\r\n      yield put({ // put은 dispatch 동일\r\n        type: LOG_OUT_SUCCESS,\r\n      });\r\n    } catch (e) { // loginAPI 실패\r\n      console.log(action);\r\n      yield put({\r\n        type: LOG_OUT_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  }\r\n\r\n\r\nfunction* watchLogout(){\r\n    yield takeEvery(LOG_OUT_REQUEST,logout)\r\n}\r\nfunction loadUserAPI(userId){\r\n  console.log(userId)\r\n    return axios.get(userId ?`http://localhost:3065/api/user/${userId}` : 'http://localhost:3065/api/user',{\r\n        withCredentials:true,\r\n    });\r\n}\r\n\r\nfunction* loadUser(action) {\r\n    try {\r\n      const result = yield call(loadUserAPI,action.data);\r\n      yield put({ // put은 dispatch 동일\r\n        type: LOAD_USER_SUCCESS,\r\n        data : result.data,\r\n        me:!action.data\r\n      });\r\n    } catch (e) { // loginAPI 실패\r\n      console.log(e);\r\n      yield put({\r\n        type: LOAD_USER_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  }\r\n\r\nfunction* watchLoadUser(){\r\n    yield takeEvery(LOAD_USER_REQUEST,loadUser)\r\n}\r\n\r\n\r\nexport default function* userSaga(){\r\n    yield all([\r\n        fork(watchLogin),\r\n        fork(watchLogout),\r\n        fork(watchLoadUser),\r\n        fork(watchSignUp)\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}