{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useCallback, useState, useEffect, useRef } from 'react';\nimport { Form, Input, Button } from 'antd';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ADD_POST_REQUEST, UPLOAD_IMAGES_REQUEST, REMOVE_IMAGE } from '../Reducer/post';\n\nconst PostForm = () => {\n  const {\n    0: text,\n    1: setText\n  } = useState('');\n  const dispatch = useDispatch();\n  const {\n    imagePaths,\n    isAddingPost,\n    postAdded\n  } = useSelector(state => state.post);\n  const imageInput = useRef();\n  useEffect(() => {\n    setText('');\n  }, [postAdded]);\n  const onSubmitForm = useCallback(e => {\n    e.preventDefault();\n\n    if (!text) {\n      return alert(\"작성해!!\");\n    }\n\n    const formData = new FormData();\n    imagePaths.forEach(i => {\n      formData.append('image', i);\n      formData.append('content', text);\n    });\n    dispatch({\n      type: ADD_POST_REQUEST,\n      data: formData\n    });\n  }, [text, imagePaths]);\n  const onChangeText = useCallback(e => {\n    setText(e.target.value);\n  }, [text]);\n  const onChangeImages = useCallback(e => {\n    console.log(e.target.files);\n    const imageFormData = new FormData();\n    [].forEach.call(e.target.files, f => {\n      imageFormData.append('image', f);\n    });\n    dispatch({\n      type: UPLOAD_IMAGES_REQUEST,\n      data: imageFormData\n    });\n  });\n  const onClickImageUpload = useCallback(() => {\n    console.log(imageInput);\n    imageInput.current.click();\n  }, [imageInput.current]);\n  const onClickRemoveImage = useCallback(index => () => {\n    dispatch({\n      type: REMOVE_IMAGE,\n      index\n    });\n  }, []);\n  return __jsx(Form, {\n    encType: \"multipart/form-data\",\n    onSubmit: onSubmitForm\n  }, __jsx(Input.TextArea, {\n    value: text,\n    onChange: onChangeText,\n    maxLength: 140,\n    placeholder: \"\\uC5B4\\uB5A4 \\uC2E0\\uAE30\\uD55C \\uC77C\\uC774 \\uC788\\uC5C8\\uB098\\uC5EC\"\n  }), __jsx(\"div\", null, __jsx(\"input\", {\n    type: \"file\",\n    multiple: true,\n    hidden: true,\n    ref: imageInput,\n    onChange: onChangeImages\n  }), __jsx(Button, {\n    onClick: onClickImageUpload\n  }, \"\\uC774\\uBBF8\\uC9C0 \\uC5C5\\uB85C\\uB4DC\"), __jsx(Button, {\n    type: \"primary\",\n    style: {\n      float: \"right\"\n    },\n    htmlType: \"submit\",\n    loading: isAddingPost\n  }, \"\\uC9F9\\uC9F9\"), __jsx(\"div\", null, imagePaths.map((val, idx) => {\n    return __jsx(\"div\", {\n      key: idx,\n      style: {\n        display: 'inline-block'\n      }\n    }, __jsx(\"img\", {\n      src: `http://localhost:3065/${val}`,\n      style: {\n        width: '200px'\n      },\n      alt: idx\n    }), __jsx(\"div\", null, __jsx(Button, {\n      onClick: onClickRemoveImage(idx)\n    }, \"\\uC81C\\uAC70\")));\n  }))));\n};\n\nexport default PostForm;","map":{"version":3,"sources":["C:/ReactNodeBird/Front/components/PostForm.js"],"names":["React","useCallback","useState","useEffect","useRef","Form","Input","Button","useSelector","useDispatch","ADD_POST_REQUEST","UPLOAD_IMAGES_REQUEST","REMOVE_IMAGE","PostForm","text","setText","dispatch","imagePaths","isAddingPost","postAdded","state","post","imageInput","onSubmitForm","e","preventDefault","alert","formData","FormData","forEach","i","append","type","data","onChangeText","target","value","onChangeImages","console","log","files","imageFormData","call","f","onClickImageUpload","current","click","onClickRemoveImage","index","float","map","val","idx","display","width"],"mappings":"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","sourcesContent":["import React, { useCallback, useState ,useEffect, useRef } from 'react';\r\nimport { Form, Input, Button, } from 'antd';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport { ADD_POST_REQUEST, UPLOAD_IMAGES_REQUEST, REMOVE_IMAGE } from '../Reducer/post';\r\n\r\nconst PostForm = () => {\r\n    const [ text , setText ] = useState('');\r\n    const dispatch = useDispatch();\r\n    const {imagePaths,isAddingPost,postAdded} = useSelector(state=>state.post)\r\n    const imageInput = useRef();\r\n\r\n    useEffect(()=>{\r\n        setText('');\r\n    },[postAdded])\r\n    \r\n    const onSubmitForm = useCallback((e) => {\r\n        e.preventDefault();\r\n        if(!text){\r\n            return alert(\"작성해!!\")\r\n        }\r\n        const formData = new FormData();\r\n        imagePaths.forEach((i)=>{\r\n            formData.append('image',i);\r\n            formData.append('content',text);\r\n        })\r\n        dispatch({\r\n            type:ADD_POST_REQUEST,\r\n            data:formData,\r\n        })\r\n    },[text,imagePaths])\r\n\r\n    const onChangeText = useCallback((e) => {\r\n        setText(e.target.value);\r\n    },[text]);\r\n\r\n    const onChangeImages = useCallback((e)=>{\r\n        console.log(e.target.files);\r\n        const imageFormData = new FormData();\r\n        [].forEach.call(e.target.files,(f)=>{\r\n            imageFormData.append('image',f);\r\n        })\r\n        dispatch({\r\n            type: UPLOAD_IMAGES_REQUEST,\r\n            data:imageFormData,\r\n        })\r\n    })\r\n    \r\n    const onClickImageUpload =useCallback(() =>{\r\n        console.log(imageInput)\r\n        imageInput.current.click();\r\n    },[ imageInput.current ]);\r\n\r\n    const onClickRemoveImage = useCallback(index => () => {\r\n        dispatch({\r\n            type: REMOVE_IMAGE,\r\n            index,\r\n        })\r\n    },[]);\r\n\r\n    return (\r\n        <Form encType=\"multipart/form-data\" onSubmit = {onSubmitForm} >\r\n            <Input.TextArea value={text} onChange={onChangeText}  maxLength={140} placeholder=\"어떤 신기한 일이 있었나여\"></Input.TextArea>\r\n            <div>\r\n                <input type=\"file\" multiple hidden ref={imageInput} onChange={onChangeImages} />\r\n                <Button onClick={onClickImageUpload} >이미지 업로드</Button>\r\n                <Button type=\"primary\" style={{ float: \"right\" }} htmlType=\"submit\" loading={isAddingPost} >짹짹</Button>\r\n                <div>\r\n                    {imagePaths.map((val, idx) => {\r\n                        return (\r\n                            <div key={idx} style={{ display: 'inline-block' }} >\r\n                                <img src={`http://localhost:3065/${val}`} style={{ width: '200px' }} alt={idx} />\r\n                                <div>\r\n                                    <Button onClick={onClickRemoveImage(idx)}>제거</Button>\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </div>\r\n            </div>\r\n        </Form>\r\n    );\r\n}\r\n\r\nexport default PostForm;"]},"metadata":{},"sourceType":"module"}