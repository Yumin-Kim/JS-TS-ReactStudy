{"ast":null,"code":"var _jsxFileName = \"c:\\\\ReactNodeBird\\\\Front\\\\pages\\\\_app.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Head from 'next/head';\nimport PropTypes from 'prop-types';\nimport AppLayout from '../components/AppLayout';\nimport withRedux from 'next-redux-wrapper';\nimport { Provider } from 'react-redux';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport reducer from '../Reducer'; //모든 페이지에 공통적으로 들어가는것들을 여기다모음\n\nconst Nodebird = ({\n  Component,\n  store\n}) => {\n  console.log(); //Component는 Next.js에서 넣어 주는 멤버 >> 말그대로 컴포넌트 전체를 넣어 주며 isServer router Component 등을 넗어준다\n\n  return __jsx(Provider, {\n    store: store,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, __jsx(Head, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, __jsx(\"title\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, \"NodeBird\"), __jsx(\"link\", {\n    rel: \"stylesheet\",\n    href: \"https://cdnjs.cloudflare.com/ajax/libs/antd/3.22.0/antd.css\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  })), __jsx(AppLayout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, __jsx(Component, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  })));\n}; //store 만드는 과정 withRedux라는 고위함수를 만들어 주는데 확장자 처럼 사용되며\n//state+reducer가 합쳐진 것을 모으는 곳이 store라고함\n\n\nexport default withRedux((initialState, options) => {\n  const middlewares = [];\n  const enhancer = compose(applyMiddleware(...middlewares), false && window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : f => f);\n  const store = createStore(reducer, initialState, enhancer); //middlewares는 state,action,reducer와 store사이 기능을 추가 변조 할수있는 역할을 가짐    \n\n  return store;\n})(Nodebird); // const configureStore = (initialState, options) => {\n//     const sagaMiddleware = createSagaMiddleware();\n//     const middlewares = [sagaMiddleware];\n//     const enhancer = process.env.NODE_ENV === 'production'\n//       ? compose(applyMiddleware(...middlewares))\n//       : compose(\n//         applyMiddleware(...middlewares),\n//         !options.isServer && typeof window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : f => f,\n//       );\n//     const store = createStore(reducer, initialState, enhancer);\n//     sagaMiddleware.run(rootSaga);\n//     return store;\n//   };\n//   export default withRedux(configureStore)(Nodebird);","map":{"version":3,"sources":["c:/ReactNodeBird/Front/pages/_app.js"],"names":["React","Head","PropTypes","AppLayout","withRedux","Provider","createStore","compose","applyMiddleware","reducer","Nodebird","Component","store","console","log","initialState","options","middlewares","enhancer","window","__REDUX_DEVTOOLS_EXTENSION__","f"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAAQC,WAAR,EAAqBC,OAArB,EAA8BC,eAA9B,QAAoD,OAApD;AACA,OAAOC,OAAP,MAAoB,YAApB,C,CACA;;AAGA,MAAMC,QAAQ,GAAG,CAAC;AAACC,EAAAA,SAAD;AAAYC,EAAAA;AAAZ,CAAD,KAAuB;AACpCC,EAAAA,OAAO,CAACC,GAAR,GADoC,CAEpC;;AACA,SACI,MAAC,QAAD;AAAU,IAAA,KAAK,EAAEF,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,EAEI;AAAM,IAAA,GAAG,EAAC,YAAV;AAAuB,IAAA,IAAI,EAAC,6DAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ,EAKI,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CALJ,CADJ;AAWH,CAdD,C,CAeA;AACA;;;AACA,eAAeR,SAAS,CAAC,CAACW,YAAD,EAAcC,OAAd,KAAwB;AAC7C,QAAMC,WAAW,GAAG,EAApB;AACA,QAAMC,QAAQ,GAAIX,OAAO,CACrBC,eAAe,CAAC,GAAGS,WAAJ,CADM,EAEpB,SAAkCE,MAAM,CAACC,4BAAP,KAAwC,WAA1E,GACDD,MAAM,CAACC,4BAAP,EADC,GACsCC,CAAD,IAAKA,CAHtB,CAAzB;AAIA,QAAMT,KAAK,GAACN,WAAW,CAACG,OAAD,EAASM,YAAT,EAAsBG,QAAtB,CAAvB,CAN6C,CAOjD;;AACI,SAAON,KAAP;AACH,CATuB,CAAT,CASZF,QATY,CAAf,C,CAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import React from 'react';\r\nimport Head from 'next/head';\r\nimport PropTypes from 'prop-types';\r\nimport AppLayout from '../components/AppLayout';\r\nimport withRedux from 'next-redux-wrapper';\r\nimport { Provider } from 'react-redux';\r\nimport {createStore, compose, applyMiddleware} from 'redux';\r\nimport reducer from '../Reducer';\r\n//모든 페이지에 공통적으로 들어가는것들을 여기다모음\r\n\r\n\r\nconst Nodebird = ({Component ,store}) =>{\r\n    console.log()\r\n    //Component는 Next.js에서 넣어 주는 멤버 >> 말그대로 컴포넌트 전체를 넣어 주며 isServer router Component 등을 넗어준다\r\n    return(\r\n        <Provider store={store}>\r\n            <Head>\r\n                <title>NodeBird</title>\r\n                <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/antd/3.22.0/antd.css\" />\r\n            </Head>\r\n            <AppLayout>\r\n                <Component/>\r\n            </AppLayout>\r\n        </Provider>\r\n    );\r\n}\r\n//store 만드는 과정 withRedux라는 고위함수를 만들어 주는데 확장자 처럼 사용되며\r\n//state+reducer가 합쳐진 것을 모으는 곳이 store라고함\r\nexport default withRedux((initialState,options)=>{\r\n    const middlewares = [];\r\n    const enhancer =  compose(\r\n        applyMiddleware(...middlewares)\r\n        ,typeof(window) !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? \r\n        window.__REDUX_DEVTOOLS_EXTENSION__():(f)=>f);\r\n    const store=createStore(reducer,initialState,enhancer);\r\n//middlewares는 state,action,reducer와 store사이 기능을 추가 변조 할수있는 역할을 가짐    \r\n    return store;\r\n})(Nodebird);\r\n\r\n\r\n// const configureStore = (initialState, options) => {\r\n//     const sagaMiddleware = createSagaMiddleware();\r\n//     const middlewares = [sagaMiddleware];\r\n//     const enhancer = process.env.NODE_ENV === 'production'\r\n//       ? compose(applyMiddleware(...middlewares))\r\n//       : compose(\r\n//         applyMiddleware(...middlewares),\r\n//         !options.isServer && typeof window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : f => f,\r\n//       );\r\n//     const store = createStore(reducer, initialState, enhancer);\r\n//     sagaMiddleware.run(rootSaga);\r\n//     return store;\r\n//   };\r\n  \r\n//   export default withRedux(configureStore)(Nodebird);"]},"metadata":{},"sourceType":"module"}