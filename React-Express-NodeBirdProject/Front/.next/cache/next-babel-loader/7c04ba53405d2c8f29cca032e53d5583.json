{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Head from 'next/head';\nimport PropTypes from 'prop-types';\nimport AppLayout from '../components/AppLayout';\nimport withRedux from 'next-redux-wrapper';\nimport { Provider } from 'react-redux';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport reducer from '../Reducer';\nimport createSagaMiddleware from 'redux-saga';\nimport rootSaga from '../sagas'; //모든 페이지에 공통적으로 들어가는것들을 여기다모음\n\nvar Nodebird = function Nodebird(_ref) {\n  var Component = _ref.Component,\n      store = _ref.store,\n      pageProps = _ref.pageProps;\n  //Component는 Next.js에서 넣어 주는 멤버 >> 말그대로 컴포넌트 전체를 넣어 주며 isServer router Component 등을 넗어준다\n  return __jsx(Provider, {\n    store: store\n  }, __jsx(Head, null, __jsx(\"title\", null, \"NodeBird\"), __jsx(\"link\", {\n    rel: \"stylesheet\",\n    href: \"https://cdnjs.cloudflare.com/ajax/libs/antd/3.16.2/antd.css\"\n  }), __jsx(\"link\", {\n    rel: \"stylesheet\",\n    type: \"text/css\",\n    charSet: \"UTF-8\",\n    href: \"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick.min.css\"\n  }), __jsx(\"link\", {\n    rel: \"stylesheet\",\n    type: \"text/css\",\n    href: \"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick-theme.min.css\"\n  })), __jsx(AppLayout, null, __jsx(Component, pageProps)));\n}; //store 만드는 과정 withRedux라는 고위함수를 만들어 주는데 확장자 처럼 사용되며\n//state+reducer가 합쳐진 것을 모으는 곳이 store라고함\n// export default withRedux((initialState,options)=>{\n//     const middlewares = [];\n//     const enhancer =  compose(\n//         applyMiddleware(...middlewares)\n//         ,!options.isServer && window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? \n//         window.__REDUX_DEVTOOLS_EXTENSION__():(f)=>f);\n//     const store=createStore(reducer,initialState,enhancer);\n// //middlewares는 state,action,reducer와 store사이 기능을 추가 변조 할수있는 역할을 가짐    \n//     return store;\n// })(Nodebird);\n\n\nNodebird.getInitialProps = function _callee(context) {\n  var ctx, Component, pageProps;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          ctx = context.ctx, Component = context.Component;\n          pageProps = {};\n\n          if (!context.Component.getInitialProps) {\n            _context.next = 6;\n            break;\n          }\n\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(context.Component.getInitialProps(ctx));\n\n        case 5:\n          pageProps = _context.sent;\n\n        case 6:\n          console.log(pageProps);\n          return _context.abrupt(\"return\", {\n            pageProps: pageProps\n          });\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n}; // NodeBird.getInitialProps = async (context) => {\n//     console.log(context);\n//     const { ctx, Component } = context;\n//     let pageProps = {};\n//     if (Component.getInitialProps) {\n//       pageProps = await Component.getInitialProps(ctx);\n//     }\n//     return { pageProps };\n//   };\n\n\nvar configureStore = function configureStore(initialState, options) {\n  var sagaMiddleware = createSagaMiddleware();\n  var middlewares = [sagaMiddleware];\n  var enhancer = false ? compose(applyMiddleware.apply(void 0, middlewares)) : compose(applyMiddleware.apply(void 0, middlewares), !options.isServer && typeof window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : function (f) {\n    return f;\n  });\n  var store = createStore(reducer, initialState, enhancer);\n  sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nexport default withRedux(configureStore)(Nodebird);","map":{"version":3,"sources":["C:/ReactNodeBird/Front/pages/_app.js"],"names":["React","Head","PropTypes","AppLayout","withRedux","Provider","createStore","compose","applyMiddleware","reducer","createSagaMiddleware","rootSaga","Nodebird","Component","store","pageProps","getInitialProps","context","ctx","console","log","configureStore","initialState","options","sagaMiddleware","middlewares","enhancer","isServer","window","__REDUX_DEVTOOLS_EXTENSION__","f","run"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAAQC,WAAR,EAAqBC,OAArB,EAA8BC,eAA9B,QAAoD,OAApD;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,OAAOC,QAAP,MAAqB,UAArB,C,CAEA;;AAGA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,OAAiC;AAAA,MAA/BC,SAA+B,QAA/BA,SAA+B;AAAA,MAApBC,KAAoB,QAApBA,KAAoB;AAAA,MAAdC,SAAc,QAAdA,SAAc;AAC9C;AACA,SACI,MAAC,QAAD;AAAU,IAAA,KAAK,EAAED;AAAjB,KACI,MAAC,IAAD,QACA,gCADA,EAEJ;AAAM,IAAA,GAAG,EAAC,YAAV;AAAuB,IAAA,IAAI,EAAC;AAA5B,IAFI,EAGJ;AAAM,IAAA,GAAG,EAAC,YAAV;AAAuB,IAAA,IAAI,EAAC,UAA5B;AAAuC,IAAA,OAAO,EAAC,OAA/C;AAAuD,IAAA,IAAI,EAAC;AAA5D,IAHI,EAIJ;AAAM,IAAA,GAAG,EAAC,YAAV;AAAuB,IAAA,IAAI,EAAC,UAA5B;AAAuC,IAAA,IAAI,EAAC;AAA5C,IAJI,CADJ,EAOI,MAAC,SAAD,QACI,MAAC,SAAD,EAAeC,SAAf,CADJ,CAPJ,CADJ;AAaH,CAfD,C,CAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAH,QAAQ,CAACI,eAAT,GAA2B,iBAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACfC,UAAAA,GADe,GACID,OADJ,CACfC,GADe,EACVL,SADU,GACII,OADJ,CACVJ,SADU;AAEnBE,UAAAA,SAFmB,GAEP,EAFO;;AAAA,eAGpBE,OAAO,CAACJ,SAAR,CAAkBG,eAHE;AAAA;AAAA;AAAA;;AAAA;AAAA,2CAIFC,OAAO,CAACJ,SAAR,CAAkBG,eAAlB,CAAkCE,GAAlC,CAJE;;AAAA;AAInBH,UAAAA,SAJmB;;AAAA;AAMvBI,UAAAA,OAAO,CAACC,GAAR,CAAYL,SAAZ;AANuB,2CAOhB;AAAEA,YAAAA,SAAS,EAATA;AAAF,WAPgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA3B,C,CAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,IAAMM,cAAc,GAAG,SAAjBA,cAAiB,CAACC,YAAD,EAAeC,OAAf,EAA2B;AAC9C,MAAMC,cAAc,GAAGd,oBAAoB,EAA3C;AACA,MAAMe,WAAW,GAAG,CAACD,cAAD,CAApB;AACA,MAAME,QAAQ,GAAG,QACbnB,OAAO,CAACC,eAAe,MAAf,SAAmBiB,WAAnB,CAAD,CADM,GAEblB,OAAO,CACPC,eAAe,MAAf,SAAmBiB,WAAnB,CADO,EAEP,CAACF,OAAO,CAACI,QAAT,IAAqB,OAAOC,MAAM,CAACC,4BAAd,KAA+C,WAApE,GAAkFD,MAAM,CAACC,4BAAP,EAAlF,GAA0H,UAAAC,CAAC;AAAA,WAAIA,CAAJ;AAAA,GAFpH,CAFX;AAMA,MAAMhB,KAAK,GAAGR,WAAW,CAACG,OAAD,EAAUa,YAAV,EAAwBI,QAAxB,CAAzB;AACAF,EAAAA,cAAc,CAACO,GAAf,CAAmBpB,QAAnB;AACA,SAAOG,KAAP;AACD,CAZH;;AAcE,eAAeV,SAAS,CAACiB,cAAD,CAAT,CAA0BT,QAA1B,CAAf","sourcesContent":["import React from 'react';\r\nimport Head from 'next/head';\r\nimport PropTypes from 'prop-types';\r\nimport AppLayout from '../components/AppLayout';\r\nimport withRedux from 'next-redux-wrapper';\r\nimport { Provider } from 'react-redux';\r\nimport {createStore, compose, applyMiddleware} from 'redux';\r\nimport reducer from '../Reducer';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport rootSaga from '../sagas';\r\n\r\n//모든 페이지에 공통적으로 들어가는것들을 여기다모음\r\n\r\n\r\nconst Nodebird = ({Component ,store,pageProps}) =>{\r\n    //Component는 Next.js에서 넣어 주는 멤버 >> 말그대로 컴포넌트 전체를 넣어 주며 isServer router Component 등을 넗어준다\r\n    return(\r\n        <Provider store={store}>\r\n            <Head>\r\n            <title>NodeBird</title>\r\n        <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/antd/3.16.2/antd.css\" />\r\n        <link rel=\"stylesheet\" type=\"text/css\" charSet=\"UTF-8\" href=\"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick.min.css\" />\r\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick-theme.min.css\" />\r\n            </Head>\r\n            <AppLayout>\r\n                <Component {...pageProps} />\r\n            </AppLayout>\r\n        </Provider>\r\n    );\r\n}\r\n//store 만드는 과정 withRedux라는 고위함수를 만들어 주는데 확장자 처럼 사용되며\r\n//state+reducer가 합쳐진 것을 모으는 곳이 store라고함\r\n// export default withRedux((initialState,options)=>{\r\n//     const middlewares = [];\r\n//     const enhancer =  compose(\r\n//         applyMiddleware(...middlewares)\r\n//         ,!options.isServer && window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? \r\n//         window.__REDUX_DEVTOOLS_EXTENSION__():(f)=>f);\r\n//     const store=createStore(reducer,initialState,enhancer);\r\n// //middlewares는 state,action,reducer와 store사이 기능을 추가 변조 할수있는 역할을 가짐    \r\n//     return store;\r\n// })(Nodebird);\r\n\r\nNodebird.getInitialProps = async (context) => {\r\n    const { ctx ,Component } = context;\r\n    let pageProps = {};\r\n    if(context.Component.getInitialProps){\r\n        pageProps =await context.Component.getInitialProps(ctx);\r\n    }\r\n    console.log(pageProps)\r\n    return { pageProps }\r\n}\r\n\r\n// NodeBird.getInitialProps = async (context) => {\r\n//     console.log(context);\r\n//     const { ctx, Component } = context;\r\n//     let pageProps = {};\r\n//     if (Component.getInitialProps) {\r\n//       pageProps = await Component.getInitialProps(ctx);\r\n//     }\r\n//     return { pageProps };\r\n//   };\r\n\r\nconst configureStore = (initialState, options) => {\r\n    const sagaMiddleware = createSagaMiddleware();\r\n    const middlewares = [sagaMiddleware];\r\n    const enhancer = process.env.NODE_ENV === 'production'\r\n      ? compose(applyMiddleware(...middlewares))\r\n      : compose(\r\n        applyMiddleware(...middlewares),\r\n        !options.isServer && typeof window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : f => f,\r\n      );\r\n    const store = createStore(reducer, initialState, enhancer);\r\n    sagaMiddleware.run(rootSaga);\r\n    return store;\r\n  };\r\n  \r\n  export default withRedux(configureStore)(Nodebird);"]},"metadata":{},"sourceType":"module"}