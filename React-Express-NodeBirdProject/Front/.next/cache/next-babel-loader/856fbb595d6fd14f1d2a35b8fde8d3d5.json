{"ast":null,"code":"//call 함수 동기적으로 호출 fork 함수 비동기적으로 호출 put 액션 dispatch take 해당 액션이 dispatch 되면 제너레이터 next를 실행 하게함\n//all 여러 이펙트를 동시에 실항 할 수 있게 함\n//사가 자체 적으로 next() 호출을 자동으로 해주는 제너레이터임\n//제너레이터는 한번 사용하면 다시 사용 할 수 없기 때문에 무한 루프를 사용하여 반복 실행이 될 수 있도록 한다\nimport { all, call, put, takeLatest, fork, take, delay } from 'redux-saga/effects';\nimport { LOG_IN } from '../Reducer/user';\nimport { LOG_IN_SUCCESS, LOG_IN_FAIL } from '../Reducer/user';\n\nfunction loginAPI() {}\n\nfunction* login() {\n  try {\n    yield call(loginAPI);\n    yield put({\n      type: LOG_IN_SUCCESS\n    });\n  } catch (e) {\n    console.log(e);\n    yield put({\n      type: LOG_IN_FAIL\n    });\n  }\n}\n\nfunction* watchLogin() {\n  while (true) {\n    console.log(\"대기\");\n    yield take(LOG_IN);\n    yield delay(2000);\n    yield put({\n      type: LOG_IN_SUCCESS\n    });\n    console.log(\"LOG_IN_SUCCESS\");\n  }\n}\n\nexport default function* userSaga() {\n  yield all([watchLogin()]);\n}","map":{"version":3,"sources":["C:/ReactNodeBird/Front/sagas/user.js"],"names":["all","call","put","takeLatest","fork","take","delay","LOG_IN","LOG_IN_SUCCESS","LOG_IN_FAIL","loginAPI","login","type","e","console","log","watchLogin","userSaga"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,GAAT,EAAcC,IAAd,EAAmBC,GAAnB,EAAuBC,UAAvB,EAAmCC,IAAnC,EAAwCC,IAAxC,EAA6CC,KAA7C,QAAyD,oBAAzD;AACA,SAASC,MAAT,QAAuB,iBAAvB;AACA,SAASC,cAAT,EAAwBC,WAAxB,QAA2C,iBAA3C;;AAEA,SAASC,QAAT,GAAmB,CAElB;;AAED,UAAUC,KAAV,GAAiB;AACb,MAAG;AACC,UAAMV,IAAI,CAACS,QAAD,CAAV;AACA,UAAMR,GAAG,CAAC;AACNU,MAAAA,IAAI,EAACJ;AADC,KAAD,CAAT;AAGH,GALD,CAKC,OAAMK,CAAN,EAAQ;AACLC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACA,UAAMX,GAAG,CAAC;AACNU,MAAAA,IAAI,EAACH;AADC,KAAD,CAAT;AAGH;AACJ;;AAED,UAAUO,UAAV,GAAsB;AAClB,SAAM,IAAN,EAAW;AACPF,IAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACA,UAAMV,IAAI,CAACE,MAAD,CAAV;AACA,UAAMD,KAAK,CAAC,IAAD,CAAX;AACA,UAAMJ,GAAG,CAAC;AACNU,MAAAA,IAAI,EAACJ;AADC,KAAD,CAAT;AAGAM,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AAEH;AACJ;;AAID,eAAe,UAAUE,QAAV,GAAoB;AAC/B,QAAMjB,GAAG,CAAC,CACNgB,UAAU,EADJ,CAAD,CAAT;AAGH","sourcesContent":["//call 함수 동기적으로 호출 fork 함수 비동기적으로 호출 put 액션 dispatch take 해당 액션이 dispatch 되면 제너레이터 next를 실행 하게함\r\n//all 여러 이펙트를 동시에 실항 할 수 있게 함\r\n//사가 자체 적으로 next() 호출을 자동으로 해주는 제너레이터임\r\n//제너레이터는 한번 사용하면 다시 사용 할 수 없기 때문에 무한 루프를 사용하여 반복 실행이 될 수 있도록 한다\r\nimport { all ,call,put,takeLatest, fork,take,delay} from 'redux-saga/effects';\r\nimport { LOG_IN } from '../Reducer/user';\r\nimport { LOG_IN_SUCCESS,LOG_IN_FAIL } from '../Reducer/user';\r\n\r\nfunction loginAPI(){\r\n\r\n}\r\n\r\nfunction* login(){\r\n    try{\r\n        yield call(loginAPI);\r\n        yield put({\r\n            type:LOG_IN_SUCCESS\r\n        })\r\n    }catch(e){\r\n        console.log(e)\r\n        yield put({\r\n            type:LOG_IN_FAIL\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLogin(){\r\n    while(true){\r\n        console.log(\"대기\");\r\n        yield take(LOG_IN)\r\n        yield delay(2000);\r\n        yield put({\r\n            type:LOG_IN_SUCCESS\r\n        })\r\n        console.log(\"LOG_IN_SUCCESS\");\r\n    \r\n    }\r\n}\r\n\r\n\r\n\r\nexport default function* userSaga(){\r\n    yield all([\r\n        watchLogin()\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}