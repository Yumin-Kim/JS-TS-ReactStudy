{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport Link from \"next/link\";\nimport { Card, Icon, Button, Avatar, Divider, Form, Input, List, Comment } from \"antd\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { ADD_POST_REQUEST, ADD_COMMENT_REQUEST } from \"../Reducer/post\";\n\nvar PostCard = function PostCard(_ref) {\n  var post = _ref.post;\n\n  var _useState = useState(false),\n      commentFormOpened = _useState[0],\n      setCommentOpened = _useState[1];\n\n  var _useState2 = useState(\"\"),\n      commentText = _useState2[0],\n      setCommentText = _useState2[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      commentAdded = _useSelector2.commentAdded,\n      isAddingComment = _useSelector2.isAddingComment;\n\n  var dispatch = useDispatch();\n  var onToggleComment = useCallback(function () {\n    setCommentOpened(function (prev) {\n      return !prev;\n    });\n  }, []);\n  var onSubmitComment = useCallback(function (e) {\n    e.preventDefault();\n    console.log(me);\n\n    if (!me) {\n      return alert(\"로그인 필요합니다\");\n    }\n\n    console.log(post);\n    dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id\n      }\n    });\n  }, [me && me.id]);\n  var onChangeCommentText = useCallback(function (e) {\n    setCommentText(e.target.value);\n  }, []);\n  useEffect(function () {\n    setCommentText(\"\");\n  }, [commentAdded === true]);\n  return __jsx(\"div\", null, __jsx(Card, {\n    key: +post.createdAt,\n    cover: post.img && __jsx(\"img\", {\n      alt: \"example\",\n      src: post.img\n    }),\n    actions: [__jsx(Icon, {\n      type: \"retweet\",\n      key: \"retweet\"\n    }), __jsx(Icon, {\n      type: \"heart\",\n      key: \"heart\"\n    }), __jsx(Icon, {\n      type: \"message\",\n      key: \"message\",\n      onClick: onToggleComment\n    }), __jsx(Icon, {\n      type: \"ellipsis\",\n      key: \"ellipsis\"\n    })],\n    extra: __jsx(Button, null, \"\\uD314\\uB85C\\uC6B0\")\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: {\n        pathname: \"/user\",\n        query: {\n          id: post.User.id\n        }\n      }\n    }, __jsx(\"a\", null, __jsx(Avatar, null, post.User.nickname[0]))),\n    title: post.User.nickname,\n    description: __jsx(\"div\", null, post.content.split(/(#[^\\s]+)/g).map(function (v) {\n      if (v.match(/(#[^\\s]+)/g)) {\n        return __jsx(Link, {\n          href: {\n            pathname: \"/hashtag\",\n            query: {\n              tag: v.slice(1)\n            }\n          },\n          key: v\n        }, __jsx(\"a\", null, v));\n      }\n\n      return v;\n    }))\n  })), commentFormOpened && __jsx(React.Fragment, null, __jsx(Form, {\n    onSubmit: onSubmitComment\n  }, __jsx(Form.Item, null, __jsx(Input.TextArea, {\n    rows: 4,\n    value: commentText,\n    onChange: onChangeCommentText\n  })), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: isAddingComment\n  }, \" \", \"\\uC785\\uB825!!\", \" \")), __jsx(List, {\n    header: \"\".concat(post.Comments ? post.Comments.length : 0, \" \\uB313\\uAE00\"),\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments || [],\n    renderItem: function renderItem(item) {\n      return __jsx(\"li\", null, __jsx(Comment, {\n        author: item.User.nickname,\n        avatar: __jsx(Link, {\n          href: {\n            pathname: '/user',\n            query: {\n              id: item.User.id\n            }\n          }\n        }, __jsx(\"a\", null, __jsx(Avatar, null, item.User.nickname[0]))),\n        content: item.content,\n        datetime: item.createAt\n      }));\n    }\n  })));\n};\n\nexport default PostCard;","map":{"version":3,"sources":["c:/ReactNodeBird/Front/components/PostCard.js"],"names":["React","useState","useCallback","useEffect","Link","Card","Icon","Button","Avatar","Divider","Form","Input","List","Comment","useSelector","useDispatch","ADD_POST_REQUEST","ADD_COMMENT_REQUEST","PostCard","post","commentFormOpened","setCommentOpened","commentText","setCommentText","state","user","me","commentAdded","isAddingComment","dispatch","onToggleComment","prev","onSubmitComment","e","preventDefault","console","log","alert","type","data","postId","id","onChangeCommentText","target","value","createdAt","img","pathname","query","User","nickname","content","split","map","v","match","tag","slice","Comments","length","item","createAt"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from \"react\";\r\nimport Link from \"next/link\";\r\nimport {\r\n  Card,\r\n  Icon,\r\n  Button,\r\n  Avatar,\r\n  Divider,\r\n  Form,\r\n  Input,\r\n  List,\r\n  Comment\r\n} from \"antd\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { ADD_POST_REQUEST, ADD_COMMENT_REQUEST } from \"../Reducer/post\";\r\n\r\nconst PostCard = ({ post }) => {\r\n  const [commentFormOpened, setCommentOpened] = useState(false);\r\n  const [commentText, setCommentText] = useState(\"\");\r\n  const { me } = useSelector(state => state.user);\r\n  const { commentAdded, isAddingComment } = useSelector(state => state.post);\r\n  const dispatch = useDispatch();\r\n\r\n  const onToggleComment = useCallback(() => {\r\n    setCommentOpened(prev => !prev);\r\n  }, []);\r\n\r\n  const onSubmitComment = useCallback(\r\n    e => {\r\n      e.preventDefault();\r\n      console.log(me);\r\n      if (!me) {\r\n        return alert(\"로그인 필요합니다\");\r\n      }\r\n      console.log(post);\r\n      dispatch({\r\n        type: ADD_COMMENT_REQUEST,\r\n        data: {\r\n          postId: post.id\r\n        }\r\n      });\r\n    },\r\n    [me && me.id]\r\n  );\r\n\r\n  const onChangeCommentText = useCallback(e => {\r\n    setCommentText(e.target.value);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setCommentText(\"\");\r\n  }, [commentAdded === true]);\r\n  return (\r\n    <div>\r\n      <Card\r\n        key={+post.createdAt}\r\n        cover={post.img && <img alt=\"example\" src={post.img} />}\r\n        actions={[\r\n          <Icon type=\"retweet\" key=\"retweet\" />,\r\n          <Icon type=\"heart\" key=\"heart\" />,\r\n          <Icon type=\"message\" key=\"message\" onClick={onToggleComment} />,\r\n          <Icon type=\"ellipsis\" key=\"ellipsis\" />\r\n        ]}\r\n        extra={<Button>팔로우</Button>}\r\n      >\r\n        <Card.Meta\r\n          avatar={\r\n            <Link href={{ pathname: `/user`, query: { id: post.User.id } }}>\r\n              <a>\r\n                <Avatar>{post.User.nickname[0]}</Avatar>\r\n              </a>\r\n            </Link>\r\n          }\r\n          title={post.User.nickname}\r\n          description={\r\n            <div>\r\n              {post.content.split(/(#[^\\s]+)/g).map(v => {\r\n                if (v.match(/(#[^\\s]+)/g)) {\r\n                  return (\r\n                    <Link\r\n                      href={{\r\n                        pathname: \"/hashtag\",\r\n                        query: { tag: v.slice(1) }\r\n                      }}\r\n                      key={v}\r\n                    >\r\n                      <a>{v}</a>\r\n                    </Link>\r\n                  );\r\n                }\r\n                return v;\r\n              })}\r\n            </div>\r\n          }\r\n        />\r\n      </Card>\r\n      {commentFormOpened && (\r\n        <>\r\n          <Form onSubmit={onSubmitComment}>\r\n            <Form.Item>\r\n              <Input.TextArea\r\n                rows={4}\r\n                value={commentText}\r\n                onChange={onChangeCommentText}\r\n              />\r\n            </Form.Item>\r\n            <Button type=\"primary\" htmlType=\"submit\" loading={isAddingComment}>\r\n              {\" \"}\r\n              입력!!{\" \"}\r\n            </Button>\r\n          </Form>\r\n          <List\r\n            header={`${post.Comments ? post.Comments.length : 0} 댓글`}\r\n            itemLayout=\"horizontal\"\r\n            dataSource={post.Comments || []}\r\n            renderItem={item => (\r\n              <li>\r\n                <Comment\r\n                  author={item.User.nickname}\r\n                  avatar={\r\n                    <Link href={{pathname:'/user',query:{id:item.User.id}}}>\r\n                      <a>\r\n                        <Avatar>{item.User.nickname[0]}</Avatar>\r\n                      </a>\r\n                    </Link>\r\n                  }\r\n                  content={item.content}\r\n                  datetime={item.createAt}\r\n                />\r\n              </li>\r\n            )}\r\n          />\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostCard;\r\n"]},"metadata":{},"sourceType":"module"}