{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(appPost),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchAddPost),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadMainPosts),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchMainLoadPosts),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadUserPosts),\n    _marked6 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadUserPosts),\n    _marked7 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadHashtagPosts),\n    _marked8 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadHashtagPosts),\n    _marked9 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addComment),\n    _marked10 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchAddComment),\n    _marked11 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadComments),\n    _marked12 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadComments),\n    _marked13 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(uploadImages),\n    _marked14 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchUploadImages),\n    _marked15 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(userSaga);\n\nimport { put, all, fork, takeLatest, delay, call } from 'redux-saga/effects';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_FAILURE, LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_COMMENTS_REQUEST, LOAD_COMMENTS_SUCCESS, LOAD_COMMENTS_FAILURE, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_REQUEST } from '../Reducer/post';\nimport axios from 'axios';\n\nfunction addPostAPI(postData) {\n  return axios.post('http://localhost:3065/api/post', postData, {\n    withCredentials: true\n  });\n}\n\nfunction appPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function appPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(addPostAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 12;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 12;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(ADD_POST_REQUEST, appPost);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction loadMainPostsAPI() {\n  return axios.get('http://localhost:3065/api/posts');\n}\n\nfunction loadMainPosts() {\n  var result;\n  return _regeneratorRuntime.wrap(function loadMainPosts$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(loadMainPostsAPI);\n\n        case 3:\n          result = _context3.sent;\n          _context3.next = 6;\n          return put({\n            type: LOAD_MAIN_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context3.next = 12;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 12;\n          return put({\n            type: LOAD_MAIN_POSTS_FAILURE,\n            error: _context3.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n\nfunction watchMainLoadPosts() {\n  return _regeneratorRuntime.wrap(function watchMainLoadPosts$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction loadUserPostsAPI(id) {\n  return axios.get(\"http://localhost:3065/api/user/\".concat(id, \"/posts\"));\n}\n\nfunction loadUserPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadUserPosts$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(loadUserPostsAPI, action.data);\n\n        case 3:\n          result = _context5.sent;\n          _context5.next = 6;\n          return put({\n            type: LOAD_USER_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context5.next = 12;\n          break;\n\n        case 8:\n          _context5.prev = 8;\n          _context5.t0 = _context5[\"catch\"](0);\n          _context5.next = 12;\n          return put({\n            type: LOAD_USER_POSTS_FAILURE,\n            error: _context5.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 8]]);\n}\n\nfunction watchLoadUserPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadUserPosts$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction loadHashtagPostsAPI(tag) {\n  return axios.get(\"http://localhost:3065/api/hashtag/\".concat(tag));\n}\n\nfunction loadHashtagPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadHashtagPosts$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return call(loadHashtagPostsAPI, action.data);\n\n        case 3:\n          result = _context7.sent;\n          _context7.next = 6;\n          return put({\n            type: LOAD_HASHTAG_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context7.next = 12;\n          break;\n\n        case 8:\n          _context7.prev = 8;\n          _context7.t0 = _context7[\"catch\"](0);\n          _context7.next = 12;\n          return put({\n            type: LOAD_HASHTAG_POSTS_FAILURE,\n            error: _context7.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[0, 8]]);\n}\n\nfunction watchLoadHashtagPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadHashtagPosts$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(\"http://localhost:3065/api/posts/\".concat(data.postId, \"/comment\"), {\n    content: data.content\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction addComment(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addComment$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.prev = 0;\n          _context9.next = 3;\n          return call(addCommentAPI, action.data);\n\n        case 3:\n          result = _context9.sent;\n          _context9.next = 6;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: {\n              postId: action.data.postId,\n              comment: result.data\n            }\n          });\n\n        case 6:\n          _context9.next = 13;\n          break;\n\n        case 8:\n          _context9.prev = 8;\n          _context9.t0 = _context9[\"catch\"](0);\n          console.error(_context9.t0);\n          _context9.next = 13;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context9.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9, null, [[0, 8]]);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10);\n}\n\nfunction loadCommentsAPI(postId) {\n  return axios.get(\"http://localhost:3065/api/posts/\".concat(postId, \"/comments\"));\n}\n\nfunction loadComments(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadComments$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.prev = 0;\n          _context11.next = 3;\n          return call(loadCommentsAPI, action.data);\n\n        case 3:\n          result = _context11.sent;\n          _context11.next = 6;\n          return put({\n            type: LOAD_COMMENTS_SUCCESS,\n            data: {\n              postId: action.data,\n              comments: result.data\n            }\n          });\n\n        case 6:\n          _context11.next = 13;\n          break;\n\n        case 8:\n          _context11.prev = 8;\n          _context11.t0 = _context11[\"catch\"](0);\n          console.error(_context11.t0);\n          _context11.next = 13;\n          return put({\n            type: LOAD_COMMENTS_FAILURE,\n            error: _context11.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11, null, [[0, 8]]);\n}\n\nfunction watchLoadComments() {\n  return _regeneratorRuntime.wrap(function watchLoadComments$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          _context12.next = 2;\n          return takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\n\n        case 2:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, _marked12);\n}\n\nfunction uploadImagesAPI(formData) {\n  return axios.post(\"http://localhost:3065/api/post/images\", formData, {\n    withCredentials: true\n  });\n}\n\nfunction uploadImages(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function uploadImages$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          _context13.prev = 0;\n          _context13.next = 3;\n          return call(uploadImagesAPI, action.data);\n\n        case 3:\n          result = _context13.sent;\n          _context13.next = 6;\n          return put({\n            type: UPLOAD_IMAGES_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context13.next = 13;\n          break;\n\n        case 8:\n          _context13.prev = 8;\n          _context13.t0 = _context13[\"catch\"](0);\n          console.error(_context13.t0);\n          _context13.next = 13;\n          return put({\n            type: UPLOAD_IMAGES_FAILURE,\n            error: _context13.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, _marked13, null, [[0, 8]]);\n}\n\nfunction watchUploadImages() {\n  return _regeneratorRuntime.wrap(function watchUploadImages$(_context14) {\n    while (1) {\n      switch (_context14.prev = _context14.next) {\n        case 0:\n          _context14.next = 2;\n          return takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n\n        case 2:\n        case \"end\":\n          return _context14.stop();\n      }\n    }\n  }, _marked14);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context15) {\n    while (1) {\n      switch (_context15.prev = _context15.next) {\n        case 0:\n          _context15.next = 2;\n          return all([fork(watchAddPost), fork(watchAddComment), fork(watchLoadComments), fork(watchMainLoadPosts), fork(watchLoadHashtagPosts), fork(watchLoadUserPosts), fork(watchUploadImages), fork(watchLikePost), fork(watchunLikePost)]);\n\n        case 2:\n        case \"end\":\n          return _context15.stop();\n      }\n    }\n  }, _marked15);\n}","map":{"version":3,"sources":["C:/ReactNodeBird/Front/sagas/post.js"],"names":["appPost","watchAddPost","loadMainPosts","watchMainLoadPosts","loadUserPosts","watchLoadUserPosts","loadHashtagPosts","watchLoadHashtagPosts","addComment","watchAddComment","loadComments","watchLoadComments","uploadImages","watchUploadImages","userSaga","put","all","fork","takeLatest","delay","call","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_COMMENTS_REQUEST","LOAD_COMMENTS_SUCCESS","LOAD_COMMENTS_FAILURE","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","UPLOAD_IMAGES_REQUEST","axios","addPostAPI","postData","post","withCredentials","action","data","result","type","error","loadMainPostsAPI","get","loadUserPostsAPI","id","loadHashtagPostsAPI","tag","addCommentAPI","postId","content","comment","console","loadCommentsAPI","comments","uploadImagesAPI","formData","watchLikePost","watchunLikePost"],"mappings":"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","sourcesContent":["import {put, all, fork,takeLatest,delay,call } from 'redux-saga/effects';\r\nimport { \r\n  ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE ,\r\n  ADD_COMMENT_FAILURE,ADD_COMMENT_REQUEST,ADD_COMMENT_SUCCESS, \r\n  LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_FAILURE, \r\n  LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, \r\n  LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_COMMENTS_REQUEST, LOAD_COMMENTS_SUCCESS, LOAD_COMMENTS_FAILURE, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_REQUEST \r\n} from '../Reducer/post';\r\nimport axios from 'axios';\r\n\r\nfunction addPostAPI (postData) {\r\n  return axios.post('http://localhost:3065/api/post',postData,{\r\n    withCredentials:true,\r\n  })\r\n}\r\n\r\nfunction* appPost(action){\r\n  try{\r\n    const result = yield call(addPostAPI,action.data)\r\n    yield put({\r\n      type:ADD_POST_SUCCESS,\r\n      data:result.data,\r\n    })\r\n  }catch(e){\r\n    yield put({\r\n      type:ADD_POST_FAILURE,\r\n      error:e\r\n    })\r\n  }\r\n}\r\n\r\nfunction* watchAddPost(){\r\n  yield takeLatest(ADD_POST_REQUEST,appPost);\r\n}\r\nfunction loadMainPostsAPI () {\r\n  return axios.get('http://localhost:3065/api/posts')\r\n\r\n}\r\n\r\nfunction* loadMainPosts(){\r\n  try{\r\n    const result = yield call(loadMainPostsAPI);\r\n    yield put({\r\n      type:LOAD_MAIN_POSTS_SUCCESS,\r\n      data: result.data\r\n    })\r\n  }catch(e){\r\n    yield put({\r\n      type:LOAD_MAIN_POSTS_FAILURE,\r\n      error:e\r\n    })\r\n  }\r\n}\r\n\r\nfunction* watchMainLoadPosts(){\r\n  yield takeLatest(LOAD_MAIN_POSTS_REQUEST,loadMainPosts);\r\n}\r\nfunction loadUserPostsAPI (id) {\r\n  return axios.get(`http://localhost:3065/api/user/${id}/posts`)\r\n\r\n}\r\n\r\nfunction* loadUserPosts(action){\r\n  try{\r\n    const result = yield call(loadUserPostsAPI,action.data);\r\n    yield put({\r\n      type:LOAD_USER_POSTS_SUCCESS,\r\n      data: result.data\r\n    })\r\n  }catch(e){\r\n    yield put({\r\n      type:LOAD_USER_POSTS_FAILURE,\r\n      error:e\r\n    })\r\n  }\r\n}\r\n\r\nfunction* watchLoadUserPosts(){\r\n  yield takeLatest(LOAD_USER_POSTS_REQUEST,loadUserPosts);\r\n}\r\nfunction loadHashtagPostsAPI (tag) {\r\n  return axios.get(`http://localhost:3065/api/hashtag/${tag}`)\r\n\r\n}\r\n\r\nfunction* loadHashtagPosts(action){\r\n  try{\r\n    const result = yield call(loadHashtagPostsAPI,action.data);\r\n    yield put({\r\n      type:LOAD_HASHTAG_POSTS_SUCCESS,\r\n      data: result.data\r\n    })\r\n  }catch(e){\r\n    yield put({\r\n      type:LOAD_HASHTAG_POSTS_FAILURE,\r\n      error:e\r\n    })\r\n  }\r\n}\r\n\r\nfunction* watchLoadHashtagPosts(){\r\n  yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST,loadHashtagPosts);\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n  return axios.post(`http://localhost:3065/api/posts/${data.postId}/comment`, { content: data.content }, {\r\n    withCredentials: true,\r\n  });\r\n}\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    const result = yield call(addCommentAPI, action.data);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: {\r\n        postId: action.data.postId,\r\n        comment: result.data,\r\n      },\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nfunction loadCommentsAPI(postId) {\r\n  return axios.get(`http://localhost:3065/api/posts/${postId}/comments`);\r\n}\r\n\r\nfunction* loadComments(action) {\r\n  try {\r\n    const result = yield call(loadCommentsAPI, action.data);\r\n    yield put({\r\n      type: LOAD_COMMENTS_SUCCESS,\r\n      data: {\r\n        postId: action.data,\r\n        comments: result.data,\r\n      },\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: LOAD_COMMENTS_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadComments() {\r\n  yield takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\r\n}\r\nfunction uploadImagesAPI(formData) {\r\n  return axios.post(`http://localhost:3065/api/post/images`,formData,{\r\n    withCredentials:true\r\n  });\r\n}\r\n\r\nfunction* uploadImages(action) {\r\n  try {\r\n    const result = yield call(uploadImagesAPI, action.data);\r\n    yield put({\r\n      type: UPLOAD_IMAGES_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: UPLOAD_IMAGES_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchUploadImages() {\r\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\r\n}\r\n\r\nexport default function* userSaga(){\r\n    yield all([\r\n      fork(watchAddPost),\r\n      fork(watchAddComment),\r\n      fork(watchLoadComments),\r\n      fork(watchMainLoadPosts),\r\n      fork(watchLoadHashtagPosts),\r\n      fork(watchLoadUserPosts),\r\n      fork(watchUploadImages),\r\n      fork(watchLikePost),\r\n      fork(watchunLikePost),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}