{"ast":null,"code":"var _jsxFileName = \"C:\\\\ReactNodeBird\\\\Front\\\\components\\\\PostCard.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useCallback } from \"react\";\nimport { Card, Icon, Button, Avatar, Divider, Form, Input, List, Comment } from \"antd\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { ADD_POST_REQUEST } from \"../Reducer/post\";\n\nconst PostCard = ({\n  post\n}) => {\n  const {\n    0: commentFormOpened,\n    1: setCommentOpened\n  } = useState(false);\n  const {\n    0: commentText,\n    1: setCommentText\n  } = useState(\"\");\n  const {\n    me\n  } = useSelector(state => state.user);\n  const dispatch = useDispatch();\n  const onToggleComment = useCallback(() => {\n    setCommentOpened(prev => !prev);\n\n    if (!commentFormOpened) {}\n  }, []);\n  const onSubmitComment = useCallback(e => {\n    e.preventDefault();\n    console.log(me);\n\n    if (!me) {\n      return alert('로그인 필요합니다');\n    }\n\n    dispatch({\n      type: ADD_POST_REQUEST\n    });\n  }, []);\n  const onChangeCommentText = useCallback(e => {\n    setCommentText(e.target.value);\n  }, []);\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, __jsx(Card, {\n    key: +post.createAt,\n    cover: post.img && __jsx(\"img\", {\n      alt: \"example\",\n      src: post.img,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }),\n    actions: [__jsx(Icon, {\n      type: \"retweet\",\n      key: \"retweet\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }), __jsx(Icon, {\n      type: \"heart\",\n      key: \"heart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }), __jsx(Icon, {\n      type: \"message\",\n      key: \"message\",\n      onClick: onToggleComment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }), __jsx(Icon, {\n      type: \"ellipsis\",\n      key: \"ellipsis\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    })],\n    extra: __jsx(Button, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, \"\\uD314\\uB85C\\uC6B0\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Avatar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, post.User.nickname[0]),\n    title: post.User.nickname,\n    description: post.User.content,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  })), commentFormOpened && __jsx(React.Fragment, null, __jsx(Form, {\n    onSubmit: onSubmitComment,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, __jsx(Form.Item, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, __jsx(Input.TextArea, {\n    rows: 4,\n    value: commentText,\n    onChange: onChangeCommentText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  })), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, \" \\uC785\\uB825!! \")), __jsx(List, {\n    header: `${post.Comments ? post.Comments.length : 0}`,\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments || [],\n    renderItem: item => __jsx(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, __jsx(Comment, {\n      author: item.User.nickname,\n      avatar: __jsx(Avatar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, item.User.nickname[0]),\n      content: item.content,\n      datetime: item.createAt,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  })));\n};\n\nexport default PostCard;","map":{"version":3,"sources":["C:/ReactNodeBird/Front/components/PostCard.js"],"names":["React","useState","useCallback","Card","Icon","Button","Avatar","Divider","Form","Input","List","Comment","useSelector","useDispatch","ADD_POST_REQUEST","PostCard","post","commentFormOpened","setCommentOpened","commentText","setCommentText","me","state","user","dispatch","onToggleComment","prev","onSubmitComment","e","preventDefault","console","log","alert","type","onChangeCommentText","target","value","createAt","img","User","nickname","content","Comments","length","item"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from \"react\";\r\nimport { Card, Icon, Button, Avatar, Divider, Form, Input, List,Comment } from \"antd\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { ADD_POST_REQUEST } from \"../Reducer/post\";\r\n\r\nconst PostCard = ({ post }) => {\r\n  const [commentFormOpened, setCommentOpened] = useState(false);\r\n  const [commentText, setCommentText] = useState(\"\");\r\n  const { me } = useSelector(state => state.user);\r\n  const dispatch = useDispatch();\r\n\r\n  const onToggleComment = useCallback(() => {\r\n    setCommentOpened(prev => !prev);\r\n    if (!commentFormOpened) {\r\n    }\r\n  }, []);\r\n\r\n  const onSubmitComment = useCallback((e) =>{\r\n      e.preventDefault();\r\n      console.log(me)\r\n      if(!me){\r\n          return alert('로그인 필요합니다');\r\n      }\r\n      dispatch({\r\n          type:ADD_POST_REQUEST\r\n      })\r\n  },[])\r\n\r\n  const onChangeCommentText = useCallback((e) =>{\r\n      setCommentText(e.target.value)\r\n  },[]);\r\n\r\n  return (\r\n    <div>\r\n      <Card\r\n        key={+post.createAt}\r\n        cover={post.img && <img alt=\"example\" src={post.img} />}\r\n        actions={[\r\n          <Icon type=\"retweet\" key=\"retweet\" />,\r\n          <Icon type=\"heart\" key=\"heart\" />,\r\n          <Icon type=\"message\" key=\"message\" onClick={onToggleComment} />,\r\n          <Icon type=\"ellipsis\" key=\"ellipsis\" />\r\n        ]}\r\n        extra={<Button>팔로우</Button>}\r\n      >\r\n        <Card.Meta\r\n          avatar={<Avatar>{post.User.nickname[0]}</Avatar>}\r\n          title={post.User.nickname}\r\n          description={post.User.content}\r\n        />\r\n      </Card>\r\n      {commentFormOpened && \r\n      <>\r\n        <Form onSubmit = {onSubmitComment} >\r\n            <Form.Item>\r\n                <Input.TextArea rows={4} value={commentText} onChange={onChangeCommentText} />\r\n            </Form.Item>\r\n            <Button type=\"primary\" htmlType=\"submit\" > 입력!! </Button>\r\n        </Form>\r\n        <List \r\n            header ={`${post.Comments ? post.Comments.length : 0 }`}\r\n            itemLayout=\"horizontal\"\r\n            dataSource={post.Comments || [] }\r\n            renderItem={item=>(<li>\r\n                <Comment\r\n                    author = {item.User.nickname}\r\n                    avatar = {<Avatar>{item.User.nickname[0]}</Avatar>}\r\n                    content = {item.content}\r\n                    datetime = {item.createAt}\r\n                />\r\n            </li>)}\r\n         />\r\n      </>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostCard;\r\n"]},"metadata":{},"sourceType":"module"}