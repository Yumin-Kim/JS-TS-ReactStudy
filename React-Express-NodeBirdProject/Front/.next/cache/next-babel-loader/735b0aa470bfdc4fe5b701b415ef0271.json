{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Helmet from 'react-helmet';\nimport { useSelector } from 'react-redux';\nimport { LOAD_POST_REQUEST } from '../Reducer/post';\n\nvar Post = function Post(prop) {\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      singlePost = _useSelector.singlePost;\n\n  console.log(prop);\n  return __jsx(React.Fragment, null, __jsx(Helmet, {\n    title: \"\".concat(singlePost.User.nickname, \"\\uB2D8\\uC758 \\uAE00\"),\n    description: \"\".concat(singlePost.content),\n    meta: [{\n      name: 'description',\n      content: \"\".concat(singlePost.content)\n    }, {\n      name: 'og:title',\n      content: \"\".concat(singlePost.User.nickname, \"\\uC758 \\uAC8C\\uC2DC\\uAE00\")\n    }, {\n      name: 'og:description',\n      content: \"\".concat(singlePost.content)\n    }, {\n      property: 'og:image',\n      content: \"\".concat(singlePost.Images[0] && \"http://localhost:3065/\".concat(singlePost.Images[0].src))\n    }, {\n      property: 'og:url',\n      content: \"http://localhost:3060/post/\".concat(id)\n    }]\n  }), __jsx(\"div\", null, singlePost.content), __jsx(\"div\", null, singlePost.User.nickname), __jsx(\"div\", null, singlePost.Images[0] && __jsx(\"img\", {\n    src: \"http://localhost:3065/\".concat(post.Images[0].src)\n  })));\n};\n\nPost.getInitialProps = function _callee(context) {\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          context.store.dispatch({\n            type: LOAD_POST_REQUEST,\n            data: context.query.id\n          });\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default Post;","map":{"version":3,"sources":["C:/ReactNodeBird/Front/pages/post.js"],"names":["React","Helmet","useSelector","LOAD_POST_REQUEST","Post","prop","state","post","singlePost","console","log","User","nickname","content","name","property","Images","src","id","getInitialProps","context","store","dispatch","type","data","query"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAAQC,iBAAR,QAAgC,iBAAhC;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAACC,IAAD,EAAU;AAAA,qBACGH,WAAW,CAAC,UAAAI,KAAK;AAAA,WAAEA,KAAK,CAACC,IAAR;AAAA,GAAN,CADd;AAAA,MACXC,UADW,gBACXA,UADW;;AAEvBC,EAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ;AACI,SACI,4BACI,MAAC,MAAD;AACI,IAAA,KAAK,YAAMG,UAAU,CAACG,IAAX,CAAgBC,QAAtB,wBADT;AAEI,IAAA,WAAW,YAAKJ,UAAU,CAACK,OAAhB,CAFf;AAGI,IAAA,IAAI,EAAE,CAAC;AACHC,MAAAA,IAAI,EAAC,aADF;AACgBD,MAAAA,OAAO,YAAIL,UAAU,CAACK,OAAf;AADvB,KAAD,EAEJ;AACEC,MAAAA,IAAI,EAAC,UADP;AACkBD,MAAAA,OAAO,YAAIL,UAAU,CAACG,IAAX,CAAgBC,QAApB;AADzB,KAFI,EAIJ;AACEE,MAAAA,IAAI,EAAC,gBADP;AACwBD,MAAAA,OAAO,YAAIL,UAAU,CAACK,OAAf;AAD/B,KAJI,EAMJ;AACEE,MAAAA,QAAQ,EAAC,UADX;AACsBF,MAAAA,OAAO,YAAIL,UAAU,CAACQ,MAAX,CAAkB,CAAlB,qCAA+CR,UAAU,CAACQ,MAAX,CAAkB,CAAlB,EAAqBC,GAApE,CAAJ;AAD7B,KANI,EAQJ;AACEF,MAAAA,QAAQ,EAAC,QADX;AACoBF,MAAAA,OAAO,uCAA+BK,EAA/B;AAD3B,KARI;AAHV,IADJ,EAiBI,mBAAMV,UAAU,CAACK,OAAjB,CAjBJ,EAkBI,mBAAML,UAAU,CAACG,IAAX,CAAgBC,QAAtB,CAlBJ,EAmBI,mBACKJ,UAAU,CAACQ,MAAX,CAAkB,CAAlB,KAAwB;AAAK,IAAA,GAAG,kCAA4BT,IAAI,CAACS,MAAL,CAAY,CAAZ,EAAeC,GAA3C;AAAR,IAD7B,CAnBJ,CADJ;AAyBH,CA5BD;;AA6BAb,IAAI,CAACe,eAAL,GAAuB,iBAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AACnBA,UAAAA,OAAO,CAACC,KAAR,CAAcC,QAAd,CAAuB;AACrBC,YAAAA,IAAI,EAAEpB,iBADe;AAErBqB,YAAAA,IAAI,EAACJ,OAAO,CAACK,KAAR,CAAcP;AAFE,WAAvB;;AADmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAvB;;AAOA,eAAed,IAAf","sourcesContent":["import React from 'react';\r\nimport Helmet from 'react-helmet';\r\nimport { useSelector } from 'react-redux';\r\nimport {LOAD_POST_REQUEST} from '../Reducer/post';\r\n\r\nconst Post = (prop) => {\r\n    const { singlePost } =useSelector(state=>state.post);\r\nconsole.log(prop)\r\n    return(\r\n        <>\r\n            <Helmet \r\n                title={ `${singlePost.User.nickname}님의 글` }\r\n                description={`${singlePost.content}`}\r\n                meta={[{\r\n                    name:'description',content:`${singlePost.content}`,\r\n                },{\r\n                    name:'og:title',content:`${singlePost.User.nickname}의 게시글`\r\n                },{\r\n                    name:'og:description',content:`${singlePost.content}`,\r\n                },{\r\n                    property:'og:image',content:`${singlePost.Images[0]&&`http://localhost:3065/${singlePost.Images[0].src}`}`\r\n                },{\r\n                    property:'og:url',content:`http://localhost:3060/post/${id}`\r\n                }]\r\n                }\r\n            />\r\n            <div>{singlePost.content}</div>\r\n            <div>{singlePost.User.nickname}</div>\r\n            <div>\r\n                {singlePost.Images[0] && <img src={ `http://localhost:3065/${post.Images[0].src}` }/>}\r\n            </div>\r\n        </>    \r\n    );\r\n}\r\nPost.getInitialProps = async (context) => {\r\n    context.store.dispatch({\r\n      type: LOAD_POST_REQUEST,\r\n      data:context.query.id\r\n    });\r\n  };\r\n\r\nexport default Post;"]},"metadata":{},"sourceType":"module"}