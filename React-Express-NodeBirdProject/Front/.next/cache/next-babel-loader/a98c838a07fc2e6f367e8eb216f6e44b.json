{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(login),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLogin),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(helloSaga),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(userSaga);\n\n//call 함수 동기적으로 호출 fork 함수 비동기적으로 호출 put 액션 dispatch take 해당 액션이 dispatch 되면 제너레이터 next를 실행 하게함\n//사가 자체 적으로 next() 호출을 자동으로 해주는 제너레이터임\nimport { all, call, put, takeLatest, fork, take } from 'redux-saga/effects';\nimport { LOG_IN } from '../Reducer/user';\nimport { LOG_IN_SUCCESS, LOG_IN_FAIL } from '../Reducer/user';\nexport var HELLO_SAGA = \"HELLO_SAGA\";\n\nfunction loginAPI() {}\n\nfunction login() {\n  return _regeneratorRuntime.wrap(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(loginAPI);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: LOG_IN_SUCCESS\n          });\n\n        case 5:\n          _context.next = 12;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(_context.t0);\n          _context.next = 12;\n          return put({\n            type: LOG_IN_FAIL\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(LOG_IN, login);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction helloSaga() {\n  return _regeneratorRuntime.wrap(function helloSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          console.log(\"Before Saga\");\n          _context3.next = 3;\n          return take(HELLO_SAGA);\n\n        case 3:\n          console.log(\"Hello Saga\");\n\n        case 4:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return helloSaga();\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}","map":{"version":3,"sources":["C:/ReactNodeBird/Front/sagas/user.js"],"names":["login","watchLogin","helloSaga","userSaga","all","call","put","takeLatest","fork","take","LOG_IN","LOG_IN_SUCCESS","LOG_IN_FAIL","HELLO_SAGA","loginAPI","type","console","log"],"mappings":";;;;yBAYUA,K;;;yBAcAC,U;;;yBAIAC,S;;;yBAMeC,Q;;AApCzB;AACA;AACA,SAASC,GAAT,EAAcC,IAAd,EAAmBC,GAAnB,EAAuBC,UAAvB,EAAmCC,IAAnC,EAAwCC,IAAxC,QAAmD,oBAAnD;AACA,SAASC,MAAT,QAAuB,iBAAvB;AACA,SAASC,cAAT,EAAwBC,WAAxB,QAA2C,iBAA3C;AAEA,OAAO,IAAMC,UAAU,GAAG,YAAnB;;AAEP,SAASC,QAAT,GAAmB,CAElB;;AAED,SAAUd,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQ,iBAAMK,IAAI,CAACS,QAAD,CAAV;;AAFR;AAAA;AAGQ,iBAAMR,GAAG,CAAC;AACNS,YAAAA,IAAI,EAACJ;AADC,WAAD,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAOQK,UAAAA,OAAO,CAACC,GAAR;AAPR;AAQQ,iBAAMX,GAAG,CAAC;AACNS,YAAAA,IAAI,EAACH;AADC,WAAD,CAAT;;AARR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAcA,SAAUX,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMM,UAAU,CAACG,MAAD,EAAQV,KAAR,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUE,SAAV;AAAA;AAAA;AAAA;AAAA;AACIc,UAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AADJ;AAEI,iBAAMR,IAAI,CAACI,UAAD,CAAV;;AAFJ;AAGIG,UAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;;AAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMA,eAAe,SAAUd,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMD,SAAS,EAAf;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["//call 함수 동기적으로 호출 fork 함수 비동기적으로 호출 put 액션 dispatch take 해당 액션이 dispatch 되면 제너레이터 next를 실행 하게함\r\n//사가 자체 적으로 next() 호출을 자동으로 해주는 제너레이터임\r\nimport { all ,call,put,takeLatest, fork,take} from 'redux-saga/effects';\r\nimport { LOG_IN } from '../Reducer/user';\r\nimport { LOG_IN_SUCCESS,LOG_IN_FAIL } from '../Reducer/user';\r\n\r\nexport const HELLO_SAGA = \"HELLO_SAGA\";\r\n\r\nfunction loginAPI(){\r\n\r\n}\r\n\r\nfunction* login(){\r\n    try{\r\n        yield call(loginAPI);\r\n        yield put({\r\n            type:LOG_IN_SUCCESS\r\n        })\r\n    }catch(e){\r\n        console.log(e)\r\n        yield put({\r\n            type:LOG_IN_FAIL\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLogin(){\r\n    yield takeLatest(LOG_IN,login)\r\n}\r\n\r\nfunction* helloSaga(){\r\n    console.log(\"Before Saga\")\r\n    yield take(HELLO_SAGA)\r\n    console.log(\"Hello Saga\");\r\n}\r\n\r\nexport default function* userSaga(){\r\n    yield helloSaga();\r\n}"]},"metadata":{},"sourceType":"module"}