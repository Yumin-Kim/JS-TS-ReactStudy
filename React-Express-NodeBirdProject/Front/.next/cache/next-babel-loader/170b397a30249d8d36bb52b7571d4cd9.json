{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport Helmet from \"react-helmet\";\nimport { Container } from 'next/app';\nimport AppLayout from \"../components/AppLayout\";\nimport withRedux from \"next-redux-wrapper\";\nimport withReduxsaga from \"next-redux-saga\";\nimport { Provider } from \"react-redux\";\nimport { createStore, compose, applyMiddleware } from \"redux\";\nimport reducer from \"../Reducer\";\nimport createSagaMiddleware from \"redux-saga\";\nimport rootSaga from \"../sagas\";\nimport { LOAD_USER_POSTS_REQUEST } from \"../Reducer/post\";\nimport { LOAD_USER_REQUEST } from \"../Reducer/user\";\nimport Axios from \"axios\"; //모든 페이지에 공통적으로 들어가는것들을 여기다모음\n\nconst Nodebird = ({\n  Component,\n  store,\n  pageProps\n}) => {\n  //Component는 Next.js에서 넣어 주는 멤버 >> 말그대로 컴포넌트 전체를 넣어 주며 isServer router Component 등을 넗어준다\n  return __jsx(Container, null, __jsx(Provider, {\n    store: store\n  }, __jsx(Helmet, {\n    title: \"NodeBird\",\n    htmlAttributes: {\n      lang: 'ko'\n    },\n    meta: [{\n      charset: 'UTF-8'\n    }, {\n      name: 'viewport',\n      content: 'width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=yes,viewport-fit=cover'\n    }, {\n      'http-equiv': 'X-UA-Compatible',\n      content: 'IE=edge'\n    }, {\n      name: 'description',\n      content: '제로초의 NodeBird SNS'\n    }, {\n      name: 'og:title',\n      content: 'NodeBird'\n    }, {\n      name: 'og:description',\n      content: '제로초의 NodeBird SNS'\n    }, {\n      property: 'og:type',\n      content: 'website'\n    }, {\n      property: 'og:image',\n      content: 'https://nodebird.com/favicon.ico'\n    }],\n    link: [{\n      rel: 'shortcut icon',\n      href: '/public/favicon.ico'\n    }, {\n      rel: 'stylesheet',\n      href: 'https://cdnjs.cloudflare.com/ajax/libs/antd/3.16.2/antd.css'\n    }, {\n      rel: 'stylesheet',\n      href: 'https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick.min.css'\n    }, {\n      rel: 'stylesheet',\n      href: 'https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick-theme.min.css'\n    }]\n  }), __jsx(AppLayout, null, __jsx(Component, pageProps))));\n}; //store 만드는 과정 withRedux라는 고위함수를 만들어 주는데 확장자 처럼 사용되며\n//state+reducer가 합쳐진 것을 모으는 곳이 store라고함\n// export default withRedux((initialState,options)=>{\n//     const middlewares = [];\n//     const enhancer =  compose(\n//         applyMiddleware(...middlewares)\n//         ,!options.isServer && window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ?\n//         window.__REDUX_DEVTOOLS_EXTENSION__():(f)=>f);\n//     const store=createStore(reducer,initialState,enhancer);\n// //middlewares는 state,action,reducer와 store사이 기능을 추가 변조 할수있는 역할을 가짐\n//     return store;\n// })(Nodebird);\n\n\nNodebird.getInitialProps = async context => {\n  const {\n    ctx,\n    Component\n  } = context;\n  let pageProps = {};\n  const state = ctx.store.getState();\n  const cookie = ctx.isServer ? ctx.req.headers.cookie : \"\";\n\n  if (ctx.isServer && cookie) {\n    Axios.defaults.headers.Cookie = cookie;\n  }\n\n  if (!state.user.me) {\n    ctx.store.dispatch({\n      type: LOAD_USER_REQUEST\n    });\n  }\n\n  if (Component.getInitialProps) {\n    pageProps = await Component.getInitialProps(ctx);\n  }\n\n  return {\n    pageProps\n  };\n};\n\nconst configureStore = (initialState, options) => {\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = [sagaMiddleware];\n  const enhancer = false ? compose(applyMiddleware(...middlewares)) : compose(applyMiddleware(...middlewares), !options.isServer && typeof window.__REDUX_DEVTOOLS_EXTENSION__ !== \"undefined\" ? window.__REDUX_DEVTOOLS_EXTENSION__() : f => f);\n  const store = createStore(reducer, initialState, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nexport default withRedux(configureStore)(withReduxsaga(Nodebird));","map":{"version":3,"sources":["C:/ReactNodeBird/Front/pages/_app.js"],"names":["React","Helmet","Container","AppLayout","withRedux","withReduxsaga","Provider","createStore","compose","applyMiddleware","reducer","createSagaMiddleware","rootSaga","LOAD_USER_POSTS_REQUEST","LOAD_USER_REQUEST","Axios","Nodebird","Component","store","pageProps","lang","charset","name","content","property","rel","href","getInitialProps","context","ctx","state","getState","cookie","isServer","req","headers","defaults","Cookie","user","me","dispatch","type","configureStore","initialState","options","sagaMiddleware","middlewares","enhancer","window","__REDUX_DEVTOOLS_EXTENSION__","f","sagaTask","run"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport Helmet from \"react-helmet\";\r\nimport{ Container } from 'next/app';\r\nimport AppLayout from \"../components/AppLayout\";\r\nimport withRedux from \"next-redux-wrapper\";\r\nimport withReduxsaga from \"next-redux-saga\";\r\nimport { Provider } from \"react-redux\";\r\nimport { createStore, compose, applyMiddleware } from \"redux\";\r\nimport reducer from \"../Reducer\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport rootSaga from \"../sagas\";\r\nimport { LOAD_USER_POSTS_REQUEST } from \"../Reducer/post\";\r\nimport { LOAD_USER_REQUEST } from \"../Reducer/user\";\r\nimport Axios from \"axios\";\r\n\r\n//모든 페이지에 공통적으로 들어가는것들을 여기다모음\r\n\r\nconst Nodebird = ({ Component, store, pageProps }) => {\r\n  //Component는 Next.js에서 넣어 주는 멤버 >> 말그대로 컴포넌트 전체를 넣어 주며 isServer router Component 등을 넗어준다\r\n  return (\r\n    <Container>\r\n    <Provider store={store}>\r\n    <Helmet\r\n          title=\"NodeBird\"\r\n          htmlAttributes={{ lang: 'ko' }}\r\n          meta={[{\r\n            charset: 'UTF-8',\r\n          }, {\r\n            name: 'viewport',\r\n            content: 'width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=yes,viewport-fit=cover',\r\n          }, {\r\n            'http-equiv': 'X-UA-Compatible', content: 'IE=edge',\r\n          }, {\r\n            name: 'description', content: '제로초의 NodeBird SNS',\r\n          }, {\r\n            name: 'og:title', content: 'NodeBird',\r\n          }, {\r\n            name: 'og:description', content: '제로초의 NodeBird SNS',\r\n          }, {\r\n            property: 'og:type', content: 'website',\r\n          }, {\r\n            property: 'og:image', content: 'https://nodebird.com/favicon.ico',\r\n          }]}\r\n          link={[{\r\n            rel: 'shortcut icon', href: '/public/favicon.ico',\r\n          }, {\r\n            rel: 'stylesheet', href: 'https://cdnjs.cloudflare.com/ajax/libs/antd/3.16.2/antd.css',\r\n          }, {\r\n            rel: 'stylesheet', href: 'https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick.min.css',\r\n          }, {\r\n            rel: 'stylesheet', href: 'https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick-theme.min.css',\r\n          }]}\r\n        />\r\n      <AppLayout>\r\n        <Component {...pageProps} />\r\n      </AppLayout>\r\n    </Provider>\r\n    </Container>\r\n  );\r\n};\r\n//store 만드는 과정 withRedux라는 고위함수를 만들어 주는데 확장자 처럼 사용되며\r\n//state+reducer가 합쳐진 것을 모으는 곳이 store라고함\r\n// export default withRedux((initialState,options)=>{\r\n//     const middlewares = [];\r\n//     const enhancer =  compose(\r\n//         applyMiddleware(...middlewares)\r\n//         ,!options.isServer && window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ?\r\n//         window.__REDUX_DEVTOOLS_EXTENSION__():(f)=>f);\r\n//     const store=createStore(reducer,initialState,enhancer);\r\n// //middlewares는 state,action,reducer와 store사이 기능을 추가 변조 할수있는 역할을 가짐\r\n//     return store;\r\n// })(Nodebird);\r\n\r\nNodebird.getInitialProps = async context => {\r\n  const { ctx, Component } = context;\r\n  let pageProps = {};\r\n  const state = ctx.store.getState();\r\n  const cookie = ctx.isServer ? ctx.req.headers.cookie : \"\";\r\n  if (ctx.isServer && cookie) {\r\n    Axios.defaults.headers.Cookie = cookie;\r\n  }\r\n  if (!state.user.me) {\r\n    ctx.store.dispatch({\r\n      type: LOAD_USER_REQUEST\r\n    });\r\n  }\r\n  if (Component.getInitialProps) {\r\n    pageProps = await Component.getInitialProps(ctx);\r\n  }\r\n\r\n  return { pageProps };\r\n};\r\n\r\nconst configureStore = (initialState, options) => {\r\n  const sagaMiddleware = createSagaMiddleware();\r\n  const middlewares = [sagaMiddleware];\r\n  const enhancer =\r\n    process.env.NODE_ENV === \"production\"\r\n      ? compose(applyMiddleware(...middlewares))\r\n      : compose(\r\n          applyMiddleware(...middlewares),\r\n          !options.isServer &&\r\n            typeof window.__REDUX_DEVTOOLS_EXTENSION__ !== \"undefined\"\r\n            ? window.__REDUX_DEVTOOLS_EXTENSION__()\r\n            : f => f\r\n        );\r\n  const store = createStore(reducer, initialState, enhancer);\r\n  store.sagaTask = sagaMiddleware.run(rootSaga);\r\n  return store;\r\n};\r\n\r\nexport default withRedux(configureStore)(withReduxsaga(Nodebird));\r\n"]},"metadata":{},"sourceType":"module"}