{"ast":null,"code":"var _jsxFileName = \"c:\\\\ReactNodeBird\\\\Front\\\\components\\\\PostCard.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport { Card, Icon, Button, Avatar, Divider, Form, Input, List, Comment } from \"antd\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { ADD_POST_REQUEST, ADD_COMMENT_REQUEST } from \"../Reducer/post\";\n\nconst PostCard = ({\n  post\n}) => {\n  const {\n    0: commentFormOpened,\n    1: setCommentOpened\n  } = useState(false);\n  const {\n    0: commentText,\n    1: setCommentText\n  } = useState(\"\");\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    commentAdded,\n    isAddingComment\n  } = useSelector(state => state.post);\n  const dispatch = useDispatch();\n  const onToggleComment = useCallback(() => {\n    setCommentOpened(prev => !prev);\n  }, []);\n  const onSubmitComment = useCallback(e => {\n    e.preventDefault();\n    console.log(me);\n\n    if (!me) {\n      return alert('로그인 필요합니다');\n    }\n\n    console.log(post);\n    dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id\n      }\n    });\n  }, [me && me.id]);\n  const onChangeCommentText = useCallback(e => {\n    setCommentText(e.target.value);\n  }, []);\n  useEffect(() => {\n    setCommentText('');\n  }, [commentAdded === true]);\n  console.log(post);\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  });\n};\n\nexport default PostCard;","map":{"version":3,"sources":["c:/ReactNodeBird/Front/components/PostCard.js"],"names":["React","useState","useCallback","useEffect","Card","Icon","Button","Avatar","Divider","Form","Input","List","Comment","useSelector","useDispatch","ADD_POST_REQUEST","ADD_COMMENT_REQUEST","PostCard","post","commentFormOpened","setCommentOpened","commentText","setCommentText","me","state","user","commentAdded","isAddingComment","dispatch","onToggleComment","prev","onSubmitComment","e","preventDefault","console","log","alert","type","data","postId","id","onChangeCommentText","target","value"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,EAAuCC,SAAvC,QAAwD,OAAxD;AACA,SAASC,IAAT,EAAeC,IAAf,EAAqBC,MAArB,EAA6BC,MAA7B,EAAqCC,OAArC,EAA8CC,IAA9C,EAAoDC,KAApD,EAA2DC,IAA3D,EAAgEC,OAAhE,QAA+E,MAA/E;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,gBAAT,EAA2BC,mBAA3B,QAAsD,iBAAtD;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAC7B,QAAM;AAAA,OAACC,iBAAD;AAAA,OAAoBC;AAApB,MAAwCnB,QAAQ,CAAC,KAAD,CAAtD;AACA,QAAM;AAAA,OAACoB,WAAD;AAAA,OAAcC;AAAd,MAAgCrB,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM;AAAEsB,IAAAA;AAAF,MAASV,WAAW,CAACW,KAAK,IAAIA,KAAK,CAACC,IAAhB,CAA1B;AACA,QAAM;AAAEC,IAAAA,YAAF;AAAgBC,IAAAA;AAAhB,MAAoCd,WAAW,CAACW,KAAK,IAAIA,KAAK,CAACN,IAAhB,CAArD;AACA,QAAMU,QAAQ,GAAGd,WAAW,EAA5B;AAEA,QAAMe,eAAe,GAAG3B,WAAW,CAAC,MAAM;AACxCkB,IAAAA,gBAAgB,CAACU,IAAI,IAAI,CAACA,IAAV,CAAhB;AACD,GAFkC,EAEhC,EAFgC,CAAnC;AAIA,QAAMC,eAAe,GAAG7B,WAAW,CAAE8B,CAAD,IAAM;AACtCA,IAAAA,CAAC,CAACC,cAAF;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYZ,EAAZ;;AACA,QAAG,CAACA,EAAJ,EAAO;AACH,aAAOa,KAAK,CAAC,WAAD,CAAZ;AACH;;AACDF,IAAAA,OAAO,CAACC,GAAR,CAAYjB,IAAZ;AACAU,IAAAA,QAAQ,CAAC;AACLS,MAAAA,IAAI,EAACrB,mBADA;AAELsB,MAAAA,IAAI,EAAE;AACFC,QAAAA,MAAM,EAACrB,IAAI,CAACsB;AADV;AAFD,KAAD,CAAR;AAMH,GAbkC,EAajC,CAACjB,EAAE,IAAIA,EAAE,CAACiB,EAAV,CAbiC,CAAnC;AAeA,QAAMC,mBAAmB,GAAGvC,WAAW,CAAE8B,CAAD,IAAM;AAC1CV,IAAAA,cAAc,CAACU,CAAC,CAACU,MAAF,CAASC,KAAV,CAAd;AACH,GAFsC,EAErC,EAFqC,CAAvC;AAIAxC,EAAAA,SAAS,CAAC,MAAI;AACZmB,IAAAA,cAAc,CAAC,EAAD,CAAd;AACD,GAFQ,EAEP,CAACI,YAAY,KAAK,IAAlB,CAFO,CAAT;AAGAQ,EAAAA,OAAO,CAACC,GAAR,CAAYjB,IAAZ;AACA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AA2CD,CA7ED;;AA+EA,eAAeD,QAAf","sourcesContent":["import React, { useState, useCallback, useEffect } from \"react\";\r\nimport { Card, Icon, Button, Avatar, Divider, Form, Input, List,Comment } from \"antd\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { ADD_POST_REQUEST, ADD_COMMENT_REQUEST } from \"../Reducer/post\";\r\n\r\nconst PostCard = ({ post }) => {\r\n  const [commentFormOpened, setCommentOpened] = useState(false);\r\n  const [commentText, setCommentText] = useState(\"\");\r\n  const { me } = useSelector(state => state.user);\r\n  const { commentAdded ,isAddingComment } = useSelector(state => state.post);\r\n  const dispatch = useDispatch();\r\n\r\n  const onToggleComment = useCallback(() => {\r\n    setCommentOpened(prev => !prev);\r\n  }, []);\r\n\r\n  const onSubmitComment = useCallback((e) =>{\r\n      e.preventDefault();\r\n      console.log(me)\r\n      if(!me){\r\n          return alert('로그인 필요합니다');\r\n      }\r\n      console.log(post)\r\n      dispatch({\r\n          type:ADD_COMMENT_REQUEST,\r\n          data: {\r\n              postId:post.id\r\n          }\r\n      })\r\n  },[me && me.id])\r\n\r\n  const onChangeCommentText = useCallback((e) =>{\r\n      setCommentText(e.target.value)\r\n  },[]);\r\n\r\n  useEffect(()=>{\r\n    setCommentText('');\r\n  },[commentAdded === true])\r\n  console.log(post);\r\n  return (\r\n    <div>\r\n      {/* <Card\r\n        key={+post.createAt}\r\n        cover={post.img && <img alt=\"example\" src={post.img} />}\r\n        actions={[\r\n          <Icon type=\"retweet\" key=\"retweet\" />,\r\n          <Icon type=\"heart\" key=\"heart\" />,\r\n          <Icon type=\"message\" key=\"message\" onClick={onToggleComment} />,\r\n          <Icon type=\"ellipsis\" key=\"ellipsis\" />\r\n        ]}\r\n        extra={<Button>팔로우</Button>}\r\n      >\r\n        <Card.Meta\r\n          avatar={<Avatar>{post.User.nickname[0]}</Avatar>}\r\n          title={post.User.nickname}\r\n          description={post.User.content}\r\n        />\r\n      </Card>\r\n      {commentFormOpened && \r\n      <>\r\n        <Form onSubmit = {onSubmitComment} >\r\n            <Form.Item>\r\n                <Input.TextArea rows={4} value={commentText} onChange={onChangeCommentText} />\r\n            </Form.Item>\r\n            <Button type=\"primary\" htmlType=\"submit\" loading={isAddingComment} > 입력!! </Button>\r\n        </Form>\r\n        <List \r\n            header ={`${post.Comments ? post.Comments.length : 0 } 댓글`}\r\n            itemLayout=\"horizontal\"\r\n            dataSource={post.Comments || [] }\r\n            renderItem={item=>(<li>\r\n                <Comment\r\n                    author = {item.User.nickname}\r\n                    avatar = {<Avatar>{item.User.nickname[0]}</Avatar>}\r\n                    content = {item.content}\r\n                    datetime = {item.createAt}\r\n                />\r\n            </li>)}\r\n         />\r\n      </>} */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostCard;\r\n"]},"metadata":{},"sourceType":"module"}